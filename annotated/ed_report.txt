 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (8219 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          000000000000e630 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)>:
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          }
         :          };
         :
         :          template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs>
         :          EIGEN_DONT_INLINE
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e630:       endbr64
    0.00 :   e634:       push   %r15
         :          Index strideA, Index strideB, Index offsetA, Index offsetB)
         :          {
         :          Traits traits;
         :          SwappedTraits straits;
         :
         :          if(strideA==-1) strideA = depth;
    0.00 :   e636:       mov    %r9,%rax
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e639:       push   %r14
    0.00 :   e63b:       push   %r13
    0.00 :   e63d:       push   %r12
    0.00 :   e63f:       push   %rbp
    0.00 :   e640:       push   %rbx
    0.00 :   e641:       sub    $0xc0,%rsp
         :          if(strideA==-1) strideA = depth;
    0.00 :   e648:       cmpq   $0xffffffffffffffff,0x108(%rsp)
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e651:       mov    %rsi,0x10(%rsp)
         :          {
         :          const Index l1 = defaultL1CacheSize; // in Bytes, TODO, l1 should be passed to this function.
         :          // The max(1, ...) here is needed because we may be using blocking params larger than what our known l1 cache size
         :          // suggests we should be using: either because our known l1 cache size is inaccurate (e.g. on Android, we can only guess),
         :          // or because we are testing specific blocking sizes.
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   e656:       lea    0x0(,%r9,8),%rsi
         :          if(strideA==-1) strideA = depth;
    0.00 :   e65e:       cmovne 0x108(%rsp),%rax
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e667:       mov    %rdx,0x90(%rsp)
         :          if(strideB==-1) strideB = depth;
    0.00 :   e66f:       cmpq   $0xffffffffffffffff,0x110(%rsp)
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e678:       mov    %rcx,0x98(%rsp)
         :          const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;
    0.00 :   e680:       mov    %r8,%rcx
         :          if(strideA==-1) strideA = depth;
    0.00 :   e683:       mov    %rax,0x108(%rsp)
         :          if(strideB==-1) strideB = depth;
    0.00 :   e68b:       mov    %r9,%rax
    0.00 :   e68e:       cmovne 0x110(%rsp),%rax
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e697:       mov    %r8,0xa0(%rsp)
         :          if(strideB==-1) strideB = depth;
    0.00 :   e69f:       mov    %rax,0x110(%rsp)
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   e6a7:       mov    0xf8(%rsp),%rax
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   e6af:       mov    %r9,-0x40(%rsp)
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   e6b4:       add    $0x3,%rax
    0.00 :   e6b8:       cmpq   $0x0,0xf8(%rsp)
    0.00 :   e6c1:       cmovns 0xf8(%rsp),%rax
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   e6ca:       xor    %edx,%edx
         :          const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;
    0.00 :   e6cc:       shr    $0x3f,%rcx
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   e6d0:       and    $0xfffffffffffffffc,%rax
         :          const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;
    0.00 :   e6d4:       add    %r8,%rcx
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   e6d7:       mov    %rax,0x40(%rsp)
         :          const Index peeled_kc  = depth & ~(pk-1);
    0.00 :   e6dc:       mov    %r9,%rax
    0.00 :   e6df:       and    $0xfffffffffffffff8,%rax
    0.00 :   e6e3:       mov    %rax,-0x68(%rsp)
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   e6e8:       mov    $0x7fe,%eax
    0.00 :   e6ed:       sub    %r9,%rax
    0.00 :   e6f0:       shl    $0x4,%rax
    0.00 :   e6f4:       div    %rsi
    0.00 :   e6f7:       mov    $0x1,%edx
    0.00 :   e6fc:       test   %rax,%rax
    0.00 :   e6ff:       cmovle %rdx,%rax
    0.00 :   e703:       add    %rax,%rax
         :
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.00 :   e706:       and    $0xfffffffffffffffe,%rcx
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   e70a:       mov    %rax,0x88(%rsp)
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.00 :   e712:       mov    %rcx,0x48(%rsp)
    0.00 :   e717:       jle    efcc <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x99c>
    0.00 :   e71d:       imul   0x108(%rsp),%rax
    0.00 :   e726:       mov    0x118(%rsp),%rbx
         :          r1.prefetch(prefetch_res_offset);
         :          r2.prefetch(prefetch_res_offset);
         :          r3.prefetch(prefetch_res_offset);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   e72e:       movq   $0x0,0x80(%rsp)
    0.00 :   e73a:       mov    -0x68(%rsp),%rsi
    0.00 :   e73f:       shl    $0x2,%rax
    0.00 :   e743:       lea    -0x1(%rsi),%rdx
    0.00 :   e747:       mov    %rax,0xb0(%rsp)
    0.00 :   e74f:       mov    0x90(%rsp),%rax
    0.00 :   e757:       shr    $0x3,%rdx
    0.00 :   e75b:       inc    %rdx
    0.00 :   e75e:       lea    (%rax,%rbx,8),%rax
    0.00 :   e762:       mov    0x98(%rsp),%rbx
    0.00 :   e76a:       mov    %rax,0x58(%rsp)
    0.00 :   e76f:       mov    $0x4,%eax
    0.00 :   e774:       shlx   %rax,0x110(%rsp),%rax
    0.00 :   e77e:       mov    %rax,0x70(%rsp)
    0.00 :   e783:       mov    0x120(%rsp),%rax
    0.00 :   e78b:       lea    0x30(,%rax,4),%rax
    0.00 :   e793:       lea    (%rbx,%rax,4),%rax
    0.00 :   e797:       mov    %rax,0xb8(%rsp)
    0.00 :   e79f:       mov    0x108(%rsp),%rax
    0.00 :   e7a7:       shl    $0x3,%rax
    0.00 :   e7ab:       mov    %rax,-0x30(%rsp)
    0.00 :   e7b0:       mov    %rdx,%rax
    0.00 :   e7b3:       shl    $0x6,%rax
    0.00 :   e7b7:       mov    %rax,-0x8(%rsp)
    0.00 :   e7bc:       mov    %rdx,%rax
    0.00 :   e7bf:       shl    $0x5,%rdx
    0.00 :   e7c3:       shl    $0x7,%rax
    0.00 :   e7c7:       mov    %rdx,0x68(%rsp)
    0.00 :   e7cc:       mov    %rax,0x60(%rsp)
    0.00 :   e7d1:       mov    0x110(%rsp),%rax
    0.00 :   e7d9:       shl    $0x2,%rax
    0.00 :   e7dd:       mov    %rax,0x78(%rsp)
    0.00 :   e7e2:       mov    0x40(%rsp),%rax
    0.00 :   e7e7:       imul   0x110(%rsp),%rax
    0.00 :   e7f0:       add    0x120(%rsp),%rax
    0.00 :   e7f8:       lea    (%rbx,%rax,4),%rax
    0.00 :   e7fc:       mov    %rax,0xa8(%rsp)
    0.00 :   e804:       mov    -0x40(%rsp),%rax
    0.00 :   e809:       sub    %rsi,%rax
    0.00 :   e80c:       mov    %rax,-0x58(%rsp)
    0.00 :   e811:       mov    0x80(%rsp),%rbx
    0.01 :   e819:       mov    0x88(%rsp),%rsi
    0.00 :   e821:       mov    %rbx,0x50(%rsp)
    0.00 :   e826:       mov    %rbx,%rax
    0.00 :   e829:       add    %rsi,%rbx
    0.00 :   e82c:       mov    0x48(%rsp),%rsi
    0.00 :   e831:       mov    %rbx,0x80(%rsp)
    0.00 :   e839:       cmp    %rbx,%rsi
    0.00 :   e83c:       cmovle %rsi,%rbx
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   e840:       cmpq   $0x0,0x40(%rsp)
    0.00 :   e846:       mov    %rbx,-0x38(%rsp)
    0.00 :   e84b:       jle    f5d7 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xfa7>
    0.00 :   e851:       cmp    %rbx,%rax
    0.00 :   e854:       jge    efac <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x97c>
    0.00 :   e85a:       mov    0xb8(%rsp),%rax
    0.00 :   e862:       movq   $0x0,(%rsp)
    0.00 :   e86a:       mov    %rax,0x30(%rsp)
    0.00 :   e86f:       nop
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.01 :   e870:       mov    0x30(%rsp),%rax
    0.00 :   e875:       mov    (%rsp),%rbx
    0.01 :   e879:       sub    $0xc0,%rax
    0.00 :   e87f:       lea    0x1(%rbx),%rsi
    0.00 :   e883:       mov    %rax,0x8(%rsp)
    0.00 :   e888:       add    0x60(%rsp),%rax
    0.00 :   e88d:       mov    %rax,0x38(%rsp)
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.01 :   e892:       mov    0x58(%rsp),%rax
    0.01 :   e897:       mov    %rsi,0x28(%rsp)
    0.00 :   e89c:       lea    0x2(%rbx),%rsi
    0.04 :   e8a0:       add    $0x3,%rbx
    0.00 :   e8a4:       mov    %rax,-0x48(%rsp)
    0.01 :   e8a9:       mov    0x50(%rsp),%rax
    0.00 :   e8ae:       mov    %rsi,0x20(%rsp)
    0.00 :   e8b3:       mov    %rbx,0x18(%rsp)
    0.01 :   e8b8:       mov    %rax,-0x50(%rsp)
    0.01 :   e8bd:       nopl   (%rax)
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   e8c0:       mov    -0x48(%rsp),%rax
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   e8c5:       mov    (%rsp),%rcx
    0.02 :   e8c9:       mov    -0x50(%rsp),%rbx
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          processor.  The selector I specifies the type of prefetch operation.  */
         :          #ifdef __OPTIMIZE__
         :          extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_prefetch (const void *__P, enum _mm_hint __I)
         :          {
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   e8ce:       prefetcht0 (%rax)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
    0.00 :   e8d1:       mov    %rax,%r13
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   e8d4:       mov    0x10(%rsp),%rax
    0.02 :   e8d9:       mov    (%rax),%rdx
    0.01 :   e8dc:       mov    0x8(%rax),%rax
    0.02 :   e8e0:       imul   %rax,%rcx
    0.05 :   e8e4:       add    %rbx,%rcx
    0.09 :   e8e7:       lea    (%rdx,%rcx,4),%rsi
    0.00 :   e8eb:       mov    0x28(%rsp),%rcx
    0.00 :   e8f0:       mov    %rsi,-0x10(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.02 :   e8f5:       prefetcht0 0x20(%rsi)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.19 :   e8f9:       imul   %rax,%rcx
    0.00 :   e8fd:       add    %rbx,%rcx
    0.01 :   e900:       lea    (%rdx,%rcx,4),%rdi
    0.01 :   e904:       mov    0x20(%rsp),%rcx
    0.03 :   e909:       mov    %rdi,-0x28(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   e90e:       prefetcht0 0x20(%rdi)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.01 :   e912:       imul   %rax,%rcx
    0.01 :   e916:       imul   0x18(%rsp),%rax
    0.02 :   e91c:       add    %rbx,%rcx
    0.01 :   e91f:       add    %rbx,%rax
    0.00 :   e922:       lea    (%rdx,%rcx,4),%rcx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          prefetch(&blB[0]);
         :          LhsPacket A0, A1;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   e926:       cmpq   $0x0,-0x68(%rsp)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.01 :   e92c:       lea    (%rdx,%rax,4),%rax
    0.00 :   e930:       mov    %rcx,-0x18(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.01 :   e935:       prefetcht0 0x20(%rcx)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.02 :   e939:       mov    %rax,-0x20(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   e93e:       prefetcht0 0x20(%rax)
    0.00 :   e942:       mov    0x8(%rsp),%rax
    0.00 :   e947:       prefetcht0 (%rax)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
    0.00 :   e94a:       jle    f590 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf60>
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   e950:       movl   $0x0,-0x70(%rsp)
    0.01 :   e958:       xor    %esi,%esi
    0.01 :   e95a:       xor    %r9d,%r9d
    0.00 :   e95d:       xor    %r11d,%r11d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.01 :   e960:       movq   $0x0,-0x78(%rsp)
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   e969:       xor    %r14d,%r14d
    0.00 :   e96c:       xor    %edx,%edx
    0.00 :   e96e:       xor    %ebp,%ebp
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.02 :   e970:       mov    0x30(%rsp),%rdi
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   e975:       mov    -0x48(%rsp),%r13
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   e97a:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   e97d:       mov    %esi,%r10d
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.02 :   e980:       prefetcht0 (%rdi)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBP_2PX4_SPILLING_WORKAROUND                         \
         :          EIGEN_ASM_COMMENT("end step of gebp micro kernel 2pX4");    \
         :          } while (false)
         :
         :          internal::prefetch(blB+(48+0));
         :          EIGEN_GEBGP_ONESTEP(0);
    0.11 :   e983:       mov    0x0(%r13),%esi
    0.02 :   e987:       mov    0x4(%r13),%r8d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          */
         :          template<typename Packet> EIGEN_DEVICE_FUNC
         :          inline void pbroadcast4(const typename unpacket_traits<Packet>::type *a,
         :          Packet& a0, Packet& a1, Packet& a2, Packet& a3)
         :          {
         :          a0 = pload1<Packet>(a+0);
    0.07 :   e98b:       mov    -0xc0(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    0.04 :   e991:       mov    -0xbc(%rdi),%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.18 :   e997:       mov    %esi,%r12d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a2 = pload1<Packet>(a+2);
    0.04 :   e99a:       mov    -0xb8(%rdi),%ebx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   e9a0:       imul   %ecx,%r12d
    0.00 :   e9a4:       imul   %r8d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.19 :   e9a8:       add    %r12d,%ebp
    0.04 :   e9ab:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.05 :   e9ae:       mov    %esi,%ecx
    0.01 :   e9b0:       imul   %eax,%ecx
    0.15 :   e9b3:       imul   %r8d,%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.02 :   e9b7:       add    %ecx,%edx
    0.04 :   e9b9:       add    %eax,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   e9bc:       mov    %esi,%eax
    0.09 :   e9be:       imul   %ebx,%eax
    0.02 :   e9c1:       imul   -0xb4(%rdi),%esi
    0.04 :   e9c8:       imul   %r8d,%ebx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.04 :   e9cc:       add    %eax,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.16 :   e9cf:       imul   -0xb4(%rdi),%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   e9d7:       add    -0x70(%rsp),%r8d
    0.00 :   e9dc:       add    %r10d,%esi
    0.01 :   e9df:       add    %r9d,%ebx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(1);
    0.05 :   e9e2:       mov    0x8(%r13),%ecx
    0.01 :   e9e6:       mov    0xc(%r13),%eax
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.02 :   e9ea:       mov    -0xb0(%rdi),%r10d
         :          a1 = pload1<Packet>(a+1);
    0.02 :   e9f1:       mov    -0xac(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.16 :   e9f8:       mov    %ecx,%r12d
    0.02 :   e9fb:       imul   %r10d,%r12d
    0.05 :   e9ff:       imul   %eax,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ea03:       add    %ebp,%r12d
    0.08 :   ea06:       add    %r10d,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.02 :   ea09:       mov    %ecx,%r10d
    0.05 :   ea0c:       imul   %r9d,%r10d
    0.00 :   ea10:       imul   %eax,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.07 :   ea14:       add    %r10d,%edx
    0.02 :   ea17:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.04 :   ea1a:       mov    -0xa8(%rdi),%r9d
    0.00 :   ea21:       imul   %ecx,%r9d
    0.12 :   ea25:       imul   -0xa4(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ea2c:       add    %r9d,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.02 :   ea2f:       mov    -0xa8(%rdi),%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ea36:       add    %ecx,%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.21 :   ea38:       imul   %eax,%r9d
    0.10 :   ea3c:       imul   -0xa4(%rdi),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.42 :   ea43:       add    %r9d,%ebx
    1.13 :   ea46:       add    %r8d,%eax
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(2);
   10.60 :   ea49:       mov    0x10(%r13),%r10d
    0.08 :   ea4d:       mov    0x14(%r13),%r8d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.02 :   ea51:       mov    -0xa0(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    2.08 :   ea57:       mov    -0x9c(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    8.88 :   ea5e:       mov    %r10d,%ebp
    0.04 :   ea61:       imul   %ecx,%ebp
    0.01 :   ea64:       imul   %r8d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    1.17 :   ea68:       add    %ebp,%r12d
    6.53 :   ea6b:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.06 :   ea6e:       mov    %r10d,%ecx
    0.01 :   ea71:       imul   %r9d,%ecx
    0.57 :   ea75:       imul   %r8d,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    1.72 :   ea79:       add    %ecx,%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.03 :   ea7b:       mov    -0x98(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.06 :   ea81:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.12 :   ea84:       imul   %r10d,%ecx
    0.35 :   ea88:       imul   -0x94(%rdi),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.35 :   ea90:       add    %ecx,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.11 :   ea93:       mov    -0x98(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.03 :   ea99:       add    %r10d,%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.46 :   ea9c:       imul   %r8d,%ecx
    0.13 :   eaa0:       imul   -0x94(%rdi),%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.35 :   eaa8:       add    %ecx,%ebx
    0.04 :   eaaa:       add    %eax,%r8d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(3);
    0.41 :   eaad:       mov    0x18(%r13),%r10d
    0.02 :   eab1:       mov    0x1c(%r13),%eax
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.02 :   eab5:       mov    -0x90(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    0.05 :   eabb:       mov    -0x8c(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.42 :   eac2:       mov    %r10d,%ebp
    0.03 :   eac5:       imul   %ecx,%ebp
    0.01 :   eac8:       imul   %eax,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.05 :   eacb:       add    %ebp,%r12d
    0.11 :   eace:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.02 :   ead1:       mov    %r10d,%ecx
    0.00 :   ead4:       imul   %r9d,%ecx
    0.01 :   ead8:       imul   %eax,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.09 :   eadc:       add    %ecx,%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   eade:       mov    -0x88(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eae4:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.05 :   eae7:       imul   %r10d,%ecx
    0.09 :   eaeb:       imul   -0x84(%rdi),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.03 :   eaf3:       add    %ecx,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.03 :   eaf6:       mov    -0x88(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eafc:       add    %r10d,%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.07 :   eaff:       imul   %eax,%ecx
    0.00 :   eb02:       imul   -0x84(%rdi),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.06 :   eb09:       add    %ecx,%ebx
    0.01 :   eb0b:       add    %r8d,%eax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.05 :   eb0e:       prefetcht0 0x40(%rdi)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          internal::prefetch(blB+(48+16));
         :          EIGEN_GEBGP_ONESTEP(4);
    0.05 :   eb12:       mov    0x20(%r13),%ecx
    0.05 :   eb16:       mov    0x24(%r13),%r8d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.06 :   eb1a:       mov    -0x80(%rdi),%r10d
         :          a1 = pload1<Packet>(a+1);
    0.07 :   eb1e:       mov    -0x7c(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   eb22:       mov    %ecx,%ebp
    0.01 :   eb24:       imul   %r10d,%ebp
    0.00 :   eb28:       imul   %r8d,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.05 :   eb2c:       add    %ebp,%r12d
    0.00 :   eb2f:       add    %r10d,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.02 :   eb32:       mov    %ecx,%r10d
    0.02 :   eb35:       imul   %r9d,%r10d
    0.07 :   eb39:       imul   %r8d,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eb3d:       add    %r10d,%edx
    0.04 :   eb40:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   eb43:       mov    -0x78(%rdi),%r9d
    0.16 :   eb47:       imul   %ecx,%r9d
    0.01 :   eb4b:       imul   -0x74(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.04 :   eb4f:       add    %r9d,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.02 :   eb52:       mov    -0x78(%rdi),%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.10 :   eb56:       add    %ecx,%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   eb58:       imul   %r8d,%r9d
    0.04 :   eb5c:       imul   -0x74(%rdi),%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.06 :   eb61:       add    %r9d,%ebx
    0.04 :   eb64:       add    %eax,%r8d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(5);
    0.06 :   eb67:       mov    0x28(%r13),%r10d
    0.01 :   eb6b:       mov    0x2c(%r13),%eax
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.00 :   eb6f:       mov    -0x70(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    0.09 :   eb72:       mov    -0x6c(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.10 :   eb76:       mov    %r10d,%ebp
    0.02 :   eb79:       imul   %ecx,%ebp
    0.01 :   eb7c:       imul   %eax,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.06 :   eb7f:       add    %ebp,%r12d
    0.42 :   eb82:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   eb85:       mov    %r10d,%ecx
    0.01 :   eb88:       imul   %r9d,%ecx
    0.32 :   eb8c:       imul   %eax,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    8.69 :   eb90:       add    %ecx,%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    2.90 :   eb92:       mov    -0x68(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eb95:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    4.46 :   eb98:       imul   %r10d,%ecx
    5.38 :   eb9c:       imul   -0x64(%rdi),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    3.28 :   eba1:       add    %ecx,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    1.28 :   eba4:       mov    -0x68(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.02 :   eba7:       add    %esi,%r10d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    5.31 :   ebaa:       imul   %eax,%ecx
    0.33 :   ebad:       imul   -0x64(%rdi),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    1.53 :   ebb1:       add    %ecx,%ebx
    0.13 :   ebb3:       add    %r8d,%eax
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(6);
    0.44 :   ebb6:       mov    0x30(%r13),%esi
    0.06 :   ebba:       mov    0x34(%r13),%r8d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.02 :   ebbe:       mov    -0x60(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    0.13 :   ebc1:       mov    -0x5c(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.36 :   ebc5:       mov    %esi,%ebp
    0.00 :   ebc7:       imul   %ecx,%ebp
    0.01 :   ebca:       imul   %r8d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.10 :   ebce:       add    %r12d,%ebp
    0.34 :   ebd1:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.03 :   ebd4:       mov    %esi,%ecx
    0.00 :   ebd6:       imul   %r9d,%ecx
    1.46 :   ebda:       imul   %r8d,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    7.48 :   ebde:       add    %ecx,%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    1.12 :   ebe0:       mov    -0x58(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ebe3:       add    %r11d,%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    1.76 :   ebe6:       imul   %esi,%ecx
    2.38 :   ebe9:       imul   -0x54(%rdi),%esi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    1.47 :   ebed:       add    %ecx,%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.23 :   ebf0:       mov    -0x58(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ebf3:       add    %r10d,%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    1.23 :   ebf6:       imul   %r8d,%ecx
    0.12 :   ebfa:       imul   -0x54(%rdi),%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.46 :   ebff:       add    %ecx,%ebx
    0.30 :   ec01:       add    %r8d,%eax
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(7);
    0.63 :   ec04:       mov    0x38(%r13),%r10d
    0.00 :   ec08:       mov    0x3c(%r13),%r8d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.00 :   ec0c:       mov    -0x50(%rdi),%ecx
         :          a1 = pload1<Packet>(a+1);
    0.08 :   ec0f:       mov    -0x4c(%rdi),%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.40 :   ec13:       mov    %r10d,%r12d
    0.01 :   ec16:       imul   %ecx,%r12d
    0.03 :   ec1a:       imul   %r8d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.12 :   ec1e:       add    %r12d,%ebp
    0.39 :   ec21:       add    %ecx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   ec24:       mov    %r10d,%ecx
    0.00 :   ec27:       imul   %r11d,%ecx
    0.14 :   ec2b:       imul   %r8d,%r11d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.50 :   ec2f:       add    %ecx,%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.05 :   ec31:       mov    -0x48(%rdi),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ec34:       add    %r9d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.13 :   ec37:       mov    -0x48(%rdi),%r9d
    0.18 :   ec3b:       imul   %r10d,%ecx
    0.16 :   ec3f:       imul   %r8d,%r9d
    0.20 :   ec43:       imul   -0x44(%rdi),%r8d
    0.16 :   ec48:       imul   -0x44(%rdi),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.14 :   ec4d:       add    %ecx,%r15d
    0.01 :   ec50:       add    %ebx,%r9d
    0.02 :   ec53:       add    %r8d,%eax
    0.03 :   ec56:       mov    %eax,-0x70(%rsp)
    0.24 :   ec5a:       add    %esi,%r10d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :
         :          blB += pk*4*RhsProgress;
         :          blA += pk*(2*Traits::LhsProgress);
    0.00 :   ec5d:       add    $0x40,%r13
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   ec61:       addq   $0x8,-0x78(%rsp)
    0.11 :   ec67:       sub    $0xffffffffffffff80,%rdi
    0.03 :   ec6b:       mov    -0x78(%rsp),%rax
    0.04 :   ec70:       cmp    %rax,-0x68(%rsp)
    0.00 :   ec75:       jg     e980 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x350>
    0.01 :   ec7b:       mov    %r9d,-0x78(%rsp)
         :          blB += pk*4*RhsProgress;
    0.00 :   ec80:       mov    0x38(%rsp),%rdi
    0.00 :   ec85:       mov    %r10d,%esi
    0.00 :   ec88:       mov    %r15d,-0x60(%rsp)
    0.00 :   ec8d:       mov    -0x48(%rsp),%r13
    0.01 :   ec92:       add    -0x8(%rsp),%r13
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 2pX4");
         :          }
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.01 :   ec97:       mov    -0x40(%rsp),%rbx
    0.00 :   ec9c:       mov    -0x70(%rsp),%ecx
    0.00 :   eca0:       cmp    %rbx,-0x68(%rsp)
    0.00 :   eca5:       jge    ed1b <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x6eb>
    0.00 :   eca7:       mov    -0x70(%rsp),%r12d
    0.00 :   ecac:       xor    %r8d,%r8d
    0.00 :   ecaf:       nop
         :          {
         :          RhsPacketx4 rhs_panel;
         :          RhsPacket T0;
         :          EIGEN_GEBGP_ONESTEP(0);
    0.00 :   ecb0:       mov    0x0(%r13,%r8,8),%ecx
    0.00 :   ecb5:       mov    0x4(%r13,%r8,8),%eax
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a0 = pload1<Packet>(a+0);
    0.00 :   ecba:       mov    (%rdi),%ebx
         :          a1 = pload1<Packet>(a+1);
    0.00 :   ecbc:       mov    0x4(%rdi),%r10d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ecc0:       mov    %ecx,%r15d
         :          _ZN5Eigen8internal11pbroadcast4IiEEvPKNS0_15unpacket_traitsIT_E4typeERS3_S8_S8_S8_():
         :          a2 = pload1<Packet>(a+2);
    0.00 :   ecc3:       mov    0x8(%rdi),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ecc7:       imul   %ebx,%r15d
    0.00 :   eccb:       imul   %eax,%ebx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ecce:       add    %r15d,%ebp
    0.00 :   ecd1:       add    %ebx,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ecd4:       mov    %ecx,%ebx
    0.00 :   ecd6:       imul   %r10d,%ebx
    0.00 :   ecda:       imul   %eax,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ecde:       add    %ebx,%edx
    0.00 :   ece0:       add    %r10d,%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ece3:       mov    %ecx,%r10d
    0.00 :   ece6:       imul   %r9d,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ecea:       add    %r10d,-0x60(%rsp)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ecef:       imul   %eax,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ecf3:       add    %r9d,-0x78(%rsp)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ecf8:       imul   0xc(%rdi),%ecx
    0.00 :   ecfc:       imul   0xc(%rdi),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed00:       add    %ecx,%esi
    0.00 :   ed02:       add    %eax,%r12d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          blB += 4*RhsProgress;
    0.00 :   ed05:       add    $0x10,%rdi
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   ed09:       inc    %r8
    0.00 :   ed0c:       cmp    %r8,-0x58(%rsp)
    0.00 :   ed11:       jne    ecb0 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x680>
    0.00 :   ed13:       mov    %r12d,-0x70(%rsp)
    0.00 :   ed18:       mov    %r12d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
    0.01 :   ed1b:       mov    -0x28(%rsp),%rbx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ed20:       mov    0x100(%rsp),%edi
    0.00 :   ed27:       imul   0x100(%rsp),%edx
    0.13 :   ed2f:       mov    -0x78(%rsp),%r15d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed34:       mov    (%rbx),%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.10 :   ed36:       imul   %ebp,%edi
    0.00 :   ed39:       mov    -0x60(%rsp),%r12d
    0.00 :   ed3e:       imul   0x100(%rsp),%r14d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   ed47:       addq   $0x2,-0x50(%rsp)
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed4d:       add    %edx,%eax
    0.00 :   ed4f:       mov    -0x10(%rsp),%rdx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ed54:       imul   0x100(%rsp),%r11d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.01 :   ed5d:       add    0x4(%rbx),%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   ed61:       imul   0x100(%rsp),%esi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed69:       add    %edi,(%rdx)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ed6b:       imul   0x100(%rsp),%ecx
    0.00 :   ed73:       imul   0x100(%rsp),%r15d
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          template<typename Scalar, typename Packet> EIGEN_DEVICE_FUNC inline void pstore(Scalar* to, const Packet& from)
         :          { (*to) = from; }
         :
         :          /** \internal copy the packet \a from to \a *to, (un-aligned store) */
         :          template<typename Scalar, typename Packet> EIGEN_DEVICE_FUNC inline void pstoreu(Scalar* to, const Packet& from)
         :          {  (*to) = from; }
    0.00 :   ed7c:       add    %r14d,0x4(%rdx)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.01 :   ed80:       imul   0x100(%rsp),%r12d
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.00 :   ed89:       mov    %eax,(%rbx)
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed8b:       mov    -0x20(%rsp),%rax
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.00 :   ed90:       mov    %r11d,0x4(%rbx)
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ed94:       mov    -0x18(%rsp),%rbx
    0.00 :   ed99:       add    (%rax),%esi
    0.19 :   ed9b:       add    0x4(%rax),%ecx
    0.07 :   ed9e:       add    %r12d,(%rbx)
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.22 :   eda1:       add    %r15d,0x4(%rbx)
    0.11 :   eda5:       mov    %esi,(%rax)
    0.00 :   eda7:       mov    %ecx,0x4(%rax)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
    0.00 :   edaa:       mov    -0x50(%rsp),%rax
    0.00 :   edaf:       mov    -0x30(%rsp),%rsi
    0.00 :   edb4:       add    %rsi,-0x48(%rsp)
    0.02 :   edb9:       cmp    -0x38(%rsp),%rax
    0.00 :   edbe:       jl     e8c0 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x290>
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   edc4:       addq   $0x4,(%rsp)
    0.01 :   edc9:       mov    0x70(%rsp),%rsi
    0.01 :   edce:       mov    (%rsp),%rax
    0.00 :   edd2:       add    %rsi,0x30(%rsp)
    0.04 :   edd7:       cmp    %rax,0x40(%rsp)
    0.00 :   eddc:       jg     e870 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x240>
         :          r3.storePacket(1 * Traits::ResPacketSize, R3);
         :          }
         :          }
         :
         :          // Deal with remaining columns of the rhs
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   ede2:       mov    0x40(%rsp),%rax
    0.00 :   ede7:       cmp    0xf8(%rsp),%rax
    0.00 :   edef:       jge    efac <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x97c>
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   edf5:       mov    0xa8(%rsp),%r13
    0.00 :   edfd:       mov    0x40(%rsp),%r12
    0.00 :   ee02:       mov    -0x68(%rsp),%r8
    0.00 :   ee07:       mov    0x10(%rsp),%rbp
    0.00 :   ee0c:       mov    %r13,-0x78(%rsp)
    0.00 :   ee11:       mov    -0x58(%rsp),%r9
    0.00 :   ee16:       mov    0x100(%rsp),%r13d
    0.00 :   ee1e:       xchg   %ax,%ax
         :          {
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   ee20:       mov    -0x78(%rsp),%rax
    0.00 :   ee25:       add    0x68(%rsp),%rax
         :
         :          LinearMapper r0 = res.getLinearMapper(i, j2);
         :          r0.prefetch(prefetch_res_offset);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   ee2a:       mov    0x58(%rsp),%r11
    0.00 :   ee2f:       mov    0x50(%rsp),%rbx
    0.00 :   ee34:       mov    %rax,-0x70(%rsp)
    0.00 :   ee39:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   ee40:       mov    0x8(%rbp),%rax
    0.00 :   ee44:       mov    0x0(%rbp),%rdx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   ee48:       mov    %r11,%rdi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   ee4b:       prefetcht0 (%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   ee4f:       imul   %r12,%rax
    0.00 :   ee53:       add    %rbx,%rax
    0.00 :   ee56:       lea    (%rdx,%rax,4),%r10
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   ee5a:       prefetcht0 0x20(%r10)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          LhsPacket A0, A1;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   ee5f:       test   %r8,%r8
    0.00 :   ee62:       jle    f578 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf48>
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   ee68:       mov    -0x78(%rsp),%rsi
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   ee6d:       mov    %r11,%rax
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   ee70:       xor    %edx,%edx
    0.00 :   ee72:       xor    %ecx,%ecx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   ee74:       xor    %r14d,%r14d
    0.00 :   ee77:       nopw   0x0(%rax,%rax,1)
         :          traits.madd(A0, B_0, C0, B1, fix<0>);                               \
         :          traits.madd(A1, B_0, C4, B_0, fix<0>);                              \
         :          EIGEN_ASM_COMMENT("end step of gebp micro kernel 2pX1");            \
         :          } while(false)
         :
         :          EIGEN_GEBGP_ONESTEP(0);
    0.00 :   ee80:       mov    (%rsi),%r15d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ee83:       mov    (%rax),%edi
    0.00 :   ee85:       imul   %r15d,%edi
    0.00 :   ee89:       imul   0x4(%rax),%r15d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ee8e:       add    %edi,%ecx
    0.00 :   ee90:       lea    (%r15,%rdx,1),%edi
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(1);
    0.00 :   ee94:       mov    0x4(%rsi),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ee97:       mov    0x8(%rax),%r15d
    0.00 :   ee9b:       imul   %edx,%r15d
    0.00 :   ee9f:       imul   0xc(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eea3:       add    %r15d,%ecx
    0.00 :   eea6:       lea    (%rdx,%rdi,1),%r15d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(2);
    0.00 :   eeaa:       mov    0x8(%rsi),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   eead:       mov    0x10(%rax),%edi
    0.00 :   eeb0:       imul   %edx,%edi
    0.00 :   eeb3:       imul   0x14(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eeb7:       add    %edi,%ecx
    0.00 :   eeb9:       add    %r15d,%edx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(3);
    0.00 :   eebc:       mov    0xc(%rsi),%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   eebf:       mov    0x18(%rax),%r15d
    0.00 :   eec3:       imul   %edi,%r15d
    0.00 :   eec7:       imul   0x1c(%rax),%edi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eecb:       add    %ecx,%r15d
    0.00 :   eece:       lea    (%rdi,%rdx,1),%ecx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(4);
    0.00 :   eed1:       mov    0x10(%rsi),%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   eed4:       mov    0x20(%rax),%edx
    0.00 :   eed7:       imul   %edi,%edx
    0.00 :   eeda:       imul   0x24(%rax),%edi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eede:       add    %edx,%r15d
    0.00 :   eee1:       add    %ecx,%edi
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(5);
    0.00 :   eee3:       mov    0x14(%rsi),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   eee6:       mov    0x28(%rax),%ecx
    0.00 :   eee9:       imul   %edx,%ecx
    0.00 :   eeec:       imul   0x2c(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   eef0:       add    %r15d,%ecx
    0.00 :   eef3:       lea    (%rdx,%rdi,1),%r15d
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(6);
    0.00 :   eef7:       mov    0x18(%rsi),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   eefa:       mov    0x30(%rax),%edi
    0.00 :   eefd:       imul   %edx,%edi
    0.00 :   ef00:       imul   0x34(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ef04:       add    %edi,%ecx
    0.00 :   ef06:       add    %r15d,%edx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          EIGEN_GEBGP_ONESTEP(7);
    0.00 :   ef09:       mov    0x1c(%rsi),%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ef0c:       mov    0x38(%rax),%r15d
    0.00 :   ef10:       imul   %edi,%r15d
    0.00 :   ef14:       imul   0x3c(%rax),%edi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ef18:       add    %r15d,%ecx
    0.00 :   ef1b:       add    %edi,%edx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   ef1d:       add    $0x20,%rsi
         :          blA += int(pk) * 2 * int(Traits::LhsProgress);
    0.00 :   ef21:       add    $0x40,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   ef25:       add    $0x8,%r14
    0.00 :   ef29:       cmp    %r14,%r8
    0.00 :   ef2c:       jg     ee80 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x850>
    0.00 :   ef32:       mov    -0x8(%rsp),%rax
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   ef37:       mov    -0x70(%rsp),%r15
    0.00 :   ef3c:       lea    (%r11,%rax,1),%rdi
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 2pX1");
         :          }
         :
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   ef40:       xor    %eax,%eax
    0.00 :   ef42:       cmp    -0x40(%rsp),%r8
    0.00 :   ef47:       jge    ef6e <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x93e>
    0.00 :   ef49:       nopl   0x0(%rax)
         :          {
         :          RhsPacket B_0, B1;
         :          EIGEN_GEBGP_ONESTEP(0);
    0.00 :   ef50:       mov    (%r15,%rax,4),%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ef54:       mov    (%rdi,%rax,8),%r14d
    0.00 :   ef58:       imul   %esi,%r14d
    0.00 :   ef5c:       imul   0x4(%rdi,%rax,8),%esi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ef61:       add    %r14d,%ecx
    0.00 :   ef64:       add    %esi,%edx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   ef66:       inc    %rax
    0.00 :   ef69:       cmp    %rax,%r9
    0.00 :   ef6c:       jne    ef50 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x920>
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ef6e:       imul   %r13d,%edx
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   ef72:       add    $0x2,%rbx
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.00 :   ef76:       add    %edx,0x4(%r10)
    0.00 :   ef7a:       add    -0x30(%rsp),%r11
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   ef7f:       imul   %r13d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   ef83:       add    %ecx,(%r10)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
    0.00 :   ef86:       cmp    -0x38(%rsp),%rbx
    0.00 :   ef8b:       jl     ee40 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x810>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   ef91:       mov    0x78(%rsp),%rbx
    0.00 :   ef96:       inc    %r12
    0.00 :   ef99:       add    %rbx,-0x78(%rsp)
    0.00 :   ef9e:       cmp    %r12,0xf8(%rsp)
    0.00 :   efa6:       jne    ee20 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x7f0>
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.01 :   efac:       mov    0xb0(%rsp),%rbx
    0.00 :   efb4:       add    %rbx,0x58(%rsp)
    0.01 :   efb9:       mov    0x80(%rsp),%rbx
    0.00 :   efc1:       cmp    %rbx,0x48(%rsp)
    0.00 :   efc6:       jg     e811 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x1e1>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index i=peelStart; i<peelEnd; i+=LhsProgress)
    0.00 :   efcc:       mov    0xa0(%rsp),%rbx
    0.00 :   efd4:       cmp    %rbx,0x48(%rsp)
    0.00 :   efd9:       jge    f560 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf30>
    0.00 :   efdf:       mov    0x108(%rsp),%rax
    0.00 :   efe7:       mov    0x90(%rsp),%rbx
    0.00 :   efef:       mov    0x98(%rsp),%rsi
    0.00 :   eff7:       shl    $0x2,%rax
    0.00 :   effb:       mov    %rax,(%rsp)
    0.00 :   efff:       mov    0x48(%rsp),%rax
    0.00 :   f004:       imul   0x108(%rsp),%rax
    0.00 :   f00d:       add    0x118(%rsp),%rax
    0.00 :   f015:       lea    (%rbx,%rax,4),%rax
    0.00 :   f019:       mov    %rax,-0x48(%rsp)
    0.00 :   f01e:       mov    $0x4,%eax
    0.00 :   f023:       shlx   %rax,0x110(%rsp),%rbx
    0.00 :   f02d:       shlx   %rax,0x120(%rsp),%rax
    0.00 :   f037:       mov    %rbx,-0x30(%rsp)
    0.00 :   f03c:       mov    -0x68(%rsp),%rbx
    0.00 :   f041:       add    %rsi,%rax
    0.00 :   f044:       mov    %rax,0x8(%rsp)
    0.00 :   f049:       lea    -0x1(%rbx),%rax
    0.00 :   f04d:       mov    %rbx,%r15
    0.00 :   f050:       shr    $0x3,%rax
    0.00 :   f054:       inc    %rax
    0.00 :   f057:       mov    %rax,%rdx
    0.00 :   f05a:       shl    $0x5,%rax
    0.00 :   f05e:       mov    %rax,-0x10(%rsp)
    0.00 :   f063:       mov    %rbx,%rax
    0.00 :   f066:       shl    $0x7,%rdx
    0.00 :   f06a:       neg    %rax
    0.00 :   f06d:       mov    %rdx,-0x28(%rsp)
    0.00 :   f072:       shl    $0x2,%rax
    0.00 :   f076:       mov    %rax,-0x18(%rsp)
    0.00 :   f07b:       mov    0x110(%rsp),%rax
    0.00 :   f083:       shl    $0x2,%rax
    0.00 :   f087:       mov    %rax,-0x38(%rsp)
    0.00 :   f08c:       mov    0x40(%rsp),%rax
    0.00 :   f091:       imul   0x110(%rsp),%rax
    0.00 :   f09a:       add    0x120(%rsp),%rax
    0.00 :   f0a2:       lea    (%rsi,%rax,4),%rax
    0.00 :   f0a6:       mov    %rax,-0x8(%rsp)
    0.00 :   f0ab:       mov    -0x40(%rsp),%rax
    0.00 :   f0b0:       sub    %rbx,%rax
    0.00 :   f0b3:       mov    %rax,0x18(%rsp)
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   f0b8:       movq   $0x0,-0x78(%rsp)
    0.00 :   f0c1:       mov    -0x48(%rsp),%rax
    0.00 :   f0c6:       add    -0x10(%rsp),%rax
    0.00 :   f0cb:       cmpq   $0x0,0x40(%rsp)
    0.00 :   f0d1:       mov    %rax,-0x20(%rsp)
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   f0d6:       mov    0x8(%rsp),%rax
    0.00 :   f0db:       mov    %rax,-0x70(%rsp)
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   f0e0:       jle    f414 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xde4>
    0.00 :   f0e6:       nopw   %cs:0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f0f0:       mov    0x10(%rsp),%rax
    0.00 :   f0f5:       mov    -0x78(%rsp),%rbx
    0.00 :   f0fa:       mov    0x48(%rsp),%rsi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f0ff:       mov    -0x48(%rsp),%r8
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f104:       mov    0x8(%rax),%rcx
    0.00 :   f108:       mov    (%rax),%rdx
    0.00 :   f10b:       mov    %rbx,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f10e:       prefetcht0 (%r8)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f112:       imul   %rcx,%rax
    0.00 :   f116:       add    %rsi,%rax
    0.00 :   f119:       lea    (%rdx,%rax,4),%rdi
    0.00 :   f11d:       lea    0x1(%rbx),%rax
    0.00 :   f121:       imul   %rcx,%rax
    0.00 :   f125:       mov    %rdi,-0x68(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f12a:       prefetcht0 0x20(%rdi)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f12e:       add    %rsi,%rax
    0.00 :   f131:       lea    (%rdx,%rax,4),%r11
    0.00 :   f135:       lea    0x2(%rbx),%rax
    0.00 :   f139:       imul   %rcx,%rax
    0.00 :   f13d:       mov    %r11,-0x60(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f142:       prefetcht0 0x20(%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f147:       add    %rsi,%rax
    0.00 :   f14a:       lea    (%rdx,%rax,4),%r14
    0.00 :   f14e:       lea    0x3(%rbx),%rax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   f152:       mov    -0x70(%rsp),%rbx
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f157:       imul   %rcx,%rax
    0.00 :   f15b:       mov    %r14,-0x58(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f160:       prefetcht0 0x20(%r14)
    0.00 :   f165:       prefetcht0 (%rbx)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f168:       add    %rsi,%rax
    0.00 :   f16b:       lea    (%rdx,%rax,4),%rax
    0.00 :   f16f:       mov    %rax,-0x50(%rsp)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f174:       prefetcht0 0x20(%rax)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
    0.00 :   f178:       mov    %rbx,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   f17b:       test   %r15,%r15
    0.00 :   f17e:       jle    f5c6 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf96>
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   f184:       xor    %r12d,%r12d
    0.00 :   f187:       xor    %ecx,%ecx
    0.00 :   f189:       lea    0xc0(%rbx),%rax
    0.00 :   f190:       xor    %r9d,%r9d
    0.00 :   f193:       xor    %r13d,%r13d
    0.00 :   f196:       xor    %edx,%edx
    0.00 :   f198:       xor    %esi,%esi
    0.00 :   f19a:       xor    %edi,%edi
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   f19c:       xor    %r14d,%r14d
    0.00 :   f19f:       mov    %r12d,%ebp
    0.00 :   f1a2:       mov    %ecx,%ebx
    0.00 :   f1a4:       nopl   0x0(%rax)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f1a8:       prefetcht0 (%rax)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
         :          traits.loadLhs(&blA[(0+1*K)*LhsProgress], *A0);
    0.00 :   f1ab:       mov    (%r8),%ecx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1ae:       mov    -0xc0(%rax),%r10d
    0.00 :   f1b5:       imul   %ecx,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f1b9:       add    %r10d,%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1bc:       mov    -0xbc(%rax),%r10d
    0.00 :   f1c3:       imul   %ecx,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f1c7:       add    %r10d,%ebx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1ca:       mov    -0xb8(%rax),%r10d
    0.00 :   f1d1:       imul   %ecx,%r10d
    0.00 :   f1d5:       imul   -0xb4(%rax),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f1dc:       add    %r10d,%esi
    0.00 :   f1df:       add    %ecx,%edx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f1e1:       mov    0x4(%r8),%r10d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1e5:       mov    -0xb0(%rax),%ecx
    0.00 :   f1eb:       imul   %r10d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f1ef:       add    %ecx,%ebp
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1f1:       mov    -0xac(%rax),%ecx
    0.00 :   f1f7:       imul   %r10d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f1fb:       add    %ecx,%r12d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f1fe:       mov    -0xa8(%rax),%ecx
    0.00 :   f204:       imul   %r10d,%ecx
    0.00 :   f208:       imul   -0xa4(%rax),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f210:       add    %ecx,%r13d
    0.00 :   f213:       add    %r10d,%r9d
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f216:       mov    0x8(%r8),%r11d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f21a:       mov    -0xa0(%rax),%ecx
    0.00 :   f220:       imul   %r11d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f224:       add    %ecx,%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f226:       mov    -0x9c(%rax),%ecx
    0.00 :   f22c:       imul   %r11d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f230:       add    %ecx,%ebx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f232:       mov    -0x98(%rax),%ecx
    0.00 :   f238:       imul   %r11d,%ecx
    0.00 :   f23c:       imul   -0x94(%rax),%r11d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f244:       add    %ecx,%esi
    0.00 :   f246:       lea    (%r11,%rdx,1),%ecx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f24a:       mov    0xc(%r8),%r10d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f24e:       mov    -0x90(%rax),%edx
    0.00 :   f254:       imul   %r10d,%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f258:       add    %edx,%ebp
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f25a:       mov    -0x8c(%rax),%edx
    0.00 :   f260:       imul   %r10d,%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f264:       add    %edx,%r12d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f267:       mov    -0x88(%rax),%edx
    0.00 :   f26d:       imul   %r10d,%edx
    0.00 :   f271:       imul   -0x84(%rax),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f279:       add    %edx,%r13d
    0.00 :   f27c:       add    %r10d,%r9d
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f27f:       prefetcht0 0x40(%rax)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f283:       mov    0x10(%r8),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f287:       mov    -0x80(%rax),%r10d
    0.00 :   f28b:       imul   %edx,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f28f:       add    %r10d,%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f292:       mov    -0x7c(%rax),%r10d
    0.00 :   f296:       imul   %edx,%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f29a:       add    %r10d,%ebx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f29d:       mov    -0x78(%rax),%r10d
    0.00 :   f2a1:       imul   %edx,%r10d
    0.00 :   f2a5:       imul   -0x74(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2a9:       add    %r10d,%esi
    0.00 :   f2ac:       lea    (%rdx,%rcx,1),%r11d
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f2b0:       mov    0x14(%r8),%r10d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2b4:       mov    -0x70(%rax),%edx
    0.00 :   f2b7:       mov    -0x6c(%rax),%ecx
    0.00 :   f2ba:       imul   %r10d,%edx
    0.00 :   f2be:       imul   %r10d,%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2c2:       add    %edx,%ebp
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2c4:       mov    -0x68(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2c7:       add    %r12d,%ecx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2ca:       imul   %r10d,%edx
    0.00 :   f2ce:       imul   -0x64(%rax),%r10d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2d3:       add    %edx,%r13d
    0.00 :   f2d6:       add    %r9d,%r10d
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f2d9:       mov    0x18(%r8),%edx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2dd:       mov    -0x60(%rax),%r9d
    0.00 :   f2e1:       imul   %edx,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2e5:       add    %r9d,%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2e8:       mov    -0x5c(%rax),%r9d
    0.00 :   f2ec:       imul   %edx,%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2f0:       add    %r9d,%ebx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f2f3:       mov    -0x58(%rax),%r9d
    0.00 :   f2f7:       imul   %edx,%r9d
    0.00 :   f2fb:       imul   -0x54(%rax),%edx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f2ff:       add    %r9d,%esi
    0.00 :   f302:       add    %r11d,%edx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
    0.00 :   f305:       mov    0x1c(%r8),%r9d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f309:       mov    -0x4c(%rax),%r12d
    0.00 :   f30d:       mov    -0x50(%rax),%r11d
    0.00 :   f311:       imul   %r9d,%r12d
    0.00 :   f315:       imul   %r9d,%r11d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f319:       add    %ecx,%r12d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f31c:       mov    -0x48(%rax),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f31f:       add    %r11d,%ebp
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f322:       imul   %r9d,%ecx
    0.00 :   f326:       imul   -0x44(%rax),%r9d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f32b:       add    %ecx,%r13d
    0.00 :   f32e:       add    %r10d,%r9d
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          blA += pk*LhsProgress;
    0.00 :   f331:       add    $0x20,%r8
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   f335:       add    $0x8,%r14
    0.00 :   f339:       sub    $0xffffffffffffff80,%rax
    0.00 :   f33d:       cmp    %r14,%r15
    0.00 :   f340:       jg     f1a8 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xb78>
    0.00 :   f346:       mov    %ebx,%ecx
         :          blA += pk*LhsProgress;
    0.00 :   f348:       mov    -0x20(%rsp),%r10
    0.00 :   f34d:       mov    -0x70(%rsp),%rax
    0.00 :   f352:       add    %ebp,%edi
    0.00 :   f354:       add    -0x28(%rsp),%rax
    0.00 :   f359:       add    %r12d,%ecx
    0.00 :   f35c:       add    %esi,%r13d
    0.00 :   f35f:       add    %r9d,%edx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   f362:       mov    -0x40(%rsp),%r11
    0.00 :   f367:       cmp    %r11,%r15
    0.00 :   f36a:       jge    f3ae <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xd7e>
    0.00 :   f36c:       add    -0x18(%rsp),%r10
    0.00 :   f371:       mov    %r15,%r9
    0.00 :   f374:       nopl   0x0(%rax)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEE17peeled_kc_onestepElPKiSA_S3_PiPNS0_10QuadPacketIiEESB_SB_SB_SB_SB_():
         :          traits.loadLhs(&blA[(0+1*K)*LhsProgress], *A0);
    0.00 :   f378:       mov    (%r10,%r9,4),%esi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f37c:       mov    (%rax),%r8d
    0.00 :   f37f:       imul   %esi,%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f383:       add    %r8d,%edi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f386:       mov    0x4(%rax),%r8d
    0.00 :   f38a:       imul   %esi,%r8d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f38e:       add    %r8d,%ecx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f391:       mov    0x8(%rax),%r8d
    0.00 :   f395:       imul   %esi,%r8d
    0.00 :   f399:       imul   0xc(%rax),%esi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f39d:       add    %r8d,%r13d
    0.00 :   f3a0:       add    %esi,%edx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   f3a2:       inc    %r9
         :          blB += 4*RhsProgress;
    0.00 :   f3a5:       add    $0x10,%rax
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   f3a9:       cmp    %r9,%r11
    0.00 :   f3ac:       jne    f378 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xd48>
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
    0.00 :   f3ae:       mov    -0x60(%rsp),%rbx
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f3b3:       imul   0x100(%rsp),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f3bb:       mov    -0x68(%rsp),%rsi
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f3c0:       imul   0x100(%rsp),%edi
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f3c8:       mov    (%rbx),%eax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   f3ca:       addq   $0x4,-0x78(%rsp)
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
    0.00 :   f3d0:       add    %edi,(%rsi)
    0.00 :   f3d2:       mov    -0x58(%rsp),%rsi
    0.00 :   f3d7:       add    %ecx,%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f3d9:       imul   0x100(%rsp),%edx
    0.00 :   f3e1:       imul   0x100(%rsp),%r13d
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.00 :   f3ea:       mov    %eax,(%rbx)
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f3ec:       mov    -0x50(%rsp),%rbx
    0.00 :   f3f1:       mov    (%rbx),%eax
    0.00 :   f3f3:       add    %r13d,(%rsi)
    0.00 :   f3f6:       mov    -0x30(%rsp),%rsi
    0.00 :   f3fb:       add    %rsi,-0x70(%rsp)
    0.00 :   f400:       add    %edx,%eax
         :          _ZN5Eigen8internal7pstoreuIiiEEvPT_RKT0_():
         :          {  (*to) = from; }
    0.00 :   f402:       mov    %eax,(%rbx)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
    0.00 :   f404:       mov    -0x78(%rsp),%rax
    0.00 :   f409:       cmp    %rax,0x40(%rsp)
    0.00 :   f40e:       jg     f0f0 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xac0>
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   f414:       mov    0x40(%rsp),%rax
    0.00 :   f419:       mov    -0x48(%rsp),%r11
    0.00 :   f41e:       mov    -0x8(%rsp),%rdi
    0.00 :   f423:       add    -0x10(%rsp),%r11
    0.00 :   f428:       mov    %rax,%r8
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   f42b:       cmp    0xf8(%rsp),%rax
    0.00 :   f433:       jge    f53f <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf0f>
    0.00 :   f439:       mov    -0x10(%rsp),%r13
    0.00 :   f43e:       mov    -0x48(%rsp),%rbx
    0.00 :   f443:       mov    0x10(%rsp),%rbp
    0.00 :   f448:       mov    0x100(%rsp),%r12d
    0.00 :   f450:       mov    0x18(%rsp),%r9
    0.00 :   f455:       nopl   (%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f458:       mov    0x8(%rbp),%rax
    0.00 :   f45c:       mov    0x0(%rbp),%rdx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   f460:       mov    %rdi,%rsi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   f463:       prefetcht0 (%rbx)
         :          _ZNK5Eigen8internal16blas_data_mapperIilLi0ELi0ELi1EEclEll():
    0.00 :   f466:       imul   %r8,%rax
    0.00 :   f46a:       add    0x48(%rsp),%rax
    0.00 :   f46f:       lea    (%rdx,%rax,4),%r10
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   f473:       test   %r15,%r15
    0.00 :   f476:       jle    f5bc <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xf8c>
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   f47c:       mov    %rdi,%rcx
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   f47f:       mov    %rbx,%rdx
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   f482:       xor    %eax,%eax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   f484:       xor    %esi,%esi
    0.00 :   f486:       nopw   %cs:0x0(%rax,%rax,1)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f490:       mov    (%rdx),%r14d
    0.00 :   f493:       imul   (%rcx),%r14d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f497:       add    %r14d,%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f49a:       mov    0x4(%rdx),%r14d
    0.00 :   f49e:       imul   0x4(%rcx),%r14d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4a3:       add    %eax,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4a6:       mov    0x8(%rdx),%eax
    0.00 :   f4a9:       imul   0x8(%rcx),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4ad:       add    %eax,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4b0:       mov    0xc(%rdx),%eax
    0.00 :   f4b3:       imul   0xc(%rcx),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4b7:       add    %r14d,%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4ba:       mov    0x10(%rdx),%r14d
    0.00 :   f4be:       imul   0x10(%rcx),%r14d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4c3:       add    %r14d,%eax
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4c6:       mov    0x14(%rdx),%r14d
    0.00 :   f4ca:       imul   0x14(%rcx),%r14d
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4cf:       add    %eax,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4d2:       mov    0x18(%rdx),%eax
    0.00 :   f4d5:       imul   0x18(%rcx),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4d9:       add    %eax,%r14d
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f4dc:       mov    0x1c(%rdx),%eax
    0.00 :   f4df:       imul   0x1c(%rcx),%eax
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f4e3:       add    %r14d,%eax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          blB += pk*RhsProgress;
    0.00 :   f4e6:       add    $0x20,%rcx
         :          blA += pk*LhsProgress;
    0.00 :   f4ea:       add    $0x20,%rdx
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   f4ee:       add    $0x8,%rsi
    0.00 :   f4f2:       cmp    %rsi,%r15
    0.00 :   f4f5:       jg     f490 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xe60>
    0.00 :   f4f7:       lea    (%rdi,%r13,1),%rsi
         :          blA += pk*LhsProgress;
    0.00 :   f4fb:       mov    %r11,%r14
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   f4fe:       xor    %edx,%edx
    0.00 :   f500:       cmp    -0x40(%rsp),%r15
    0.00 :   f505:       jge    f522 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xef2>
    0.00 :   f507:       nopw   0x0(%rax,%rax,1)
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f510:       mov    (%r14,%rdx,4),%ecx
    0.00 :   f514:       imul   (%rsi,%rdx,4),%ecx
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f518:       add    %ecx,%eax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
    0.00 :   f51a:       inc    %rdx
    0.00 :   f51d:       cmp    %r9,%rdx
    0.00 :   f520:       jne    f510 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xee0>
         :          _ZN5Eigen8internal4pmulIiEET_RKS2_S4_():
         :          pmul(const Packet& a, const Packet& b) { return a*b; }
    0.00 :   f522:       imul   %r12d,%eax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   f526:       inc    %r8
         :          _ZN5Eigen8internal4paddIiEET_RKS2_S4_():
         :          padd(const Packet& a, const Packet& b) { return a+b; }
    0.00 :   f529:       add    %eax,(%r10)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
    0.00 :   f52c:       add    -0x38(%rsp),%rdi
    0.00 :   f531:       cmp    %r8,0xf8(%rsp)
    0.00 :   f539:       jne    f458 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xe28>
         :          for(Index i=peelStart; i<peelEnd; i+=LhsProgress)
    0.00 :   f53f:       incq   0x48(%rsp)
    0.00 :   f544:       mov    (%rsp),%rsi
    0.00 :   f548:       mov    0x48(%rsp),%rax
    0.00 :   f54d:       add    %rsi,-0x48(%rsp)
    0.00 :   f552:       cmp    %rax,0xa0(%rsp)
    0.00 :   f55a:       jne    f0b8 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xa88>
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          }
         :          res(i, j2) += alpha * C0;
         :          }
         :          }
         :          }
         :          }
    0.00 :   f560:       add    $0xc0,%rsp
    0.00 :   f567:       pop    %rbx
    0.00 :   f568:       pop    %rbp
    0.00 :   f569:       pop    %r12
    0.00 :   f56b:       pop    %r13
    0.00 :   f56d:       pop    %r14
    0.00 :   f56f:       pop    %r15
    0.00 :   f571:       retq
    0.00 :   f572:       nopw   0x0(%rax,%rax,1)
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   f578:       mov    -0x78(%rsp),%r15
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   f57d:       xor    %edx,%edx
    0.00 :   f57f:       xor    %ecx,%ecx
    0.00 :   f581:       jmpq   ef40 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x910>
    0.00 :   f586:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   f590:       movl   $0x0,-0x70(%rsp)
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   f598:       mov    %rax,%rdi
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   f59b:       xor    %r11d,%r11d
    0.00 :   f59e:       xor    %esi,%esi
    0.00 :   f5a0:       movl   $0x0,-0x78(%rsp)
    0.00 :   f5a8:       xor    %r14d,%r14d
    0.00 :   f5ab:       xor    %edx,%edx
    0.00 :   f5ad:       xor    %ebp,%ebp
    0.00 :   f5af:       movl   $0x0,-0x60(%rsp)
    0.00 :   f5b7:       jmpq   ec97 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x667>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   f5bc:       mov    %rbx,%r14
         :          _ZN5Eigen8internal11gebp_traitsIiiLb0ELb0ELi1ELi0EE7initAccERi():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   f5bf:       xor    %eax,%eax
    0.00 :   f5c1:       jmpq   f4fe <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xece>
    0.00 :   f5c6:       mov    %r8,%r10
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl1ELl1EiiiiiiiNS0_11gebp_traitsIiiLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIilLi0ELi1EEENS0_16blas_data_mapperIilLi0ELi0ELi1EEEEclERKS7_PKiSC_illllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   f5c9:       xor    %edx,%edx
    0.00 :   f5cb:       xor    %r13d,%r13d
    0.00 :   f5ce:       xor    %ecx,%ecx
    0.00 :   f5d0:       xor    %edi,%edi
    0.00 :   f5d2:       jmpq   f362 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0xd32>
         :          _ZN5Eigen8internal11gebp_kernelIiilNS0_16blas_data_mapperIilLi0ELi0ELi1EEELi2ELi4ELb0ELb0EEclERKS3_PKiS8_lllillll():
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   f5d7:       mov    0x40(%rsp),%rax
    0.00 :   f5dc:       cmp    0xf8(%rsp),%rax
    0.00 :   f5e4:       jge    efac <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x97c>
    0.00 :   f5ea:       cmp    %rbx,0x50(%rsp)
    0.00 :   f5ef:       jl     edf5 <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x7c5>
    0.00 :   f5f5:       jmpq   efac <Eigen::internal::gebp_kernel<int, int, long, Eigen::internal::blas_data_mapper<int, long, 0, 0, 1>, 2, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<int, long, 0, 0, 1> const&, int const*, int const*, long, long, long, int, long, long, long, long)+0x97c>
    0.00 :   f5fa:       nopw   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (634 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          000000000000adc0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)>:
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          }
         :          };
         :
         :          template<typename LhsScalar, typename RhsScalar, typename Index, typename DataMapper, int mr, int nr, bool ConjugateLhs, bool ConjugateRhs>
         :          EIGEN_DONT_INLINE
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   adc0:       endbr64
    0.00 :   adc4:       push   %rbp
    0.00 :   adc5:       mov    %rcx,%r10
    0.00 :   adc8:       mov    %rsp,%rbp
    0.00 :   adcb:       push   %r15
    0.00 :   adcd:       mov    %rdx,%r15
    0.00 :   add0:       push   %r14
    0.00 :   add2:       mov    %r9,%r14
    0.00 :   add5:       push   %r13
    0.00 :   add7:       mov    %rsi,%r13
    0.00 :   adda:       push   %r12
    0.00 :   addc:       push   %rbx
         :
         :          if(strideA==-1) strideA = depth;
         :          if(strideB==-1) strideB = depth;
         :          conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj;
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   addd:       mov    %r8,%rbx
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   ade0:       and    $0xffffffffffffffe0,%rsp
    0.00 :   ade4:       sub    $0xa8,%rsp
    0.00 :   adeb:       mov    %rcx,-0x10(%rsp)
         :          if(strideA==-1) strideA = depth;
    0.00 :   adf0:       mov    %r9,%rcx
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   adf3:       mov    %rdx,-0x8(%rsp)
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   adf8:       movabs $0x2aaaaaaaaaaaaaab,%rdx
         :          if(strideA==-1) strideA = depth;
    0.00 :   ae02:       cmpq   $0xffffffffffffffff,0x18(%rbp)
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   ae07:       mov    0x10(%rbp),%rax
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   ae0b:       mov    %r8,0x8(%rsp)
         :          if(strideA==-1) strideA = depth;
    0.00 :   ae10:       cmovne 0x18(%rbp),%rcx
         :          if(strideB==-1) strideB = depth;
    0.00 :   ae15:       cmpq   $0xffffffffffffffff,0x20(%rbp)
         :          void gebp_kernel<LhsScalar,RhsScalar,Index,DataMapper,mr,nr,ConjugateLhs,ConjugateRhs>
    0.00 :   ae1a:       vmovss %xmm0,-0x14(%rsp)
         :          if(strideA==-1) strideA = depth;
    0.00 :   ae20:       mov    %rcx,0x18(%rbp)
         :          if(strideB==-1) strideB = depth;
    0.00 :   ae24:       mov    %r9,%rcx
    0.00 :   ae27:       cmovne 0x20(%rbp),%rcx
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   ae2c:       add    $0x3,%rax
    0.00 :   ae30:       cmpq   $0x0,0x10(%rbp)
    0.00 :   ae35:       cmovns 0x10(%rbp),%rax
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   ae3a:       sar    $0x3f,%rbx
         :          if(strideB==-1) strideB = depth;
    0.00 :   ae3e:       mov    %rcx,0x20(%rbp)
         :          // This actual number of rows is computed as follow:
         :          const Index l1 = defaultL1CacheSize; // in Bytes, TODO, l1 should be passed to this function.
         :          // The max(1, ...) here is needed because we may be using blocking params larger than what our known l1 cache size
         :          // suggests we should be using: either because our known l1 cache size is inaccurate (e.g. on Android, we can only guess),
         :          // or because we are testing specific blocking sizes.
         :          const Index actual_panel_rows = (3*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 3*LhsProgress) ));
    0.00 :   ae42:       lea    (%r9,%r9,2),%rcx
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   ae46:       mov    %rax,%rsi
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   ae49:       mov    %r8,%rax
    0.00 :   ae4c:       imul   %rdx
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   ae4f:       and    $0xfffffffffffffffc,%rsi
    0.00 :   ae53:       mov    %rsi,0x40(%rsp)
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   ae58:       mov    %rdx,%rax
    0.00 :   ae5b:       sar    $0x2,%rax
    0.00 :   ae5f:       sub    %rbx,%rax
    0.00 :   ae62:       lea    (%rax,%rax,2),%rax
    0.00 :   ae66:       lea    0x0(,%rax,8),%r11
         :          const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;
    0.00 :   ae6e:       mov    %r8,%rax
    0.00 :   ae71:       sub    %r11,%rax
         :          const Index peeled_mc3 = mr>=3*Traits::LhsProgress ? (rows/(3*LhsProgress))*(3*LhsProgress) : 0;
    0.00 :   ae74:       mov    %r11,-0x30(%rsp)
         :          const Index peeled_mc2 = mr>=2*Traits::LhsProgress ? peeled_mc3+((rows-peeled_mc3)/(2*LhsProgress))*(2*LhsProgress) : 0;
    0.00 :   ae79:       mov    %rax,%rdx
    0.00 :   ae7c:       lea    0xf(%rax),%rax
    0.00 :   ae80:       cmovns %rdx,%rax
    0.00 :   ae84:       and    $0xfffffffffffffff0,%rax
    0.00 :   ae88:       add    %r11,%rax
    0.00 :   ae8b:       mov    %rax,%rbx
    0.00 :   ae8e:       mov    %rax,(%rsp)
         :          const Index peeled_mc1 = mr>=1*Traits::LhsProgress ? peeled_mc2+((rows-peeled_mc2)/(1*LhsProgress))*(1*LhsProgress) : 0;
    0.00 :   ae92:       mov    %r8,%rax
    0.00 :   ae95:       sub    %rbx,%rax
    0.00 :   ae98:       mov    %rax,%rdx
    0.00 :   ae9b:       lea    0x7(%rax),%rax
    0.00 :   ae9f:       cmovns %rdx,%rax
    0.00 :   aea3:       and    $0xfffffffffffffff8,%rax
    0.00 :   aea7:       add    %rbx,%rax
    0.00 :   aeaa:       mov    %rax,%rbx
    0.00 :   aead:       mov    %rax,-0x28(%rsp)
         :          const Index peeled_mc_half = mr>=LhsProgressHalf ? peeled_mc1+((rows-peeled_mc1)/(LhsProgressHalf))*(LhsProgressHalf) : 0;
    0.00 :   aeb2:       mov    %r8,%rax
    0.00 :   aeb5:       sub    %rbx,%rax
    0.00 :   aeb8:       mov    %rax,%rdx
    0.00 :   aebb:       lea    0x3(%rax),%rax
    0.00 :   aebf:       cmovns %rdx,%rax
    0.00 :   aec3:       and    $0xfffffffffffffffc,%rax
    0.00 :   aec7:       add    %rbx,%rax
    0.00 :   aeca:       mov    %rax,%rbx
    0.00 :   aecd:       mov    %rax,-0x40(%rsp)
         :          const Index peeled_mc_quarter = mr>=LhsProgressQuarter ? peeled_mc_half+((rows-peeled_mc_half)/(LhsProgressQuarter))*(LhsProgressQuarter) : 0;
    0.00 :   aed2:       mov    %r8,%rax
    0.00 :   aed5:       sub    %rbx,%rax
    0.00 :   aed8:       mov    %rax,%rdx
    0.00 :   aedb:       lea    0x3(%rax),%rax
    0.00 :   aedf:       cmovns %rdx,%rax
         :          const Index actual_panel_rows = (3*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 3*LhsProgress) ));
    0.00 :   aee3:       mov    $0x7e8,%edx
    0.00 :   aee8:       shl    $0x5,%rcx
    0.00 :   aeec:       sub    %r9,%rdx
         :          const Index peeled_mc_quarter = mr>=LhsProgressQuarter ? peeled_mc_half+((rows-peeled_mc_half)/(LhsProgressQuarter))*(LhsProgressQuarter) : 0;
    0.00 :   aeef:       and    $0xfffffffffffffffc,%rax
    0.00 :   aef3:       add    %rbx,%rax
         :          const Index peeled_kc  = depth & ~(pk-1);
    0.00 :   aef6:       mov    %r9,%rbx
         :          const Index peeled_mc_quarter = mr>=LhsProgressQuarter ? peeled_mc_half+((rows-peeled_mc_half)/(LhsProgressQuarter))*(LhsProgressQuarter) : 0;
    0.00 :   aef9:       mov    %rax,-0x20(%rsp)
         :          const Index actual_panel_rows = (3*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 3*LhsProgress) ));
    0.00 :   aefe:       mov    %rdx,%rax
    0.00 :   af01:       xor    %edx,%edx
         :          const Index peeled_kc  = depth & ~(pk-1);
    0.00 :   af03:       and    $0xfffffffffffffff8,%rbx
         :          const Index actual_panel_rows = (3*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 3*LhsProgress) ));
    0.00 :   af07:       shl    $0x4,%rax
    0.00 :   af0b:       mov    %rax,-0x48(%rsp)
    0.00 :   af10:       div    %rcx
    0.00 :   af13:       mov    $0x1,%edx
    0.00 :   af18:       test   %rax,%rax
    0.00 :   af1b:       cmovle %rdx,%rax
    0.00 :   af1f:       lea    (%rax,%rax,2),%rax
    0.00 :   af23:       shl    $0x3,%rax
    0.00 :   af27:       mov    %rax,-0x68(%rsp)
         :          for(Index i1=0; i1<peeled_mc3; i1+=actual_panel_rows)
    0.00 :   af2c:       test   %r11,%r11
    0.00 :   af2f:       jle    b8a1 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xae1>
    0.00 :   af35:       imul   0x18(%rbp),%rax
    0.00 :   af3a:       vbroadcastss %xmm0,%ymm6
    0.00 :   af3f:       mov    %r13,%r14
    0.00 :   af42:       movq   $0x0,-0x38(%rsp)
    0.00 :   af4b:       imul   0x20(%rbp),%rsi
    0.00 :   af50:       vmovaps %ymm6,0x48(%rsp)
    0.00 :   af56:       shl    $0x2,%rax
    0.00 :   af5a:       mov    %rax,-0x60(%rsp)
    0.00 :   af5f:       mov    0x28(%rbp),%rax
    0.00 :   af63:       lea    (%rax,%rax,2),%rax
    0.00 :   af67:       shl    $0x5,%rax
    0.00 :   af6b:       add    %r15,%rax
    0.00 :   af6e:       mov    %rax,0x30(%rsp)
    0.00 :   af73:       mov    $0x4,%eax
    0.00 :   af78:       shlx   %rax,0x20(%rbp),%rcx
    0.00 :   af7e:       shlx   %rax,0x30(%rbp),%rax
    0.00 :   af84:       add    %r10,%rax
    0.00 :   af87:       mov    %rcx,0x10(%rsp)
    0.00 :   af8c:       mov    %rax,-0x58(%rsp)
    0.00 :   af91:       mov    0x18(%rbp),%rax
    0.00 :   af95:       lea    (%rax,%rax,2),%rax
    0.00 :   af99:       shl    $0x5,%rax
    0.00 :   af9d:       mov    %rax,0x80(%rsp)
    0.00 :   afa5:       lea    -0x1(%rbx),%rax
    0.00 :   afa9:       shr    $0x3,%rax
    0.00 :   afad:       inc    %rax
    0.00 :   afb0:       lea    (%rax,%rax,2),%rdx
    0.00 :   afb4:       mov    %rax,%rcx
    0.00 :   afb7:       shl    $0x5,%rax
    0.00 :   afbb:       shl    $0x8,%rdx
    0.00 :   afbf:       shl    $0x7,%rcx
    0.00 :   afc3:       mov    %rax,0x20(%rsp)
    0.00 :   afc8:       mov    %rbx,%rax
    0.00 :   afcb:       mov    %rdx,%r12
    0.00 :   afce:       mov    %rcx,0x28(%rsp)
    0.00 :   afd3:       mov    0x30(%rbp),%rdx
    0.00 :   afd7:       neg    %rax
    0.00 :   afda:       mov    0x20(%rbp),%rcx
    0.00 :   afde:       shl    $0x2,%rax
    0.00 :   afe2:       add    %rsi,%rdx
    0.00 :   afe5:       mov    %rax,0x68(%rsp)
    0.00 :   afea:       mov    %r12,%rax
    0.00 :   afed:       mov    %r9,%r12
    0.00 :   aff0:       shl    $0x2,%rcx
    0.00 :   aff4:       mov    %rax,%r13
    0.00 :   aff7:       mov    %rcx,0x18(%rsp)
    0.00 :   affc:       lea    (%r10,%rdx,4),%rcx
    0.00 :   b000:       mov    %rcx,-0x50(%rsp)
    0.00 :   b005:       mov    -0x38(%rsp),%rcx
    0.00 :   b00a:       mov    -0x68(%rsp),%rdi
    0.00 :   b00f:       mov    %rcx,0x38(%rsp)
    0.00 :   b014:       mov    %rcx,%rax
    0.00 :   b017:       add    %rdi,%rcx
    0.00 :   b01a:       mov    -0x30(%rsp),%rdi
    0.00 :   b01f:       mov    %rcx,-0x38(%rsp)
    0.00 :   b024:       cmp    %rcx,%rdi
    0.00 :   b027:       cmovle %rdi,%rcx
         :          {
         :          const Index actual_panel_end = (std::min)(i1+actual_panel_rows, peeled_mc3);
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   b02b:       cmpq   $0x0,0x40(%rsp)
    0.00 :   b031:       mov    %rcx,0xa0(%rsp)
    0.00 :   b039:       jle    cfb8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x21f8>
    0.00 :   b03f:       cmp    %rax,%rcx
    0.00 :   b042:       jle    b881 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xac1>
    0.00 :   b048:       xor    %eax,%eax
    0.00 :   b04a:       mov    -0x58(%rsp),%r11
    0.00 :   b04f:       mov    %r13,0x70(%rsp)
    0.00 :   b054:       mov    %rax,%r13
    0.00 :   b057:       nopw   0x0(%rax,%rax,1)
         :          {
         :          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)
    0.17 :   b060:       lea    0x1(%r13),%rax
         :          r1.prefetch(0);
         :          r2.prefetch(0);
         :          r3.prefetch(0);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   b064:       mov    0x30(%rsp),%r10
    0.00 :   b069:       mov    0x38(%rsp),%r9
    0.00 :   b06e:       mov    %rax,0x98(%rsp)
    0.00 :   b076:       lea    0x2(%r13),%rax
    0.00 :   b07a:       mov    %rax,0x90(%rsp)
    0.00 :   b082:       lea    0x3(%r13),%rax
    0.00 :   b086:       mov    %rax,0x88(%rsp)
    0.21 :   b08e:       mov    0x28(%rsp),%rax
    0.00 :   b093:       add    %r11,%rax
    0.16 :   b096:       mov    %rax,0x78(%rsp)
    0.00 :   b09b:       nopl   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   b0a0:       mov    0x8(%r14),%rdx
    0.00 :   b0a4:       mov    (%r14),%rcx
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(3*LhsProgress)];
    0.00 :   b0a7:       mov    %r10,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          processor.  The selector I specifies the type of prefetch operation.  */
         :          #ifdef __OPTIMIZE__
         :          extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_prefetch (const void *__P, enum _mm_hint __I)
         :          {
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   b0aa:       prefetcht0 (%r10)
    0.00 :   b0ae:       prefetcht0 (%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   b0b2:       mov    %rdx,%rsi
    0.00 :   b0b5:       imul   %r13,%rsi
    0.16 :   b0b9:       add    %r9,%rsi
    0.00 :   b0bc:       lea    (%rcx,%rsi,4),%r8
    0.00 :   b0c0:       mov    0x98(%rsp),%rsi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b0c8:       prefetcht0 (%r8)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   b0cc:       imul   %rdx,%rsi
    0.00 :   b0d0:       add    %r9,%rsi
    0.00 :   b0d3:       lea    (%rcx,%rsi,4),%rdi
    0.00 :   b0d7:       mov    0x90(%rsp),%rsi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b0df:       prefetcht0 (%rdi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   b0e2:       imul   %rdx,%rsi
    0.00 :   b0e6:       imul   0x88(%rsp),%rdx
    0.00 :   b0ef:       add    %r9,%rsi
    0.00 :   b0f2:       add    %r9,%rdx
    0.00 :   b0f5:       lea    (%rcx,%rsi,4),%rsi
    0.00 :   b0f9:       lea    (%rcx,%rdx,4),%rcx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b0fd:       prefetcht0 (%rsi)
    0.15 :   b100:       prefetcht0 (%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          prefetch(&blB[0]);
         :          LhsPacket A0, A1;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   b103:       test   %rbx,%rbx
    0.00 :   b106:       jle    cf08 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2148>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   b10c:       vxorps %xmm9,%xmm9,%xmm9
    0.00 :   b111:       lea    0x200(%r10),%rdx
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   b118:       mov    %r11,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.16 :   b11b:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   b11e:       vmovaps %ymm9,%ymm13
    0.17 :   b123:       vmovaps %ymm9,%ymm14
    0.00 :   b128:       vmovaps %ymm9,%ymm11
    0.00 :   b12d:       vmovaps %ymm9,%ymm6
    0.16 :   b131:       vmovaps %ymm9,%ymm2
    0.00 :   b135:       vmovaps %ymm9,%ymm0
    0.00 :   b139:       vmovaps %ymm9,%ymm1
    0.00 :   b13d:       vmovaps %ymm9,%ymm7
    0.00 :   b141:       vmovaps %ymm9,%ymm3
    0.00 :   b145:       vmovaps %ymm9,%ymm4
    0.00 :   b149:       vmovaps %ymm9,%ymm5
    0.00 :   b14d:       nopl   (%rax)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.43 :   b150:       prefetcht0 (%rax)
         :          _Z14_mm256_load_psPKf():
         :          }
         :
         :          extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm256_load_ps (float const *__P)
         :          {
         :          return *(__m256 *)__P;
    0.00 :   b153:       vmovaps -0x200(%rdx),%ymm12
         :          _Z14_mm256_set1_psf():
         :          /* Create a vector with all elements equal to A.  */
         :          extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm256_set1_ps (float __A)
         :          {
         :          return __extension__ (__m256){ __A, __A, __A, __A,
         :          __A, __A, __A, __A };
    0.23 :   b15b:       vbroadcastss (%rax),%ymm8
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.30 :   b160:       prefetcht0 (%rdx)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.65 :   b163:       vmovaps -0x1e0(%rdx),%ymm15
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.20 :   b16b:       vbroadcastss 0x8(%rax),%ymm10
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
         :
         :          extern __inline __m256
         :          __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm256_fmadd_ps (__m256 __A, __m256 __B, __m256 __C)
         :          {
         :          return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
    0.32 :   b171:       vfmadd231ps -0x1c0(%rdx),%ymm8,%ymm11
    0.97 :   b17a:       vfmadd231ps %ymm8,%ymm12,%ymm5
    0.29 :   b17f:       vfmadd231ps %ymm8,%ymm15,%ymm1
         :          _Z14_mm256_set1_psf():
    0.16 :   b184:       vbroadcastss 0x4(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.27 :   b18a:       vfmadd231ps %ymm10,%ymm12,%ymm0
    0.70 :   b18f:       vfmadd231ps -0x1c0(%rdx),%ymm8,%ymm14
    0.15 :   b198:       vfmadd231ps %ymm10,%ymm15,%ymm2
    0.58 :   b19d:       vfmadd231ps %ymm8,%ymm12,%ymm4
    0.23 :   b1a2:       vfmadd231ps %ymm8,%ymm15,%ymm3
         :          _Z14_mm256_set1_psf():
    0.61 :   b1a7:       vbroadcastss 0xc(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b1ad:       vfmadd132ps -0x1c0(%rdx),%ymm13,%ymm10
    0.36 :   b1b6:       vfmadd231ps -0x1c0(%rdx),%ymm8,%ymm9
    0.47 :   b1bf:       vfmadd231ps %ymm8,%ymm12,%ymm7
    0.48 :   b1c4:       vfmadd231ps %ymm8,%ymm15,%ymm6
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.12 :   b1c9:       vmovaps -0x1a0(%rdx),%ymm12
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.78 :   b1d1:       vbroadcastss 0x10(%rax),%ymm8
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.64 :   b1d7:       prefetcht0 0x60(%rdx)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    1.73 :   b1db:       vmovaps -0x180(%rdx),%ymm13
    0.76 :   b1e3:       vmovaps -0x160(%rdx),%ymm15
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    1.48 :   b1eb:       vfmadd231ps %ymm8,%ymm12,%ymm5
    2.21 :   b1f0:       vfmadd231ps %ymm8,%ymm13,%ymm1
    3.04 :   b1f5:       vfmadd231ps %ymm8,%ymm15,%ymm11
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    2.70 :   b1fa:       vbroadcastss 0x14(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    1.21 :   b200:       vfmadd231ps %ymm8,%ymm12,%ymm4
    3.19 :   b205:       vfmadd231ps %ymm8,%ymm13,%ymm3
    0.72 :   b20a:       vfmadd231ps %ymm8,%ymm15,%ymm14
         :          _Z14_mm256_set1_psf():
    1.67 :   b20f:       vbroadcastss 0x18(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b215:       vfmadd231ps %ymm8,%ymm12,%ymm0
    2.29 :   b21a:       vfmadd231ps %ymm8,%ymm13,%ymm2
    0.33 :   b21f:       vfmadd231ps %ymm8,%ymm15,%ymm10
         :          _Z14_mm256_set1_psf():
    0.29 :   b224:       vbroadcastss 0x1c(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b22a:       vfmadd231ps %ymm8,%ymm12,%ymm7
    1.08 :   b22f:       vfmadd231ps %ymm8,%ymm13,%ymm6
    0.16 :   b234:       vfmadd231ps %ymm8,%ymm15,%ymm9
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.14 :   b239:       vmovaps -0x140(%rdx),%ymm12
    0.00 :   b241:       vmovaps -0x120(%rdx),%ymm13
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.59 :   b249:       prefetcht0 0xc0(%rdx)
         :          _Z14_mm256_load_psPKf():
    0.00 :   b250:       vmovaps -0x100(%rdx),%ymm15
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.44 :   b258:       vbroadcastss 0x20(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.18 :   b25e:       vfmadd231ps %ymm8,%ymm12,%ymm5
    1.06 :   b263:       vfmadd231ps %ymm8,%ymm13,%ymm1
    0.00 :   b268:       vfmadd231ps %ymm8,%ymm15,%ymm11
         :          _Z14_mm256_set1_psf():
    0.65 :   b26d:       vbroadcastss 0x24(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b273:       vfmadd231ps %ymm8,%ymm12,%ymm4
    1.06 :   b278:       vfmadd231ps %ymm8,%ymm13,%ymm3
    0.49 :   b27d:       vfmadd231ps %ymm8,%ymm15,%ymm14
         :          _Z14_mm256_set1_psf():
    0.64 :   b282:       vbroadcastss 0x28(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b288:       vfmadd231ps %ymm8,%ymm12,%ymm0
    1.00 :   b28d:       vfmadd231ps %ymm8,%ymm13,%ymm2
    0.18 :   b292:       vfmadd231ps %ymm8,%ymm15,%ymm10
         :          _Z14_mm256_set1_psf():
    0.33 :   b297:       vbroadcastss 0x2c(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.14 :   b29d:       vfmadd231ps %ymm8,%ymm12,%ymm7
    0.18 :   b2a2:       vfmadd231ps %ymm8,%ymm13,%ymm6
    0.15 :   b2a7:       vfmadd231ps %ymm8,%ymm15,%ymm9
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.14 :   b2ac:       vmovaps -0xe0(%rdx),%ymm12
    0.50 :   b2b4:       vmovaps -0xc0(%rdx),%ymm13
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.30 :   b2bc:       prefetcht0 0x120(%rdx)
         :          _Z14_mm256_load_psPKf():
    0.00 :   b2c3:       vmovaps -0xa0(%rdx),%ymm15
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.86 :   b2cb:       vbroadcastss 0x30(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b2d1:       vfmadd231ps %ymm8,%ymm12,%ymm5
    0.54 :   b2d6:       vfmadd231ps %ymm8,%ymm13,%ymm1
    0.00 :   b2db:       vfmadd231ps %ymm8,%ymm15,%ymm11
         :          _Z14_mm256_set1_psf():
    0.69 :   b2e0:       vbroadcastss 0x34(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b2e6:       vfmadd231ps %ymm8,%ymm12,%ymm4
    0.61 :   b2eb:       vfmadd231ps %ymm8,%ymm13,%ymm3
    0.00 :   b2f0:       vfmadd231ps %ymm8,%ymm15,%ymm14
         :          _Z14_mm256_set1_psf():
    0.15 :   b2f5:       vbroadcastss 0x38(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b2fb:       vfmadd231ps %ymm8,%ymm12,%ymm0
    1.27 :   b300:       vfmadd231ps %ymm8,%ymm13,%ymm2
    0.00 :   b305:       vfmadd231ps %ymm8,%ymm15,%ymm10
         :          _Z14_mm256_set1_psf():
    0.43 :   b30a:       vbroadcastss 0x3c(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b310:       vfmadd231ps %ymm8,%ymm12,%ymm7
    0.75 :   b315:       vfmadd231ps %ymm8,%ymm13,%ymm6
    0.17 :   b31a:       vfmadd231ps %ymm8,%ymm15,%ymm9
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.30 :   b31f:       vmovaps -0x80(%rdx),%ymm12
    0.00 :   b324:       vmovaps -0x60(%rdx),%ymm13
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.32 :   b329:       prefetcht0 0x180(%rdx)
         :          _Z14_mm256_load_psPKf():
    0.48 :   b330:       vmovaps -0x40(%rdx),%ymm15
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.30 :   b335:       vbroadcastss 0x40(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b33b:       vfmadd231ps %ymm8,%ymm12,%ymm5
    1.06 :   b340:       vfmadd231ps %ymm8,%ymm13,%ymm1
    0.37 :   b345:       vfmadd132ps %ymm15,%ymm11,%ymm8
         :          _Z14_mm256_set1_psf():
    0.26 :   b34a:       vbroadcastss 0x44(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b350:       vfmadd231ps %ymm11,%ymm12,%ymm4
    1.16 :   b355:       vfmadd231ps %ymm11,%ymm13,%ymm3
    0.00 :   b35a:       vfmadd231ps %ymm11,%ymm15,%ymm14
         :          _Z14_mm256_set1_psf():
    1.04 :   b35f:       vbroadcastss 0x48(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.12 :   b365:       vfmadd231ps %ymm11,%ymm12,%ymm0
    0.54 :   b36a:       vfmadd231ps %ymm11,%ymm13,%ymm2
    0.00 :   b36f:       vfmadd231ps %ymm11,%ymm15,%ymm10
         :          _Z14_mm256_set1_psf():
    0.84 :   b374:       vbroadcastss 0x4c(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b37a:       vfmadd231ps %ymm11,%ymm12,%ymm7
    0.83 :   b37f:       vfmadd231ps %ymm11,%ymm13,%ymm6
    0.14 :   b384:       vfmadd231ps %ymm11,%ymm15,%ymm9
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.60 :   b389:       vmovaps -0x20(%rdx),%ymm12
    0.36 :   b38e:       vmovaps (%rdx),%ymm15
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b392:       prefetcht0 0x1e0(%rdx)
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.22 :   b399:       vbroadcastss 0x50(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    1.37 :   b39f:       vfmadd231ps 0x20(%rdx),%ymm11,%ymm8
         :          _Z14_mm256_set1_psf():
    1.11 :   b3a5:       vbroadcastss 0x58(%rax),%ymm13
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.60 :   b3ab:       vfmadd231ps 0x20(%rdx),%ymm13,%ymm10
    3.89 :   b3b1:       vfmadd231ps %ymm11,%ymm12,%ymm5
    0.30 :   b3b6:       vfmadd231ps %ymm11,%ymm15,%ymm1
         :          _Z14_mm256_set1_psf():
    1.29 :   b3bb:       vbroadcastss 0x54(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    1.21 :   b3c1:       vfmadd231ps 0x20(%rdx),%ymm11,%ymm14
    4.28 :   b3c7:       vfmadd231ps %ymm13,%ymm12,%ymm0
    0.59 :   b3cc:       vfmadd231ps %ymm11,%ymm12,%ymm4
    0.47 :   b3d1:       vfmadd231ps %ymm11,%ymm15,%ymm3
         :          _Z14_mm256_set1_psf():
    1.75 :   b3d6:       vbroadcastss 0x5c(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.72 :   b3dc:       vfmadd231ps %ymm13,%ymm15,%ymm2
    1.70 :   b3e1:       vfmadd231ps 0x20(%rdx),%ymm11,%ymm9
    1.11 :   b3e7:       vfmadd231ps %ymm11,%ymm12,%ymm7
    0.77 :   b3ec:       vfmadd231ps %ymm11,%ymm15,%ymm6
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.41 :   b3f1:       vmovaps 0x40(%rdx),%ymm12
    0.46 :   b3f6:       vmovaps 0x60(%rdx),%ymm15
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.50 :   b3fb:       prefetcht0 0x240(%rdx)
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.71 :   b402:       vbroadcastss 0x60(%rax),%ymm11
    1.31 :   b408:       vbroadcastss 0x68(%rax),%ymm13
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.17 :   b40e:       vfmadd231ps 0x80(%rdx),%ymm11,%ymm8
    0.79 :   b417:       vfmadd231ps 0x80(%rdx),%ymm13,%ymm10
    0.41 :   b420:       vfmadd231ps %ymm11,%ymm12,%ymm5
    0.98 :   b425:       vfmadd231ps %ymm11,%ymm15,%ymm1
         :          _Z14_mm256_set1_psf():
    0.14 :   b42a:       vbroadcastss 0x64(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.49 :   b430:       vfmadd231ps 0x80(%rdx),%ymm11,%ymm14
    0.50 :   b439:       vfmadd231ps %ymm13,%ymm12,%ymm0
    0.34 :   b43e:       vfmadd231ps %ymm11,%ymm12,%ymm4
    0.14 :   b443:       vfmadd231ps %ymm11,%ymm15,%ymm3
         :          _Z14_mm256_set1_psf():
    0.16 :   b448:       vbroadcastss 0x6c(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b44e:       vfmadd231ps 0x80(%rdx),%ymm11,%ymm9
    0.83 :   b457:       vfmadd231ps %ymm13,%ymm15,%ymm2
    0.15 :   b45c:       vfmadd231ps %ymm11,%ymm12,%ymm7
    0.52 :   b461:       vfmadd231ps %ymm11,%ymm15,%ymm6
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.12 :   b466:       vmovaps 0xa0(%rdx),%ymm12
    0.00 :   b46e:       vmovaps 0xc0(%rdx),%ymm15
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.20 :   b476:       prefetcht0 0x2a0(%rdx)
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.41 :   b47d:       vbroadcastss 0x70(%rax),%ymm11
    0.16 :   b483:       vbroadcastss 0x78(%rax),%ymm13
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.15 :   b489:       vfmadd231ps %ymm11,%ymm12,%ymm5
    0.27 :   b48e:       vfmadd231ps %ymm11,%ymm15,%ymm1
    0.14 :   b493:       vfmadd132ps 0xe0(%rdx),%ymm8,%ymm11
         :          _Z14_mm256_set1_psf():
    0.30 :   b49c:       vbroadcastss 0x74(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.19 :   b4a2:       vfmadd231ps %ymm13,%ymm12,%ymm0
    0.18 :   b4a7:       vfmadd231ps 0xe0(%rdx),%ymm8,%ymm14
    0.29 :   b4b0:       vfmadd231ps %ymm13,%ymm15,%ymm2
    0.00 :   b4b5:       vfmadd231ps %ymm8,%ymm12,%ymm4
    0.00 :   b4ba:       vfmadd231ps %ymm8,%ymm15,%ymm3
         :          _Z14_mm256_set1_psf():
    0.62 :   b4bf:       vbroadcastss 0x7c(%rax),%ymm8
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.28 :   b4c5:       vfmadd132ps 0xe0(%rdx),%ymm10,%ymm13
    0.54 :   b4ce:       vfmadd231ps 0xe0(%rdx),%ymm8,%ymm9
    0.00 :   b4d7:       vfmadd231ps %ymm8,%ymm12,%ymm7
    0.14 :   b4dc:       vfmadd231ps %ymm8,%ymm15,%ymm6
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          EIGEN_GEBP_ONESTEP(4);
         :          EIGEN_GEBP_ONESTEP(5);
         :          EIGEN_GEBP_ONESTEP(6);
         :          EIGEN_GEBP_ONESTEP(7);
         :
         :          blB += pk*4*RhsProgress;
    0.43 :   b4e1:       sub    $0xffffffffffffff80,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   b4e5:       add    $0x8,%r15
    0.52 :   b4e9:       add    $0x300,%rdx
    0.00 :   b4f0:       cmp    %r15,%rbx
    0.00 :   b4f3:       jg     b150 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x390>
    0.00 :   b4f9:       mov    0x70(%rsp),%rax
    0.00 :   b4fe:       vmovaps %ymm0,%ymm15
    0.00 :   b502:       vmovaps %ymm7,%ymm10
    0.00 :   b506:       vmovaps %ymm3,%ymm0
         :          blB += pk*4*RhsProgress;
    0.00 :   b50a:       mov    0x78(%rsp),%rdx
    0.00 :   b50f:       vmovaps %ymm15,%ymm3
    0.00 :   b513:       add    %r10,%rax
         :          blA += pk*3*Traits::LhsProgress;
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 3pX4");
         :          }
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   b516:       add    $0x200,%rax
    0.00 :   b51c:       mov    %rbx,%r15
    0.00 :   b51f:       vmovaps %ymm10,%ymm15
    0.00 :   b524:       cmp    %rbx,%r12
    0.00 :   b527:       jle    b5b3 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x7f3>
    0.00 :   b52d:       nopl   (%rax)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   b530:       vmovaps -0x200(%rax),%ymm10
    0.00 :   b538:       vmovaps -0x1e0(%rax),%ymm8
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b540:       prefetcht0 (%rax)
         :          _Z14_mm256_load_psPKf():
    0.00 :   b543:       vmovaps -0x1c0(%rax),%ymm7
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.00 :   b54b:       vbroadcastss (%rdx),%ymm12
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b550:       vfmadd231ps %ymm12,%ymm10,%ymm5
    0.00 :   b555:       vfmadd231ps %ymm12,%ymm8,%ymm1
    0.00 :   b55a:       vfmadd231ps %ymm12,%ymm7,%ymm11
         :          _Z14_mm256_set1_psf():
    0.00 :   b55f:       vbroadcastss 0x4(%rdx),%ymm12
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b565:       vfmadd231ps %ymm12,%ymm10,%ymm4
    0.00 :   b56a:       vfmadd231ps %ymm12,%ymm8,%ymm0
    0.00 :   b56f:       vfmadd231ps %ymm12,%ymm7,%ymm14
         :          _Z14_mm256_set1_psf():
    0.00 :   b574:       vbroadcastss 0x8(%rdx),%ymm12
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b57a:       vfmadd231ps %ymm12,%ymm10,%ymm3
    0.00 :   b57f:       vfmadd231ps %ymm12,%ymm8,%ymm2
    0.00 :   b584:       vfmadd231ps %ymm12,%ymm7,%ymm13
         :          _Z14_mm256_set1_psf():
    0.00 :   b589:       vbroadcastss 0xc(%rdx),%ymm12
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b58f:       vfmadd231ps %ymm12,%ymm10,%ymm15
    0.00 :   b594:       vfmadd231ps %ymm12,%ymm8,%ymm6
    0.00 :   b599:       vfmadd231ps %ymm12,%ymm7,%ymm9
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   b59e:       inc    %r15
         :          {
         :          RhsPanel15 rhs_panel;
         :          RhsPacket T0;
         :          LhsPacket A2;
         :          EIGEN_GEBP_ONESTEP(0);
         :          blB += 4*RhsProgress;
    0.00 :   b5a1:       add    $0x10,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   b5a5:       add    $0x60,%rax
    0.00 :   b5a9:       cmp    %r15,%r12
    0.00 :   b5ac:       jne    b530 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x770>
    0.00 :   b5ae:       vmovaps %ymm15,%ymm10
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b5b3:       vmovaps 0x48(%rsp),%ymm7
    0.00 :   b5b9:       vfmadd213ps (%r8),%ymm7,%ymm5
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)
    0.45 :   b5be:       add    $0x18,%r9
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b5c2:       vfmadd213ps 0x20(%r8),%ymm7,%ymm1
    1.96 :   b5c8:       add    0x80(%rsp),%r10
    0.00 :   b5d0:       vmovaps %ymm7,%ymm12
    0.00 :   b5d4:       vfmadd213ps 0x40(%r8),%ymm11,%ymm12
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    1.55 :   b5da:       vmovups %ymm5,(%r8)
    0.00 :   b5df:       vmovups %ymm1,0x20(%r8)
    0.00 :   b5e5:       vmovups %ymm12,0x40(%r8)
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b5eb:       vfmadd213ps (%rdi),%ymm7,%ymm4
    0.18 :   b5f0:       vfmadd213ps 0x20(%rdi),%ymm7,%ymm0
    0.42 :   b5f6:       vfmadd213ps 0x40(%rdi),%ymm7,%ymm14
         :          _Z16_mm256_storeu_psPfDv8_f():
    0.46 :   b5fc:       vmovups %ymm4,(%rdi)
    0.17 :   b600:       vmovups %ymm0,0x20(%rdi)
    0.00 :   b605:       vmovups %ymm14,0x40(%rdi)
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b60a:       vfmadd213ps (%rsi),%ymm7,%ymm3
    0.52 :   b60f:       vfmadd213ps 0x20(%rsi),%ymm7,%ymm2
    0.29 :   b615:       vfmadd213ps 0x40(%rsi),%ymm7,%ymm13
         :          _Z16_mm256_storeu_psPfDv8_f():
    0.66 :   b61b:       vmovups %ymm3,(%rsi)
    0.00 :   b61f:       vmovups %ymm2,0x20(%rsi)
    0.00 :   b624:       vmovups %ymm13,0x40(%rsi)
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.15 :   b629:       vfmadd213ps (%rcx),%ymm7,%ymm10
    0.00 :   b62e:       vfmadd213ps 0x20(%rcx),%ymm7,%ymm6
    0.96 :   b634:       vfmadd213ps 0x40(%rcx),%ymm9,%ymm7
         :          _Z16_mm256_storeu_psPfDv8_f():
    0.50 :   b63a:       vmovups %ymm10,(%rcx)
    0.00 :   b63e:       vmovups %ymm6,0x20(%rcx)
    0.00 :   b643:       vmovups %ymm7,0x40(%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.17 :   b648:       cmp    0xa0(%rsp),%r9
    0.00 :   b650:       jl     b0a0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2e0>
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   b656:       add    $0x4,%r13
    0.00 :   b65a:       add    0x10(%rsp),%r11
    0.00 :   b65f:       cmp    %r13,0x40(%rsp)
    0.00 :   b664:       jg     b060 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2a0>
    0.00 :   b66a:       mov    0x70(%rsp),%r13
         :          r3.storePacket(2 * Traits::ResPacketSize, R2);
         :          }
         :          }
         :
         :          // Deal with remaining columns of the rhs
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   b66f:       mov    0x40(%rsp),%rax
    0.00 :   b674:       cmp    %rax,0x10(%rbp)
    0.00 :   b678:       jle    b881 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xac1>
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   b67e:       mov    -0x50(%rsp),%r9
    0.00 :   b683:       mov    0x40(%rsp),%r8
    0.00 :   b688:       mov    0x80(%rsp),%r10
    0.00 :   b690:       vmovaps 0x48(%rsp),%ymm2
    0.00 :   b696:       nopw   %cs:0x0(%rax,%rax,1)
         :          {
         :          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)
    0.00 :   b6a0:       mov    0x20(%rsp),%rax
         :
         :          LinearMapper r0 = res.getLinearMapper(i, j2);
         :          r0.prefetch(0);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   b6a5:       mov    0x30(%rsp),%rsi
    0.00 :   b6aa:       mov    0x38(%rsp),%rdi
    0.00 :   b6af:       lea    (%r9,%rax,1),%r11
    0.00 :   b6b3:       nopl   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   b6b8:       mov    0x8(%r14),%rdx
    0.00 :   b6bc:       mov    (%r14),%rcx
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(3*Traits::LhsProgress)];
    0.00 :   b6bf:       mov    %rsi,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b6c2:       prefetcht0 (%rsi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   b6c5:       imul   %r8,%rdx
    0.00 :   b6c9:       add    %rdi,%rdx
    0.00 :   b6cc:       lea    (%rcx,%rdx,4),%rcx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   b6d0:       prefetcht0 (%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          LhsPacket A0, A1, A2;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   b6d3:       test   %rbx,%rbx
    0.00 :   b6d6:       jle    cef0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2130>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   b6dc:       vxorps %xmm3,%xmm3,%xmm3
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   b6e0:       mov    %r9,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   b6e3:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   b6e6:       vmovaps %ymm3,%ymm0
    0.00 :   b6ea:       vmovaps %ymm3,%ymm1
    0.00 :   b6ee:       xchg   %ax,%ax
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.00 :   b6f0:       vbroadcastss (%rdx),%ymm4
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b6f5:       vfmadd231ps (%rax),%ymm4,%ymm1
    0.00 :   b6fa:       vfmadd231ps 0x20(%rax),%ymm4,%ymm0
    0.00 :   b700:       vfmadd231ps 0x40(%rax),%ymm4,%ymm3
         :          _Z14_mm256_set1_psf():
    0.00 :   b706:       vbroadcastss 0x4(%rdx),%ymm4
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b70c:       vfmadd231ps 0x60(%rax),%ymm4,%ymm1
    0.00 :   b712:       vfmadd231ps 0x80(%rax),%ymm4,%ymm0
    0.00 :   b71b:       vfmadd231ps 0xa0(%rax),%ymm4,%ymm3
         :          _Z14_mm256_set1_psf():
    0.00 :   b724:       vbroadcastss 0x8(%rdx),%ymm4
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b72a:       vfmadd231ps 0xc0(%rax),%ymm4,%ymm1
    0.00 :   b733:       vfmadd231ps 0xe0(%rax),%ymm4,%ymm0
    0.00 :   b73c:       vfmadd132ps 0x100(%rax),%ymm3,%ymm4
         :          _Z14_mm256_set1_psf():
    0.00 :   b745:       vbroadcastss 0xc(%rdx),%ymm3
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b74b:       vfmadd231ps 0x120(%rax),%ymm3,%ymm1
    0.00 :   b754:       vfmadd231ps 0x140(%rax),%ymm3,%ymm0
    0.00 :   b75d:       vfmadd231ps 0x160(%rax),%ymm3,%ymm4
         :          _Z14_mm256_set1_psf():
    0.00 :   b766:       vbroadcastss 0x10(%rdx),%ymm3
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b76c:       vfmadd231ps 0x180(%rax),%ymm3,%ymm1
    0.00 :   b775:       vfmadd231ps 0x1a0(%rax),%ymm3,%ymm0
    0.00 :   b77e:       vfmadd231ps 0x1c0(%rax),%ymm3,%ymm4
         :          _Z14_mm256_set1_psf():
    0.00 :   b787:       vbroadcastss 0x14(%rdx),%ymm3
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b78d:       vfmadd231ps 0x1e0(%rax),%ymm3,%ymm1
    0.00 :   b796:       vfmadd231ps 0x200(%rax),%ymm3,%ymm0
    0.00 :   b79f:       vfmadd231ps 0x220(%rax),%ymm3,%ymm4
         :          _Z14_mm256_set1_psf():
    0.00 :   b7a8:       vbroadcastss 0x18(%rdx),%ymm3
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b7ae:       vfmadd231ps 0x240(%rax),%ymm3,%ymm1
    0.00 :   b7b7:       vfmadd231ps 0x260(%rax),%ymm3,%ymm0
    0.00 :   b7c0:       vfmadd231ps 0x280(%rax),%ymm3,%ymm4
         :          _Z14_mm256_set1_psf():
    0.00 :   b7c9:       vbroadcastss 0x1c(%rdx),%ymm3
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b7cf:       vfmadd231ps 0x2a0(%rax),%ymm3,%ymm1
    0.00 :   b7d8:       vfmadd231ps 0x2c0(%rax),%ymm3,%ymm0
    0.00 :   b7e1:       vfmadd132ps 0x2e0(%rax),%ymm4,%ymm3
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          EIGEN_GEBGP_ONESTEP(4);
         :          EIGEN_GEBGP_ONESTEP(5);
         :          EIGEN_GEBGP_ONESTEP(6);
         :          EIGEN_GEBGP_ONESTEP(7);
         :
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   b7ea:       add    $0x20,%rdx
         :          blA += int(pk) * 3 * int(Traits::LhsProgress);
    0.00 :   b7ee:       add    $0x300,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   b7f4:       add    $0x8,%r15
    0.00 :   b7f8:       cmp    %r15,%rbx
    0.00 :   b7fb:       jg     b6f0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x930>
    0.00 :   b801:       lea    (%rsi,%r13,1),%rax
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   b805:       mov    %r11,%r15
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 3pX1");
         :          }
         :
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   b808:       cmp    %rbx,%r12
    0.00 :   b80b:       jle    b83b <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xa7b>
    0.00 :   b80d:       add    0x68(%rsp),%r15
    0.00 :   b812:       mov    %rbx,%rdx
    0.00 :   b815:       nopl   (%rax)
         :          _Z14_mm256_set1_psf():
    0.00 :   b818:       vbroadcastss (%r15,%rdx,4),%ymm4
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b81e:       vfmadd231ps (%rax),%ymm4,%ymm1
    0.00 :   b823:       vfmadd231ps 0x20(%rax),%ymm4,%ymm0
    0.00 :   b829:       vfmadd231ps 0x40(%rax),%ymm4,%ymm3
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   b82f:       inc    %rdx
         :          {
         :          RhsPacket B_0;
         :          EIGEN_GEBGP_ONESTEP(0);
         :          blB += RhsProgress;
         :          blA += 3*Traits::LhsProgress;
    0.00 :   b832:       add    $0x60,%rax
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   b836:       cmp    %rdx,%r12
    0.00 :   b839:       jne    b818 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xa58>
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b83b:       vfmadd213ps (%rcx),%ymm2,%ymm1
    0.00 :   b840:       vfmadd213ps 0x20(%rcx),%ymm2,%ymm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=i1; i<actual_panel_end; i+=3*LhsProgress)
    0.00 :   b846:       add    $0x18,%rdi
    0.00 :   b84a:       add    %r10,%rsi
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   b84d:       vfmadd213ps 0x40(%rcx),%ymm2,%ymm3
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    0.00 :   b853:       vmovups %ymm1,(%rcx)
    0.00 :   b857:       vmovups %ymm0,0x20(%rcx)
    0.00 :   b85c:       vmovups %ymm3,0x40(%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   b861:       cmp    0xa0(%rsp),%rdi
    0.00 :   b869:       jl     b6b8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x8f8>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   b86f:       inc    %r8
    0.00 :   b872:       add    0x18(%rsp),%r9
    0.00 :   b877:       cmp    %r8,0x10(%rbp)
    0.00 :   b87b:       jne    b6a0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x8e0>
         :          for(Index i1=0; i1<peeled_mc3; i1+=actual_panel_rows)
    0.00 :   b881:       mov    -0x60(%rsp),%rcx
    0.00 :   b886:       add    %rcx,0x30(%rsp)
    0.00 :   b88b:       mov    -0x38(%rsp),%rcx
    0.00 :   b890:       cmp    %rcx,-0x30(%rsp)
    0.00 :   b895:       jg     b005 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x245>
    0.00 :   b89b:       mov    %r14,%r13
    0.00 :   b89e:       mov    %r12,%r14
         :          {
         :          const Index l1 = defaultL1CacheSize; // in Bytes, TODO, l1 should be passed to this function.
         :          // The max(1, ...) here is needed because we may be using blocking params larger than what our known l1 cache size
         :          // suggests we should be using: either because our known l1 cache size is inaccurate (e.g. on Android, we can only guess),
         :          // or because we are testing specific blocking sizes.
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   b8a1:       mov    -0x48(%rsp),%rax
    0.00 :   b8a6:       mov    %r14,%rcx
    0.00 :   b8a9:       xor    %edx,%edx
    0.00 :   b8ab:       shl    $0x6,%rcx
    0.00 :   b8af:       div    %rcx
         :
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.00 :   b8b2:       mov    (%rsp),%rcx
         :          Index actual_panel_rows = (2*LhsProgress) * std::max<Index>(1,( (l1 - sizeof(ResScalar)*mr*nr - depth*nr*sizeof(RhsScalar)) / (depth * sizeof(LhsScalar) * 2*LhsProgress) ));
    0.00 :   b8b6:       mov    $0x1,%edx
    0.00 :   b8bb:       test   %rax,%rax
    0.00 :   b8be:       cmovle %rdx,%rax
    0.00 :   b8c2:       shl    $0x4,%rax
    0.00 :   b8c6:       mov    %rax,-0x38(%rsp)
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.00 :   b8cb:       cmp    %rcx,-0x30(%rsp)
    0.00 :   b8d0:       jge    c034 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1274>
    0.00 :   b8d6:       mov    -0x30(%rsp),%rcx
    0.00 :   b8db:       imul   0x18(%rbp),%rax
         :          {
         :
         :          // We selected a 2*Traits::LhsProgress x nr micro block of res which is entirely
         :          // stored into 2 x nr registers.
         :
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   b8e0:       mov    $0x4,%edi
    0.00 :   b8e5:       vbroadcastss -0x14(%rsp),%ymm9
    0.00 :   b8ec:       mov    %rcx,0x10(%rsp)
    0.00 :   b8f1:       imul   0x18(%rbp),%rcx
    0.00 :   b8f6:       shl    $0x2,%rax
    0.00 :   b8fa:       mov    %rax,-0x50(%rsp)
    0.00 :   b8ff:       shlx   %rdi,0x28(%rbp),%rax
    0.00 :   b905:       add    %rcx,%rax
    0.00 :   b908:       mov    -0x8(%rsp),%rcx
    0.00 :   b90d:       lea    (%rcx,%rax,4),%rax
    0.00 :   b911:       mov    -0x10(%rsp),%rcx
    0.00 :   b916:       mov    %rax,0x38(%rsp)
    0.00 :   b91b:       shlx   %rdi,0x20(%rbp),%rax
    0.00 :   b921:       mov    %rax,0x18(%rsp)
    0.00 :   b926:       shlx   %rdi,0x30(%rbp),%rax
    0.00 :   b92c:       add    %rcx,%rax
    0.00 :   b92f:       mov    %rax,-0x48(%rsp)
    0.00 :   b934:       mov    $0x6,%eax
    0.00 :   b939:       shlx   %rax,0x18(%rbp),%rax
    0.00 :   b93f:       mov    %rax,0x80(%rsp)
    0.00 :   b947:       lea    -0x1(%rbx),%rax
    0.00 :   b94b:       shr    $0x3,%rax
    0.00 :   b94f:       lea    0x1(%rax),%rdx
    0.00 :   b953:       mov    %rdx,%rax
    0.00 :   b956:       mov    %rdx,%r12
    0.00 :   b959:       shl    $0x5,%rdx
    0.00 :   b95d:       shl    $0x7,%rax
    0.00 :   b961:       mov    %rdx,0x28(%rsp)
    0.00 :   b966:       shl    $0x9,%r12
    0.00 :   b96a:       mov    %rax,0x30(%rsp)
    0.00 :   b96f:       mov    0x20(%rbp),%rax
    0.00 :   b973:       shl    $0x2,%rax
    0.00 :   b977:       mov    %rax,0x20(%rsp)
    0.00 :   b97c:       mov    0x40(%rsp),%rax
    0.00 :   b981:       imul   0x20(%rbp),%rax
    0.00 :   b986:       add    0x30(%rbp),%rax
    0.00 :   b98a:       lea    (%rcx,%rax,4),%rax
    0.00 :   b98e:       mov    %rax,-0x30(%rsp)
    0.00 :   b993:       mov    %rbx,%rax
    0.00 :   b996:       neg    %rax
    0.00 :   b999:       shl    $0x2,%rax
    0.00 :   b99d:       mov    %rax,0x70(%rsp)
    0.00 :   b9a2:       mov    %r14,%rax
    0.00 :   b9a5:       mov    %r12,%r14
    0.00 :   b9a8:       mov    %rax,%r12
    0.00 :   b9ab:       mov    0x10(%rsp),%rcx
    0.00 :   b9b0:       mov    -0x38(%rsp),%rdi
    0.00 :   b9b5:       mov    %rcx,0x68(%rsp)
    0.00 :   b9ba:       mov    %rcx,%rax
    0.00 :   b9bd:       add    %rdi,%rcx
    0.00 :   b9c0:       mov    (%rsp),%rdi
    0.00 :   b9c4:       mov    %rcx,0x10(%rsp)
    0.00 :   b9c9:       cmp    %rcx,%rdi
    0.00 :   b9cc:       cmovle %rdi,%rcx
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   b9d0:       cmpq   $0x0,0x40(%rsp)
    0.00 :   b9d6:       mov    %rcx,0xa0(%rsp)
    0.00 :   b9de:       jle    cf8a <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x21ca>
    0.00 :   b9e4:       cmp    %rax,%rcx
    0.00 :   b9e7:       jle    c018 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1258>
    0.00 :   b9ed:       xor    %eax,%eax
    0.00 :   b9ef:       mov    -0x48(%rsp),%r11
    0.00 :   b9f4:       mov    %r14,0x78(%rsp)
    0.00 :   b9f9:       mov    %rax,%r14
    0.00 :   b9fc:       nopl   0x0(%rax)
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   ba00:       lea    0x1(%r14),%rax
         :          r1.prefetch(prefetch_res_offset);
         :          r2.prefetch(prefetch_res_offset);
         :          r3.prefetch(prefetch_res_offset);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   ba04:       mov    0x38(%rsp),%r10
    0.00 :   ba09:       mov    0x68(%rsp),%rcx
    0.00 :   ba0e:       mov    %rax,0x98(%rsp)
    0.00 :   ba16:       lea    0x2(%r14),%rax
    0.00 :   ba1a:       mov    %rax,0x90(%rsp)
    0.00 :   ba22:       lea    0x3(%r14),%rax
    0.00 :   ba26:       mov    %rax,0x88(%rsp)
    0.00 :   ba2e:       mov    0x30(%rsp),%rax
    0.00 :   ba33:       add    %r11,%rax
    0.00 :   ba36:       mov    %rax,0x48(%rsp)
    0.00 :   ba3b:       nopl   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   ba40:       mov    0x8(%r13),%rax
    0.00 :   ba44:       mov    0x0(%r13),%rsi
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   ba48:       mov    %r10,%rdx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   ba4b:       prefetcht0 (%r10)
    0.00 :   ba4f:       prefetcht0 (%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   ba53:       mov    %rax,%rdi
    0.00 :   ba56:       imul   %r14,%rdi
    0.00 :   ba5a:       add    %rcx,%rdi
    0.00 :   ba5d:       lea    (%rsi,%rdi,4),%r9
    0.00 :   ba61:       mov    0x98(%rsp),%rdi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   ba69:       prefetcht0 0x20(%r9)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   ba6e:       imul   %rax,%rdi
    0.00 :   ba72:       add    %rcx,%rdi
    0.00 :   ba75:       lea    (%rsi,%rdi,4),%r8
    0.00 :   ba79:       mov    0x90(%rsp),%rdi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   ba81:       prefetcht0 0x20(%r8)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   ba86:       imul   %rax,%rdi
    0.00 :   ba8a:       imul   0x88(%rsp),%rax
    0.00 :   ba93:       add    %rcx,%rdi
    0.00 :   ba96:       add    %rcx,%rax
    0.00 :   ba99:       lea    (%rsi,%rdi,4),%rdi
    0.00 :   ba9d:       lea    (%rsi,%rax,4),%rsi
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   baa1:       prefetcht0 0x20(%rdi)
    0.00 :   baa5:       prefetcht0 0x20(%rsi)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          prefetch(&blB[0]);
         :          LhsPacket A0, A1;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   baa9:       test   %rbx,%rbx
    0.00 :   baac:       jle    cec0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2100>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   bab2:       vxorps %xmm0,%xmm0,%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   bab6:       mov    %r11,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   bab9:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   babc:       vmovaps %ymm0,%ymm3
    0.00 :   bac0:       vmovaps %ymm0,%ymm5
    0.00 :   bac4:       vmovaps %ymm0,%ymm6
    0.00 :   bac8:       vmovaps %ymm0,%ymm4
    0.00 :   bacc:       vmovaps %ymm0,%ymm7
    0.00 :   bad0:       vmovaps %ymm0,%ymm8
    0.00 :   bad4:       vmovaps %ymm0,%ymm2
    0.00 :   bad8:       nopl   0x0(%rax,%rax,1)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   bae0:       prefetcht0 0xc0(%rax)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bae7:       vmovaps (%rdx),%ymm11
    0.00 :   baeb:       vmovaps 0x20(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   baf0:       vbroadcastss (%rax),%ymm14
    0.00 :   baf5:       vbroadcastss 0x4(%rax),%ymm12
    0.00 :   bafb:       vbroadcastss 0x8(%rax),%ymm10
    0.00 :   bb01:       vbroadcastss 0xc(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bb07:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bb0c:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bb11:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bb16:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bb1b:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bb20:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bb25:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bb2a:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bb2f:       vmovaps 0x40(%rdx),%ymm11
    0.00 :   bb34:       vmovaps 0x60(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bb39:       vbroadcastss 0x10(%rax),%ymm14
    0.00 :   bb3f:       vbroadcastss 0x14(%rax),%ymm12
    0.00 :   bb45:       vbroadcastss 0x18(%rax),%ymm10
    0.00 :   bb4b:       vbroadcastss 0x1c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bb51:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bb56:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bb5b:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bb60:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bb65:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bb6a:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bb6f:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bb74:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bb79:       vmovaps 0x80(%rdx),%ymm11
    0.00 :   bb81:       vmovaps 0xa0(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bb89:       vbroadcastss 0x20(%rax),%ymm14
    0.00 :   bb8f:       vbroadcastss 0x24(%rax),%ymm12
    0.00 :   bb95:       vbroadcastss 0x28(%rax),%ymm10
    0.00 :   bb9b:       vbroadcastss 0x2c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bba1:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bba6:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bbab:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bbb0:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bbb5:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bbba:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bbbf:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bbc4:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bbc9:       vmovaps 0xc0(%rdx),%ymm11
    0.00 :   bbd1:       vmovaps 0xe0(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bbd9:       vbroadcastss 0x30(%rax),%ymm14
    0.00 :   bbdf:       vbroadcastss 0x34(%rax),%ymm12
    0.00 :   bbe5:       vbroadcastss 0x38(%rax),%ymm10
    0.00 :   bbeb:       vbroadcastss 0x3c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bbf1:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bbf6:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bbfb:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bc00:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bc05:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bc0a:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bc0f:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bc14:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   bc19:       prefetcht0 0x100(%rax)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bc20:       vmovaps 0x100(%rdx),%ymm11
    0.00 :   bc28:       vmovaps 0x120(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bc30:       vbroadcastss 0x40(%rax),%ymm14
    0.00 :   bc36:       vbroadcastss 0x44(%rax),%ymm12
    0.00 :   bc3c:       vbroadcastss 0x48(%rax),%ymm10
    0.00 :   bc42:       vbroadcastss 0x4c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bc48:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bc4d:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bc52:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bc57:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bc5c:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bc61:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bc66:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bc6b:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bc70:       vmovaps 0x140(%rdx),%ymm11
    0.00 :   bc78:       vmovaps 0x160(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bc80:       vbroadcastss 0x50(%rax),%ymm14
    0.00 :   bc86:       vbroadcastss 0x54(%rax),%ymm12
    0.00 :   bc8c:       vbroadcastss 0x58(%rax),%ymm10
    0.00 :   bc92:       vbroadcastss 0x5c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bc98:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bc9d:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bca2:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bca7:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bcac:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bcb1:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bcb6:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bcbb:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bcc0:       vmovaps 0x180(%rdx),%ymm11
    0.00 :   bcc8:       vmovaps 0x1a0(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bcd0:       vbroadcastss 0x60(%rax),%ymm14
    0.00 :   bcd6:       vbroadcastss 0x64(%rax),%ymm12
    0.00 :   bcdc:       vbroadcastss 0x68(%rax),%ymm10
    0.00 :   bce2:       vbroadcastss 0x6c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bce8:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bced:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bcf2:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bcf7:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bcfc:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bd01:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bd06:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bd0b:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bd10:       vmovaps 0x1c0(%rdx),%ymm11
    0.00 :   bd18:       vmovaps 0x1e0(%rdx),%ymm13
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bd20:       vbroadcastss 0x70(%rax),%ymm14
    0.00 :   bd26:       vbroadcastss 0x74(%rax),%ymm12
    0.00 :   bd2c:       vbroadcastss 0x78(%rax),%ymm10
    0.00 :   bd32:       vbroadcastss 0x7c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bd38:       vfmadd231ps %ymm14,%ymm11,%ymm2
    0.00 :   bd3d:       vfmadd231ps %ymm14,%ymm13,%ymm6
    0.00 :   bd42:       vfmadd231ps %ymm12,%ymm11,%ymm8
    0.00 :   bd47:       vfmadd231ps %ymm12,%ymm13,%ymm5
    0.00 :   bd4c:       vfmadd231ps %ymm10,%ymm11,%ymm7
    0.00 :   bd51:       vfmadd231ps %ymm10,%ymm13,%ymm3
    0.00 :   bd56:       vfmadd231ps %ymm1,%ymm11,%ymm4
    0.00 :   bd5b:       vfmadd231ps %ymm1,%ymm13,%ymm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          EIGEN_GEBGP_ONESTEP(4);
         :          EIGEN_GEBGP_ONESTEP(5);
         :          EIGEN_GEBGP_ONESTEP(6);
         :          EIGEN_GEBGP_ONESTEP(7);
         :
         :          blB += pk*4*RhsProgress;
    0.00 :   bd60:       sub    $0xffffffffffffff80,%rax
         :          blA += pk*(2*Traits::LhsProgress);
    0.00 :   bd64:       add    $0x200,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   bd6b:       add    $0x8,%r15
    0.00 :   bd6f:       cmp    %r15,%rbx
    0.00 :   bd72:       jg     bae0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xd20>
    0.00 :   bd78:       mov    0x78(%rsp),%rax
    0.00 :   bd7d:       lea    (%r10,%rax,1),%rdx
         :          blB += pk*4*RhsProgress;
    0.00 :   bd81:       mov    0x48(%rsp),%rax
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 2pX4");
         :          }
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   bd86:       cmp    %rbx,%r12
    0.00 :   bd89:       jle    bde8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1028>
    0.00 :   bd8b:       mov    %rbx,%r15
    0.00 :   bd8e:       xchg   %ax,%ax
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   bd90:       vmovaps (%rdx),%ymm10
    0.00 :   bd94:       vmovaps 0x20(%rdx),%ymm1
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   bd99:       vbroadcastss (%rax),%ymm14
    0.00 :   bd9e:       vbroadcastss 0x4(%rax),%ymm13
    0.00 :   bda4:       vbroadcastss 0x8(%rax),%ymm12
    0.00 :   bdaa:       vbroadcastss 0xc(%rax),%ymm11
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bdb0:       vfmadd231ps %ymm14,%ymm10,%ymm2
    0.00 :   bdb5:       vfmadd231ps %ymm14,%ymm1,%ymm6
    0.00 :   bdba:       vfmadd231ps %ymm13,%ymm10,%ymm8
    0.00 :   bdbf:       vfmadd231ps %ymm13,%ymm1,%ymm5
    0.00 :   bdc4:       vfmadd231ps %ymm12,%ymm10,%ymm7
    0.00 :   bdc9:       vfmadd231ps %ymm12,%ymm1,%ymm3
    0.00 :   bdce:       vfmadd231ps %ymm11,%ymm10,%ymm4
    0.00 :   bdd3:       vfmadd231ps %ymm11,%ymm1,%ymm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   bdd8:       inc    %r15
         :          {
         :          RhsPacketx4 rhs_panel;
         :          RhsPacket T0;
         :          EIGEN_GEBGP_ONESTEP(0);
         :          blB += 4*RhsProgress;
    0.00 :   bddb:       add    $0x10,%rax
         :          blA += 2*Traits::LhsProgress;
    0.00 :   bddf:       add    $0x40,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   bde3:       cmp    %r15,%r12
    0.00 :   bde6:       jne    bd90 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xfd0>
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bde8:       vfmadd213ps (%r9),%ymm9,%ymm2
    0.00 :   bded:       vfmadd213ps 0x20(%r9),%ymm9,%ymm6
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   bdf3:       add    $0x10,%rcx
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bdf7:       vfmadd213ps (%r8),%ymm9,%ymm8
    0.00 :   bdfc:       vfmadd213ps 0x20(%r8),%ymm9,%ymm5
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    0.00 :   be02:       add    0x80(%rsp),%r10
    0.00 :   be0a:       vmovups %ymm2,(%r9)
    0.00 :   be0f:       vmovups %ymm6,0x20(%r9)
    0.00 :   be15:       vmovups %ymm8,(%r8)
    0.00 :   be1a:       vmovups %ymm5,0x20(%r8)
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   be20:       vfmadd213ps (%rdi),%ymm9,%ymm7
    0.00 :   be25:       vfmadd213ps 0x20(%rdi),%ymm9,%ymm3
    0.00 :   be2b:       vfmadd213ps (%rsi),%ymm9,%ymm4
    0.00 :   be30:       vfmadd213ps 0x20(%rsi),%ymm9,%ymm0
         :          _Z16_mm256_storeu_psPfDv8_f():
    0.00 :   be36:       vmovups %ymm7,(%rdi)
    0.00 :   be3a:       vmovups %ymm3,0x20(%rdi)
    0.00 :   be3f:       vmovups %ymm4,(%rsi)
    0.00 :   be43:       vmovups %ymm0,0x20(%rsi)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   be48:       cmp    %rcx,0xa0(%rsp)
    0.00 :   be50:       jg     ba40 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xc80>
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   be56:       add    $0x4,%r14
    0.00 :   be5a:       add    0x18(%rsp),%r11
    0.00 :   be5f:       cmp    %r14,0x40(%rsp)
    0.00 :   be64:       jg     ba00 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xc40>
    0.00 :   be6a:       mov    0x78(%rsp),%r14
         :          r3.storePacket(1 * Traits::ResPacketSize, R3);
         :          }
         :          }
         :
         :          // Deal with remaining columns of the rhs
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   be6f:       mov    0x40(%rsp),%rax
    0.00 :   be74:       cmp    %rax,0x10(%rbp)
    0.00 :   be78:       jle    c018 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1258>
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   be7e:       mov    -0x30(%rsp),%r9
    0.00 :   be83:       mov    0x40(%rsp),%r8
    0.00 :   be88:       mov    0x80(%rsp),%r10
         :          {
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   be90:       mov    0x28(%rsp),%rax
         :
         :          LinearMapper r0 = res.getLinearMapper(i, j2);
         :          r0.prefetch(prefetch_res_offset);
         :
         :          // performs "inner" products
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   be95:       mov    0x38(%rsp),%rsi
    0.00 :   be9a:       mov    0x68(%rsp),%rdi
    0.00 :   be9f:       lea    (%r9,%rax,1),%r11
    0.00 :   bea3:       nopl   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   bea8:       mov    0x8(%r13),%rdx
    0.00 :   beac:       mov    0x0(%r13),%rcx
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(2*Traits::LhsProgress)];
    0.00 :   beb0:       mov    %rsi,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   beb3:       prefetcht0 (%rsi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   beb6:       imul   %r8,%rdx
    0.00 :   beba:       add    %rdi,%rdx
    0.00 :   bebd:       lea    (%rcx,%rdx,4),%rcx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   bec1:       prefetcht0 0x20(%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          LhsPacket A0, A1;
         :
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   bec5:       test   %rbx,%rbx
    0.00 :   bec8:       jle    ceb0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x20f0>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   bece:       vxorps %xmm1,%xmm1,%xmm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   bed2:       mov    %r9,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   bed5:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   bed8:       vmovaps %ymm1,%ymm0
    0.00 :   bedc:       nopl   0x0(%rax)
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.00 :   bee0:       vbroadcastss (%rdx),%ymm2
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bee5:       vfmadd231ps (%rax),%ymm2,%ymm0
    0.00 :   beea:       vfmadd231ps 0x20(%rax),%ymm2,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   bef0:       vbroadcastss 0x4(%rdx),%ymm2
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bef6:       vfmadd231ps 0x40(%rax),%ymm2,%ymm0
    0.00 :   befc:       vfmadd231ps 0x60(%rax),%ymm2,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   bf02:       vbroadcastss 0x8(%rdx),%ymm2
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf08:       vfmadd231ps 0x80(%rax),%ymm2,%ymm0
    0.00 :   bf11:       vfmadd132ps 0xa0(%rax),%ymm1,%ymm2
         :          _Z14_mm256_set1_psf():
    0.00 :   bf1a:       vbroadcastss 0xc(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf20:       vfmadd231ps 0xc0(%rax),%ymm1,%ymm0
    0.00 :   bf29:       vfmadd231ps 0xe0(%rax),%ymm1,%ymm2
         :          _Z14_mm256_set1_psf():
    0.00 :   bf32:       vbroadcastss 0x10(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf38:       vfmadd231ps 0x100(%rax),%ymm1,%ymm0
    0.00 :   bf41:       vfmadd231ps 0x120(%rax),%ymm1,%ymm2
         :          _Z14_mm256_set1_psf():
    0.00 :   bf4a:       vbroadcastss 0x14(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf50:       vfmadd231ps 0x140(%rax),%ymm1,%ymm0
    0.00 :   bf59:       vfmadd231ps 0x160(%rax),%ymm1,%ymm2
         :          _Z14_mm256_set1_psf():
    0.00 :   bf62:       vbroadcastss 0x18(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf68:       vfmadd231ps 0x180(%rax),%ymm1,%ymm0
    0.00 :   bf71:       vfmadd231ps 0x1a0(%rax),%ymm1,%ymm2
         :          _Z14_mm256_set1_psf():
    0.00 :   bf7a:       vbroadcastss 0x1c(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bf80:       vfmadd231ps 0x1c0(%rax),%ymm1,%ymm0
    0.00 :   bf89:       vfmadd132ps 0x1e0(%rax),%ymm2,%ymm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          EIGEN_GEBGP_ONESTEP(4);
         :          EIGEN_GEBGP_ONESTEP(5);
         :          EIGEN_GEBGP_ONESTEP(6);
         :          EIGEN_GEBGP_ONESTEP(7);
         :
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   bf92:       add    $0x20,%rdx
         :          blA += int(pk) * 2 * int(Traits::LhsProgress);
    0.00 :   bf96:       add    $0x200,%rax
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   bf9c:       add    $0x8,%r15
    0.00 :   bfa0:       cmp    %r15,%rbx
    0.00 :   bfa3:       jg     bee0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1120>
    0.00 :   bfa9:       lea    (%rsi,%r14,1),%rax
         :          blB += int(pk) * int(RhsProgress);
    0.00 :   bfad:       mov    %r11,%r15
         :
         :          EIGEN_ASM_COMMENT("end gebp micro kernel 2pX1");
         :          }
         :
         :          // process remaining peeled loop
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   bfb0:       cmp    %rbx,%r12
    0.00 :   bfb3:       jle    bfdd <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x121d>
    0.00 :   bfb5:       add    0x70(%rsp),%r15
    0.00 :   bfba:       mov    %rbx,%rdx
    0.00 :   bfbd:       nopl   (%rax)
         :          _Z14_mm256_set1_psf():
    0.00 :   bfc0:       vbroadcastss (%r15,%rdx,4),%ymm2
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bfc6:       vfmadd231ps (%rax),%ymm2,%ymm0
    0.00 :   bfcb:       vfmadd231ps 0x20(%rax),%ymm2,%ymm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   bfd1:       inc    %rdx
         :          {
         :          RhsPacket B_0, B1;
         :          EIGEN_GEBGP_ONESTEP(0);
         :          blB += RhsProgress;
         :          blA += 2*Traits::LhsProgress;
    0.00 :   bfd4:       add    $0x40,%rax
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   bfd8:       cmp    %rdx,%r12
    0.00 :   bfdb:       jne    bfc0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1200>
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   bfdd:       vfmadd213ps (%rcx),%ymm9,%ymm0
    0.00 :   bfe2:       vfmadd213ps 0x20(%rcx),%ymm9,%ymm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=i1; i<actual_panel_end; i+=2*LhsProgress)
    0.00 :   bfe8:       add    $0x10,%rdi
    0.00 :   bfec:       add    %r10,%rsi
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    0.00 :   bfef:       vmovups %ymm0,(%rcx)
    0.00 :   bff3:       vmovups %ymm1,0x20(%rcx)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   bff8:       cmp    %rdi,0xa0(%rsp)
    0.00 :   c000:       jg     bea8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x10e8>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c006:       inc    %r8
    0.00 :   c009:       add    0x20(%rsp),%r9
    0.00 :   c00e:       cmp    %r8,0x10(%rbp)
    0.00 :   c012:       jne    be90 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x10d0>
         :          for(Index i1=peeled_mc3; i1<peeled_mc2; i1+=actual_panel_rows)
    0.00 :   c018:       mov    -0x50(%rsp),%rcx
    0.00 :   c01d:       add    %rcx,0x38(%rsp)
    0.00 :   c022:       mov    0x10(%rsp),%rcx
    0.00 :   c027:       cmp    %rcx,(%rsp)
    0.00 :   c02b:       jg     b9ab <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xbeb>
    0.00 :   c031:       mov    %r12,%r14
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index i=peelStart; i<peelEnd; i+=LhsProgress)
    0.00 :   c034:       mov    -0x28(%rsp),%rcx
    0.00 :   c039:       cmp    %rcx,(%rsp)
    0.00 :   c03d:       jge    c571 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x17b1>
    0.00 :   c043:       mov    (%rsp),%r8
    0.00 :   c047:       mov    $0x5,%eax
    0.00 :   c04c:       shlx   %rax,0x18(%rbp),%rax
    0.00 :   c052:       mov    %rax,0x68(%rsp)
    0.00 :   c057:       mov    0x18(%rbp),%rax
    0.00 :   c05b:       mov    0x28(%rbp),%rcx
    0.00 :   c05f:       vbroadcastss -0x14(%rsp),%ymm8
    0.00 :   c066:       imul   %r8,%rax
    0.00 :   c06a:       lea    (%rax,%rcx,8),%rax
    0.00 :   c06e:       mov    -0x8(%rsp),%rcx
    0.00 :   c073:       lea    (%rcx,%rax,4),%rdi
    0.00 :   c077:       mov    $0x4,%eax
    0.00 :   c07c:       shlx   %rax,0x20(%rbp),%rcx
    0.00 :   c082:       mov    %rcx,0x98(%rsp)
    0.00 :   c08a:       mov    -0x10(%rsp),%rcx
    0.00 :   c08f:       shlx   %rax,0x30(%rbp),%rax
    0.00 :   c095:       add    %rcx,%rax
    0.00 :   c098:       mov    %rax,0x70(%rsp)
    0.00 :   c09d:       lea    -0x1(%rbx),%rax
    0.00 :   c0a1:       shr    $0x3,%rax
    0.00 :   c0a5:       lea    0x1(%rax),%rdx
    0.00 :   c0a9:       mov    %rdx,%rax
    0.00 :   c0ac:       shl    $0x7,%rax
    0.00 :   c0b0:       mov    %rax,0x90(%rsp)
    0.00 :   c0b8:       mov    %rdx,%rax
    0.00 :   c0bb:       shl    $0x5,%rdx
    0.00 :   c0bf:       shl    $0x8,%rax
    0.00 :   c0c3:       mov    %rdx,0x38(%rsp)
    0.00 :   c0c8:       mov    %rax,0x48(%rsp)
    0.00 :   c0cd:       mov    0x20(%rbp),%rax
    0.00 :   c0d1:       shl    $0x2,%rax
    0.00 :   c0d5:       mov    %rax,0xa0(%rsp)
    0.00 :   c0dd:       mov    0x40(%rsp),%rax
    0.00 :   c0e2:       imul   0x20(%rbp),%rax
    0.00 :   c0e7:       add    0x30(%rbp),%rax
    0.00 :   c0eb:       lea    (%rcx,%rax,4),%rax
    0.00 :   c0ef:       mov    %rax,0x78(%rsp)
    0.00 :   c0f4:       mov    %rbx,%rax
    0.00 :   c0f7:       neg    %rax
    0.00 :   c0fa:       shl    $0x2,%rax
    0.00 :   c0fe:       mov    %rax,0x80(%rsp)
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c106:       cmpq   $0x0,0x40(%rsp)
    0.00 :   c10c:       jle    c428 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1668>
    0.00 :   c112:       mov    0x48(%rsp),%rax
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c117:       mov    0x70(%rsp),%rsi
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c11c:       xor    %ecx,%ecx
    0.00 :   c11e:       add    %rdi,%rax
    0.00 :   c121:       mov    %rax,0x88(%rsp)
    0.00 :   c129:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c130:       mov    0x8(%r13),%r9
    0.00 :   c134:       mov    0x0(%r13),%rdx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c138:       prefetcht0 (%rdi)
    0.00 :   c13b:       prefetcht0 (%rsi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c13e:       mov    %r9,%rax
    0.00 :   c141:       imul   %rcx,%rax
    0.00 :   c145:       add    %r8,%rax
    0.00 :   c148:       lea    (%rdx,%rax,4),%r12
    0.00 :   c14c:       lea    0x1(%rcx),%rax
    0.00 :   c150:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c154:       prefetcht0 0x20(%r12)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c15a:       add    %r8,%rax
    0.00 :   c15d:       lea    (%rdx,%rax,4),%r11
    0.00 :   c161:       lea    0x2(%rcx),%rax
    0.00 :   c165:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c169:       prefetcht0 0x20(%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c16e:       add    %r8,%rax
    0.00 :   c171:       lea    (%rdx,%rax,4),%r10
    0.00 :   c175:       lea    0x3(%rcx),%rax
    0.00 :   c179:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c17d:       prefetcht0 0x20(%r10)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c182:       add    %r8,%rax
    0.00 :   c185:       lea    (%rdx,%rax,4),%r9
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   c189:       mov    %rsi,%rax
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c18c:       mov    %rdi,%rdx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c18f:       prefetcht0 0x20(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c194:       test   %rbx,%rbx
    0.00 :   c197:       jle    cf75 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x21b5>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c19d:       vxorps %xmm0,%xmm0,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c1a1:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c1a4:       vmovaps %ymm0,%ymm2
    0.00 :   c1a8:       vmovaps %ymm0,%ymm3
    0.00 :   c1ac:       vmovaps %ymm0,%ymm4
    0.00 :   c1b0:       vmovaps %ymm0,%ymm1
    0.00 :   c1b4:       vmovaps %ymm0,%ymm5
    0.00 :   c1b8:       vmovaps %ymm0,%ymm6
    0.00 :   c1bc:       vmovaps %ymm0,%ymm7
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c1c0:       prefetcht0 0xc0(%rax)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c1c7:       vmovaps (%rdx),%ymm9
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c1cb:       vbroadcastss (%rax),%ymm13
    0.00 :   c1d0:       vbroadcastss 0x4(%rax),%ymm12
    0.00 :   c1d6:       vbroadcastss 0x8(%rax),%ymm11
    0.00 :   c1dc:       vbroadcastss 0xc(%rax),%ymm10
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c1e2:       vfmadd231ps %ymm13,%ymm9,%ymm7
    0.00 :   c1e7:       vfmadd231ps %ymm12,%ymm9,%ymm6
    0.00 :   c1ec:       vfmadd231ps %ymm11,%ymm9,%ymm5
    0.00 :   c1f1:       vfmadd231ps %ymm10,%ymm9,%ymm1
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c1f6:       vmovaps 0x20(%rdx),%ymm9
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c1fb:       vbroadcastss 0x10(%rax),%ymm13
    0.00 :   c201:       vbroadcastss 0x14(%rax),%ymm12
    0.00 :   c207:       vbroadcastss 0x18(%rax),%ymm11
    0.00 :   c20d:       vbroadcastss 0x1c(%rax),%ymm10
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c213:       vfmadd231ps %ymm13,%ymm9,%ymm4
    0.00 :   c218:       vfmadd231ps %ymm12,%ymm9,%ymm3
    0.00 :   c21d:       vfmadd231ps %ymm11,%ymm9,%ymm2
    0.00 :   c222:       vfmadd231ps %ymm10,%ymm9,%ymm0
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c227:       vmovaps 0x40(%rdx),%ymm10
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c22c:       vbroadcastss 0x20(%rax),%ymm13
    0.00 :   c232:       vbroadcastss 0x24(%rax),%ymm12
    0.00 :   c238:       vbroadcastss 0x28(%rax),%ymm11
    0.00 :   c23e:       vbroadcastss 0x2c(%rax),%ymm9
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c244:       vfmadd231ps %ymm13,%ymm10,%ymm7
    0.00 :   c249:       vfmadd231ps %ymm12,%ymm10,%ymm6
    0.12 :   c24e:       vfmadd231ps %ymm11,%ymm10,%ymm5
    0.00 :   c253:       vfmadd132ps %ymm9,%ymm1,%ymm10
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c258:       vmovaps 0x60(%rdx),%ymm9
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c25d:       vbroadcastss 0x30(%rax),%ymm13
    0.00 :   c263:       vbroadcastss 0x34(%rax),%ymm12
    0.00 :   c269:       vbroadcastss 0x38(%rax),%ymm11
    0.00 :   c26f:       vbroadcastss 0x3c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c275:       vfmadd231ps %ymm13,%ymm9,%ymm4
    0.00 :   c27a:       vfmadd231ps %ymm12,%ymm9,%ymm3
    0.00 :   c27f:       vfmadd231ps %ymm11,%ymm9,%ymm2
    0.00 :   c284:       vfmadd231ps %ymm1,%ymm9,%ymm0
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.14 :   c289:       prefetcht0 0x100(%rax)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c290:       vmovaps 0x80(%rdx),%ymm1
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c298:       vbroadcastss 0x40(%rax),%ymm13
    0.00 :   c29e:       vbroadcastss 0x44(%rax),%ymm12
    0.00 :   c2a4:       vbroadcastss 0x48(%rax),%ymm11
    0.00 :   c2aa:       vbroadcastss 0x4c(%rax),%ymm9
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c2b0:       vfmadd231ps %ymm13,%ymm1,%ymm7
    0.00 :   c2b5:       vfmadd231ps %ymm12,%ymm1,%ymm6
    0.00 :   c2ba:       vfmadd231ps %ymm11,%ymm1,%ymm5
    0.00 :   c2bf:       vfmadd231ps %ymm9,%ymm1,%ymm10
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c2c4:       vmovaps 0xa0(%rdx),%ymm9
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c2cc:       vbroadcastss 0x50(%rax),%ymm13
    0.00 :   c2d2:       vbroadcastss 0x54(%rax),%ymm12
    0.00 :   c2d8:       vbroadcastss 0x58(%rax),%ymm11
    0.00 :   c2de:       vbroadcastss 0x5c(%rax),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c2e4:       vfmadd231ps %ymm13,%ymm9,%ymm4
    0.00 :   c2e9:       vfmadd231ps %ymm12,%ymm9,%ymm3
    0.00 :   c2ee:       vfmadd231ps %ymm11,%ymm9,%ymm2
    0.00 :   c2f3:       vfmadd132ps %ymm1,%ymm0,%ymm9
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.17 :   c2f8:       vmovaps 0xc0(%rdx),%ymm1
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c300:       vbroadcastss 0x60(%rax),%ymm13
    0.14 :   c306:       vbroadcastss 0x64(%rax),%ymm12
    0.00 :   c30c:       vbroadcastss 0x68(%rax),%ymm11
    0.12 :   c312:       vbroadcastss 0x6c(%rax),%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c318:       vfmadd231ps %ymm13,%ymm1,%ymm7
    0.00 :   c31d:       vfmadd231ps %ymm12,%ymm1,%ymm6
    0.00 :   c322:       vfmadd231ps %ymm11,%ymm1,%ymm5
    0.00 :   c327:       vfmadd132ps %ymm0,%ymm10,%ymm1
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c32c:       vmovaps 0xe0(%rdx),%ymm0
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c334:       vbroadcastss 0x70(%rax),%ymm13
    0.00 :   c33a:       vbroadcastss 0x74(%rax),%ymm12
    0.00 :   c340:       vbroadcastss 0x78(%rax),%ymm11
    0.00 :   c346:       vbroadcastss 0x7c(%rax),%ymm10
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c34c:       vfmadd231ps %ymm13,%ymm0,%ymm4
    0.00 :   c351:       vfmadd231ps %ymm12,%ymm0,%ymm3
    0.00 :   c356:       vfmadd231ps %ymm11,%ymm0,%ymm2
    0.00 :   c35b:       vfmadd132ps %ymm10,%ymm9,%ymm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          blB += pk*4*RhsProgress;
    0.00 :   c360:       sub    $0xffffffffffffff80,%rax
         :          blA += pk*LhsProgress;
    0.00 :   c364:       add    $0x100,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c36b:       add    $0x8,%r15
    0.00 :   c36f:       cmp    %r15,%rbx
    0.00 :   c372:       jg     c1c0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1400>
    0.00 :   c378:       mov    0x90(%rsp),%rax
    0.00 :   c380:       vaddps %ymm7,%ymm4,%ymm4
    0.00 :   c384:       vaddps %ymm6,%ymm3,%ymm3
         :          blA += pk*LhsProgress;
    0.00 :   c388:       mov    0x88(%rsp),%rdx
    0.00 :   c390:       vaddps %ymm5,%ymm2,%ymm2
    0.00 :   c394:       vaddps %ymm1,%ymm0,%ymm1
    0.00 :   c398:       add    %rsi,%rax
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c39b:       cmp    %rbx,%r14
    0.00 :   c39e:       jle    c3e7 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1627>
    0.00 :   c3a0:       mov    %rbx,%r15
    0.00 :   c3a3:       nopl   0x0(%rax,%rax,1)
         :          _Z14_mm256_load_psPKf():
         :          return *(__m256 *)__P;
    0.00 :   c3a8:       vmovaps (%rdx),%ymm0
         :          _Z19_mm256_broadcast_ssPKf():
         :          return (__m256) __builtin_ia32_vbroadcastss256 (__X);
    0.00 :   c3ac:       vbroadcastss (%rax),%ymm9
    0.00 :   c3b1:       vbroadcastss 0x4(%rax),%ymm7
    0.00 :   c3b7:       vbroadcastss 0x8(%rax),%ymm6
    0.00 :   c3bd:       vbroadcastss 0xc(%rax),%ymm5
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c3c3:       vfmadd231ps %ymm9,%ymm0,%ymm4
    0.00 :   c3c8:       vfmadd231ps %ymm7,%ymm0,%ymm3
    0.00 :   c3cd:       vfmadd231ps %ymm6,%ymm0,%ymm2
    0.00 :   c3d2:       vfmadd231ps %ymm5,%ymm0,%ymm1
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c3d7:       inc    %r15
         :          blB += 4*RhsProgress;
    0.00 :   c3da:       add    $0x10,%rax
         :          blA += LhsProgress;
    0.00 :   c3de:       add    $0x20,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c3e2:       cmp    %r15,%r14
    0.00 :   c3e5:       jne    c3a8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x15e8>
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c3e7:       vfmadd213ps (%r12),%ymm8,%ymm4
    0.00 :   c3ed:       vfmadd213ps (%r11),%ymm8,%ymm3
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c3f2:       add    $0x4,%rcx
    0.00 :   c3f6:       add    0x98(%rsp),%rsi
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    0.00 :   c3fe:       vmovups %ymm4,(%r12)
    0.00 :   c404:       vmovups %ymm3,(%r11)
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c409:       vfmadd213ps (%r10),%ymm8,%ymm2
    0.00 :   c40e:       vfmadd213ps (%r9),%ymm8,%ymm1
         :          _Z16_mm256_storeu_psPfDv8_f():
    0.00 :   c413:       vmovups %ymm2,(%r10)
    0.00 :   c418:       vmovups %ymm1,(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c41d:       cmp    %rcx,0x40(%rsp)
    0.00 :   c422:       jg     c130 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1370>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c428:       mov    0x48(%rsp),%rax
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c42d:       mov    0x78(%rsp),%rcx
    0.00 :   c432:       lea    (%rdi,%rax,1),%r10
    0.00 :   c436:       mov    0x40(%rsp),%rax
    0.00 :   c43b:       mov    %rax,%rsi
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c43e:       cmp    %rax,0x10(%rbp)
    0.00 :   c442:       jle    c55d <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x179d>
    0.00 :   c448:       mov    0x38(%rsp),%r12
    0.00 :   c44d:       mov    0x10(%rbp),%r11
    0.00 :   c451:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c458:       mov    0x8(%r13),%rax
    0.00 :   c45c:       mov    0x0(%r13),%rdx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   c460:       mov    %rcx,%r15
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c463:       prefetcht0 (%rdi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c466:       imul   %rsi,%rax
    0.00 :   c46a:       add    %r8,%rax
    0.00 :   c46d:       lea    (%rdx,%rax,4),%r9
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   c471:       test   %rbx,%rbx
    0.00 :   c474:       jle    cf69 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x21a9>
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   c47a:       mov    %rcx,%rdx
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c47d:       mov    %rdi,%rax
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c480:       vxorps %xmm0,%xmm0,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   c484:       xor    %r15d,%r15d
    0.00 :   c487:       nopw   0x0(%rax,%rax,1)
         :          _Z14_mm256_set1_psf():
         :          __A, __A, __A, __A };
    0.00 :   c490:       vbroadcastss (%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c495:       vfmadd231ps (%rax),%ymm1,%ymm0
         :          _Z14_mm256_set1_psf():
    0.00 :   c49a:       vbroadcastss 0x4(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4a0:       vfmadd132ps 0x20(%rax),%ymm0,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   c4a6:       vbroadcastss 0x8(%rdx),%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4ac:       vfmadd231ps 0x40(%rax),%ymm0,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   c4b2:       vbroadcastss 0xc(%rdx),%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4b8:       vfmadd132ps 0x60(%rax),%ymm1,%ymm0
         :          _Z14_mm256_set1_psf():
    0.00 :   c4be:       vbroadcastss 0x10(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4c4:       vfmadd231ps 0x80(%rax),%ymm1,%ymm0
         :          _Z14_mm256_set1_psf():
    0.00 :   c4cd:       vbroadcastss 0x14(%rdx),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4d3:       vfmadd132ps 0xa0(%rax),%ymm0,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   c4dc:       vbroadcastss 0x18(%rdx),%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4e2:       vfmadd231ps 0xc0(%rax),%ymm0,%ymm1
         :          _Z14_mm256_set1_psf():
    0.00 :   c4eb:       vbroadcastss 0x1c(%rdx),%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c4f1:       vfmadd132ps 0xe0(%rax),%ymm1,%ymm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          blB += pk*RhsProgress;
    0.00 :   c4fa:       add    $0x20,%rdx
         :          blA += pk*LhsProgress;
    0.00 :   c4fe:       add    $0x100,%rax
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   c504:       add    $0x8,%r15
    0.00 :   c508:       cmp    %r15,%rbx
    0.00 :   c50b:       jg     c490 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x16d0>
    0.00 :   c50d:       lea    (%rcx,%r12,1),%r15
         :          blA += pk*LhsProgress;
    0.00 :   c511:       mov    %r10,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c514:       cmp    %rbx,%r14
    0.00 :   c517:       jle    c53f <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x177f>
    0.00 :   c519:       add    0x80(%rsp),%r15
    0.00 :   c521:       mov    %rbx,%rax
    0.00 :   c524:       nopl   0x0(%rax)
         :          _Z14_mm256_set1_psf():
    0.00 :   c528:       vbroadcastss (%r15,%rax,4),%ymm1
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c52e:       vfmadd231ps (%rdx),%ymm1,%ymm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c533:       inc    %rax
         :          blA += LhsProgress;
    0.00 :   c536:       add    $0x20,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c53a:       cmp    %rax,%r14
    0.00 :   c53d:       jne    c528 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1768>
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   c53f:       vfmadd213ps (%r9),%ymm8,%ymm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c544:       inc    %rsi
    0.00 :   c547:       add    0xa0(%rsp),%rcx
         :          _Z16_mm256_storeu_psPfDv8_f():
         :          *(__m256_u *)__P = __A;
    0.00 :   c54f:       vmovups %ymm0,(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c554:       cmp    %rsi,%r11
    0.00 :   c557:       jne    c458 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1698>
         :          for(Index i=peelStart; i<peelEnd; i+=LhsProgress)
    0.00 :   c55d:       add    $0x8,%r8
    0.00 :   c561:       add    0x68(%rsp),%rdi
    0.00 :   c566:       cmp    %r8,-0x28(%rsp)
    0.00 :   c56b:       jg     c106 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1346>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c571:       mov    -0x40(%rsp),%rcx
    0.00 :   c576:       cmp    %rcx,-0x28(%rsp)
    0.00 :   c57b:       jge    cab9 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1cf9>
    0.00 :   c581:       mov    $0x4,%ecx
    0.00 :   c586:       mov    -0x28(%rsp),%r8
    0.00 :   c58b:       shlx   %rcx,0x18(%rbp),%rax
    0.00 :   c591:       mov    %rax,0x70(%rsp)
    0.00 :   c596:       mov    0x18(%rbp),%rax
    0.00 :   c59a:       mov    0x28(%rbp),%rdi
    0.00 :   c59e:       vbroadcastss -0x14(%rsp),%xmm8
    0.00 :   c5a5:       imul   %r8,%rax
    0.00 :   c5a9:       lea    (%rax,%rdi,4),%rax
    0.00 :   c5ad:       mov    -0x8(%rsp),%rdi
    0.00 :   c5b2:       lea    (%rdi,%rax,4),%rdi
    0.00 :   c5b6:       shlx   %rcx,0x20(%rbp),%rax
    0.00 :   c5bc:       mov    %rax,0x90(%rsp)
    0.00 :   c5c4:       shlx   %rcx,0x30(%rbp),%rax
    0.00 :   c5ca:       mov    -0x10(%rsp),%rcx
    0.00 :   c5cf:       add    %rcx,%rax
    0.00 :   c5d2:       mov    %rax,0x78(%rsp)
    0.00 :   c5d7:       lea    -0x1(%rbx),%rax
    0.00 :   c5db:       shr    $0x3,%rax
    0.00 :   c5df:       lea    0x1(%rax),%rdx
    0.00 :   c5e3:       mov    %rdx,%rax
    0.00 :   c5e6:       shl    $0x5,%rdx
    0.00 :   c5ea:       shl    $0x7,%rax
    0.00 :   c5ee:       mov    %rdx,0x68(%rsp)
    0.00 :   c5f3:       mov    %rax,0xa0(%rsp)
    0.00 :   c5fb:       mov    0x20(%rbp),%rax
    0.00 :   c5ff:       shl    $0x2,%rax
    0.00 :   c603:       mov    %rax,0x98(%rsp)
    0.00 :   c60b:       mov    0x40(%rsp),%rax
    0.00 :   c610:       imul   0x20(%rbp),%rax
    0.00 :   c615:       add    0x30(%rbp),%rax
    0.00 :   c619:       lea    (%rcx,%rax,4),%rax
    0.00 :   c61d:       mov    %rax,0x48(%rsp)
    0.00 :   c622:       mov    %rbx,%rax
    0.00 :   c625:       neg    %rax
    0.00 :   c628:       shl    $0x2,%rax
    0.00 :   c62c:       mov    %rax,0x80(%rsp)
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c634:       mov    0xa0(%rsp),%rax
    0.00 :   c63c:       xor    %ecx,%ecx
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c63e:       mov    0x78(%rsp),%rsi
    0.00 :   c643:       add    %rdi,%rax
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c646:       cmpq   $0x0,0x40(%rsp)
    0.00 :   c64c:       mov    %rax,0x88(%rsp)
    0.00 :   c654:       jle    c980 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1bc0>
    0.00 :   c65a:       nopw   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c660:       mov    0x8(%r13),%r9
    0.00 :   c664:       mov    0x0(%r13),%rdx
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c668:       prefetcht0 (%rdi)
    0.00 :   c66b:       prefetcht0 (%rsi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c66e:       mov    %r9,%rax
    0.00 :   c671:       imul   %rcx,%rax
    0.00 :   c675:       add    %r8,%rax
    0.00 :   c678:       lea    (%rdx,%rax,4),%r12
    0.00 :   c67c:       lea    0x1(%rcx),%rax
    0.00 :   c680:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c684:       prefetcht0 0x20(%r12)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c68a:       add    %r8,%rax
    0.00 :   c68d:       lea    (%rdx,%rax,4),%r11
    0.00 :   c691:       lea    0x2(%rcx),%rax
    0.00 :   c695:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c699:       prefetcht0 0x20(%r11)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c69e:       add    %r8,%rax
    0.00 :   c6a1:       lea    (%rdx,%rax,4),%r10
    0.00 :   c6a5:       lea    0x3(%rcx),%rax
    0.00 :   c6a9:       imul   %r9,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c6ad:       prefetcht0 0x20(%r10)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c6b2:       add    %r8,%rax
    0.00 :   c6b5:       lea    (%rdx,%rax,4),%r9
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   c6b9:       mov    %rsi,%rax
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c6bc:       prefetcht0 0x20(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c6c1:       test   %rbx,%rbx
    0.00 :   c6c4:       jle    cf51 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2191>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi1EE7initAccERDv4_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c6ca:       vxorps %xmm0,%xmm0,%xmm0
    0.00 :   c6ce:       lea    0xc0(%rsi),%rax
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c6d5:       mov    %rdi,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c6d8:       xor    %r15d,%r15d
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi1EE7initAccERDv4_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c6db:       vmovaps %xmm0,%xmm6
    0.00 :   c6df:       vmovaps %xmm0,%xmm7
    0.00 :   c6e3:       vmovaps %xmm0,%xmm9
    0.00 :   c6e7:       vmovaps %xmm0,%xmm1
    0.00 :   c6eb:       vmovaps %xmm0,%xmm2
    0.00 :   c6ef:       vmovaps %xmm0,%xmm3
    0.00 :   c6f3:       vmovaps %xmm0,%xmm4
    0.00 :   c6f7:       nopw   0x0(%rax,%rax,1)
         :          _Z12_mm_prefetchPKv8_mm_hint():
    0.00 :   c700:       prefetcht0 (%rax)
         :          _Z11_mm_set1_psf():
         :
         :          /* Create a vector with all four elements equal to F.  */
         :          extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_set1_ps (float __F)
         :          {
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c703:       vbroadcastss -0xc0(%rax),%xmm10
         :          _Z11_mm_load_psPKf():
         :
         :          /* Load four SPFP values from P.  The address must be 16-byte aligned.  */
         :          extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_load_ps (float const *__P)
         :          {
         :          return *(__m128 *)__P;
    0.00 :   c70c:       vmovaps (%rdx),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
         :          return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,
    0.00 :   c710:       vfmadd231ps %xmm10,%xmm5,%xmm4
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c715:       vbroadcastss -0xbc(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c71e:       vfmadd231ps %xmm10,%xmm5,%xmm3
         :          _Z11_mm_set1_psf():
    0.00 :   c723:       vbroadcastss -0xb8(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c72c:       vfmadd231ps %xmm10,%xmm5,%xmm2
         :          _Z11_mm_set1_psf():
    0.00 :   c731:       vbroadcastss -0xb4(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c73a:       vfmadd231ps %xmm10,%xmm5,%xmm1
         :          _Z11_mm_set1_psf():
    0.00 :   c73f:       vbroadcastss -0xb0(%rax),%xmm10
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c748:       vmovaps 0x10(%rdx),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c74d:       vfmadd231ps %xmm10,%xmm5,%xmm9
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c752:       vbroadcastss -0xac(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c75b:       vfmadd231ps %xmm10,%xmm5,%xmm7
         :          _Z11_mm_set1_psf():
    0.00 :   c760:       vbroadcastss -0xa8(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c769:       vfmadd231ps %xmm10,%xmm5,%xmm6
         :          _Z11_mm_set1_psf():
    0.00 :   c76e:       vbroadcastss -0xa4(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c777:       vfmadd231ps %xmm10,%xmm5,%xmm0
         :          _Z11_mm_set1_psf():
    0.00 :   c77c:       vbroadcastss -0xa0(%rax),%xmm5
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c785:       vmovaps 0x20(%rdx),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c78a:       vfmadd231ps %xmm5,%xmm10,%xmm4
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c78f:       vbroadcastss -0x9c(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c798:       vfmadd231ps %xmm5,%xmm10,%xmm3
         :          _Z11_mm_set1_psf():
    0.00 :   c79d:       vbroadcastss -0x98(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7a6:       vfmadd231ps %xmm5,%xmm10,%xmm2
         :          _Z11_mm_set1_psf():
    0.00 :   c7ab:       vbroadcastss -0x94(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7b4:       vfmadd132ps %xmm5,%xmm1,%xmm10
         :          _Z11_mm_set1_psf():
    0.00 :   c7b9:       vbroadcastss -0x90(%rax),%xmm1
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c7c2:       vmovaps 0x30(%rdx),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7c7:       vfmadd231ps %xmm1,%xmm5,%xmm9
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c7cc:       vbroadcastss -0x8c(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7d5:       vfmadd231ps %xmm1,%xmm5,%xmm7
         :          _Z11_mm_set1_psf():
    0.00 :   c7da:       vbroadcastss -0x88(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7e3:       vfmadd231ps %xmm1,%xmm5,%xmm6
         :          _Z11_mm_set1_psf():
    0.00 :   c7e8:       vbroadcastss -0x84(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c7f1:       vfmadd231ps %xmm1,%xmm5,%xmm0
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   c7f6:       prefetcht0 0x40(%rax)
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c7fa:       vmovaps 0x40(%rdx),%xmm1
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c7ff:       vbroadcastss -0x80(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c805:       vfmadd231ps %xmm5,%xmm1,%xmm4
         :          _Z11_mm_set1_psf():
    0.00 :   c80a:       vbroadcastss -0x7c(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c810:       vfmadd231ps %xmm5,%xmm1,%xmm3
         :          _Z11_mm_set1_psf():
    0.00 :   c815:       vbroadcastss -0x78(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c81b:       vfmadd231ps %xmm5,%xmm1,%xmm2
         :          _Z11_mm_set1_psf():
    0.00 :   c820:       vbroadcastss -0x74(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c826:       vfmadd231ps %xmm5,%xmm1,%xmm10
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c82b:       vmovaps 0x50(%rdx),%xmm5
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c830:       vbroadcastss -0x70(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c836:       vfmadd231ps %xmm1,%xmm5,%xmm9
         :          _Z11_mm_set1_psf():
    0.00 :   c83b:       vbroadcastss -0x6c(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c841:       vfmadd231ps %xmm1,%xmm5,%xmm7
         :          _Z11_mm_set1_psf():
    0.00 :   c846:       vbroadcastss -0x68(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c84c:       vfmadd231ps %xmm1,%xmm5,%xmm6
         :          _Z11_mm_set1_psf():
    0.00 :   c851:       vbroadcastss -0x64(%rax),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c857:       vfmadd132ps %xmm1,%xmm0,%xmm5
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c85c:       vmovaps 0x60(%rdx),%xmm1
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c861:       vbroadcastss -0x60(%rax),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c867:       vfmadd231ps %xmm0,%xmm1,%xmm4
         :          _Z11_mm_set1_psf():
    0.00 :   c86c:       vbroadcastss -0x5c(%rax),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c872:       vfmadd231ps %xmm0,%xmm1,%xmm3
         :          _Z11_mm_set1_psf():
    0.00 :   c877:       vbroadcastss -0x58(%rax),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c87d:       vfmadd231ps %xmm0,%xmm1,%xmm2
         :          _Z11_mm_set1_psf():
    0.00 :   c882:       vbroadcastss -0x54(%rax),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c888:       vfmadd132ps %xmm0,%xmm10,%xmm1
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c88d:       vmovaps 0x70(%rdx),%xmm0
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c892:       vbroadcastss -0x50(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c898:       vfmadd231ps %xmm10,%xmm0,%xmm9
         :          _Z11_mm_set1_psf():
    0.00 :   c89d:       vbroadcastss -0x4c(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c8a3:       vfmadd231ps %xmm10,%xmm0,%xmm7
         :          _Z11_mm_set1_psf():
    0.00 :   c8a8:       vbroadcastss -0x48(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c8ae:       vfmadd231ps %xmm10,%xmm0,%xmm6
         :          _Z11_mm_set1_psf():
    0.00 :   c8b3:       vbroadcastss -0x44(%rax),%xmm10
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c8b9:       vfmadd132ps %xmm10,%xmm5,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          blA += pk*LhsProgress;
    0.00 :   c8be:       sub    $0xffffffffffffff80,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   c8c2:       add    $0x8,%r15
    0.00 :   c8c6:       sub    $0xffffffffffffff80,%rax
    0.00 :   c8ca:       cmp    %r15,%rbx
    0.00 :   c8cd:       jg     c700 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1940>
    0.00 :   c8d3:       mov    0xa0(%rsp),%rax
    0.00 :   c8db:       vaddps %xmm9,%xmm4,%xmm4
    0.00 :   c8e0:       vaddps %xmm7,%xmm3,%xmm3
         :          blA += pk*LhsProgress;
    0.00 :   c8e4:       mov    0x88(%rsp),%rdx
    0.00 :   c8ec:       vaddps %xmm6,%xmm2,%xmm2
    0.00 :   c8f0:       vaddps %xmm0,%xmm1,%xmm1
    0.00 :   c8f4:       add    %rsi,%rax
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c8f7:       cmp    %rbx,%r14
    0.00 :   c8fa:       jle    c93f <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1b7f>
    0.00 :   c8fc:       mov    %rbx,%r15
    0.00 :   c8ff:       nop
         :          _Z11_mm_load_psPKf():
         :          return *(__m128 *)__P;
    0.00 :   c900:       vmovaps (%rdx),%xmm0
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c904:       vbroadcastss (%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c909:       vfmadd231ps %xmm5,%xmm0,%xmm4
         :          _Z11_mm_set1_psf():
    0.00 :   c90e:       vbroadcastss 0x4(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c914:       vfmadd231ps %xmm5,%xmm0,%xmm3
         :          _Z11_mm_set1_psf():
    0.00 :   c919:       vbroadcastss 0x8(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c91f:       vfmadd231ps %xmm5,%xmm0,%xmm2
         :          _Z11_mm_set1_psf():
    0.00 :   c924:       vbroadcastss 0xc(%rax),%xmm5
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c92a:       vfmadd231ps %xmm5,%xmm0,%xmm1
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c92f:       inc    %r15
         :          blB += 4*RhsProgress;
    0.00 :   c932:       add    $0x10,%rax
         :          blA += LhsProgress;
    0.00 :   c936:       add    $0x10,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   c93a:       cmp    %r15,%r14
    0.00 :   c93d:       jne    c900 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1b40>
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c93f:       vfmadd213ps (%r12),%xmm8,%xmm4
    0.00 :   c945:       vfmadd213ps (%r11),%xmm8,%xmm3
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   c94a:       add    $0x4,%rcx
    0.00 :   c94e:       add    0x90(%rsp),%rsi
         :          _Z13_mm_storeu_psPfDv4_f():
         :
         :          /* Store four SPFP values.  The address need not be 16-byte aligned.  */
         :          extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_storeu_ps (float *__P, __m128 __A)
         :          {
         :          *(__m128_u *)__P = __A;
    0.00 :   c956:       vmovups %xmm4,(%r12)
    0.00 :   c95c:       vmovups %xmm3,(%r11)
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c961:       vfmadd213ps (%r10),%xmm8,%xmm2
    0.00 :   c966:       vfmadd213ps (%r9),%xmm8,%xmm1
         :          _Z13_mm_storeu_psPfDv4_f():
    0.00 :   c96b:       vmovups %xmm2,(%r10)
    0.00 :   c970:       vmovups %xmm1,(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   c975:       cmp    %rcx,0x40(%rsp)
    0.00 :   c97a:       jg     c660 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x18a0>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c980:       mov    0xa0(%rsp),%rax
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c988:       mov    0x48(%rsp),%rcx
    0.00 :   c98d:       lea    (%rdi,%rax,1),%r10
    0.00 :   c991:       mov    0x40(%rsp),%rax
    0.00 :   c996:       mov    %rax,%rsi
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   c999:       cmp    %rax,0x10(%rbp)
    0.00 :   c99d:       jle    caa5 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1ce5>
    0.00 :   c9a3:       mov    0x68(%rsp),%r12
    0.00 :   c9a8:       mov    0x10(%rbp),%r11
    0.00 :   c9ac:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c9b0:       mov    0x8(%r13),%rax
    0.00 :   c9b4:       mov    0x0(%r13),%rdx
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   c9b8:       mov    %rcx,%r15
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   c9bb:       prefetcht0 (%rdi)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   c9be:       imul   %rsi,%rax
    0.00 :   c9c2:       add    %r8,%rax
    0.00 :   c9c5:       lea    (%rdx,%rax,4),%r9
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   c9c9:       test   %rbx,%rbx
    0.00 :   c9cc:       jle    cf45 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2185>
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   c9d2:       mov    %rcx,%rdx
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   c9d5:       mov    %rdi,%rax
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi1EE7initAccERDv4_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   c9d8:       vxorps %xmm0,%xmm0,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   c9dc:       xor    %r15d,%r15d
    0.00 :   c9df:       nop
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   c9e0:       vbroadcastss (%rdx),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c9e5:       vfmadd231ps (%rax),%xmm1,%xmm0
         :          _Z11_mm_set1_psf():
    0.00 :   c9ea:       vbroadcastss 0x4(%rdx),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c9f0:       vfmadd132ps 0x10(%rax),%xmm0,%xmm1
         :          _Z11_mm_set1_psf():
    0.00 :   c9f6:       vbroadcastss 0x8(%rdx),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   c9fc:       vfmadd231ps 0x20(%rax),%xmm0,%xmm1
         :          _Z11_mm_set1_psf():
    0.00 :   ca02:       vbroadcastss 0xc(%rdx),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca08:       vfmadd132ps 0x30(%rax),%xmm1,%xmm0
         :          _Z11_mm_set1_psf():
    0.00 :   ca0e:       vbroadcastss 0x10(%rdx),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca14:       vfmadd231ps 0x40(%rax),%xmm1,%xmm0
         :          _Z11_mm_set1_psf():
    0.00 :   ca1a:       vbroadcastss 0x14(%rdx),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca20:       vfmadd132ps 0x50(%rax),%xmm0,%xmm1
         :          _Z11_mm_set1_psf():
    0.00 :   ca26:       vbroadcastss 0x18(%rdx),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca2c:       vfmadd231ps 0x60(%rax),%xmm0,%xmm1
         :          _Z11_mm_set1_psf():
    0.00 :   ca32:       vbroadcastss 0x1c(%rdx),%xmm0
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca38:       vfmadd132ps 0x70(%rax),%xmm1,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          blB += pk*RhsProgress;
    0.00 :   ca3e:       add    $0x20,%rdx
         :          blA += pk*LhsProgress;
    0.00 :   ca42:       sub    $0xffffffffffffff80,%rax
         :          for(Index k= 0; k<peeled_kc; k+=pk)
    0.00 :   ca46:       add    $0x8,%r15
    0.00 :   ca4a:       cmp    %r15,%rbx
    0.00 :   ca4d:       jg     c9e0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1c20>
    0.00 :   ca4f:       lea    (%rcx,%r12,1),%r15
         :          blA += pk*LhsProgress;
    0.00 :   ca53:       mov    %r10,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   ca56:       cmp    %rbx,%r14
    0.00 :   ca59:       jle    ca87 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1cc7>
    0.00 :   ca5b:       add    0x80(%rsp),%r15
    0.00 :   ca63:       mov    %rbx,%rax
    0.00 :   ca66:       nopw   %cs:0x0(%rax,%rax,1)
         :          _Z11_mm_set1_psf():
    0.00 :   ca70:       vbroadcastss (%r15,%rax,4),%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca76:       vfmadd231ps (%rdx),%xmm1,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   ca7b:       inc    %rax
         :          blA += LhsProgress;
    0.00 :   ca7e:       add    $0x10,%rdx
         :          for(Index k=peeled_kc; k<depth; k++)
    0.00 :   ca82:       cmp    %rax,%r14
    0.00 :   ca85:       jne    ca70 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1cb0>
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   ca87:       vfmadd213ps (%r9),%xmm8,%xmm0
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   ca8c:       inc    %rsi
    0.00 :   ca8f:       add    0x98(%rsp),%rcx
         :          _Z13_mm_storeu_psPfDv4_f():
         :          *(__m128_u *)__P = __A;
    0.00 :   ca97:       vmovups %xmm0,(%r9)
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
    0.00 :   ca9c:       cmp    %rsi,%r11
    0.00 :   ca9f:       jne    c9b0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1bf0>
         :          for(Index i=peelStart; i<peelEnd; i+=LhsProgress)
    0.00 :   caa5:       add    $0x4,%r8
    0.00 :   caa9:       add    0x70(%rsp),%rdi
    0.00 :   caae:       cmp    %r8,-0x40(%rsp)
    0.00 :   cab3:       jg     c634 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1874>
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          {
         :          lhs_process_fraction_of_packet<nr, LhsProgressQuarter, RhsProgressQuarter, LhsScalar, RhsScalar, ResScalar, AccPacketQuarter, LhsPacketQuarter, RhsPacketQuarter, ResPacketQuarter, QuarterTraits, LinearMapper, DataMapper> p;
         :          p(res, blockA, blockB, alpha, peeled_mc_half, peeled_mc_quarter, strideA, strideB, offsetA, offsetB, prefetch_res_offset, peeled_kc, pk, cols, depth, packet_cols4);
         :          }
         :          //---------- Process remaining rows, 1 at once ----------
         :          if(peeled_mc_quarter<rows)
    0.00 :   cab9:       mov    -0x20(%rsp),%rcx
    0.00 :   cabe:       cmp    %rcx,0x8(%rsp)
    0.00 :   cac3:       jle    ce95 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x20d5>
         :          {
         :          // loop on each panel of the rhs
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   cac9:       cmpq   $0x0,0x40(%rsp)
    0.00 :   cacf:       jle    cda4 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1fe4>
         :          straits.initAcc(C1);
         :          straits.initAcc(C2);
         :          straits.initAcc(C3);
         :
         :          const Index spk   = (std::max)(1,SwappedTraits::LhsProgress/4);
         :          const Index endk  = (depth/spk)*spk;
    0.00 :   cad5:       mov    %r14,%rax
         :          const Index endk4 = (depth/(spk*4))*(spk*4);
    0.00 :   cad8:       lea    0x7(%r14),%rsi
    0.00 :   cadc:       mov    %r14,%rdx
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
         :          template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_UNALIGNED_STORE _mm_storeu_si128(reinterpret_cast<__m128i*>(to), from); }
         :          template<> EIGEN_STRONG_INLINE void pstoreu<bool>(bool*     to, const Packet16b& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_storeu_si128(reinterpret_cast<__m128i*>(to), from); }
         :
         :          template<> EIGEN_DEVICE_FUNC inline Packet4f pgather<float, Packet4f>(const float* from, Index stride)
         :          {
         :          return _mm_set_ps(from[3*stride], from[2*stride], from[1*stride], from[0*stride]);
    0.00 :   cadf:       mov    %r13,0x28(%rsp)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const Index endk  = (depth/spk)*spk;
    0.00 :   cae4:       shr    $0x3f,%rax
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
    0.00 :   cae8:       mov    %r14,0x20(%rsp)
    0.00 :   caed:       vbroadcastss -0x14(%rsp),%xmm3
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   caf4:       movq   $0x0,0x78(%rsp)
         :          const Index endk  = (depth/spk)*spk;
    0.00 :   cafd:       add    %r14,%rax
    0.00 :   cb00:       and    $0xfffffffffffffffe,%rax
         :          const Index endk4 = (depth/(spk*4))*(spk*4);
    0.00 :   cb04:       test   %r14,%r14
    0.00 :   cb07:       cmovns %r14,%rsi
    0.00 :   cb0b:       shr    $0x3f,%rdx
         :          const Index endk  = (depth/spk)*spk;
    0.00 :   cb0f:       mov    %rax,%r11
    0.00 :   cb12:       lea    (%r14,%rdx,1),%rax
    0.00 :   cb16:       and    $0x1,%eax
         :          const Index endk4 = (depth/(spk*4))*(spk*4);
    0.00 :   cb19:       and    $0xfffffffffffffff8,%rsi
    0.00 :   cb1d:       sub    %rdx,%rax
    0.00 :   cb20:       mov    %rax,0x88(%rsp)
    0.00 :   cb28:       mov    $0x4,%eax
    0.00 :   cb2d:       shlx   %rax,0x20(%rbp),%rcx
    0.00 :   cb33:       shlx   %rax,0x30(%rbp),%r15
    0.00 :   cb39:       mov    0x18(%rbp),%rax
    0.00 :   cb3d:       add    -0x10(%rsp),%r15
    0.00 :   cb42:       mov    %rcx,0x70(%rsp)
    0.00 :   cb47:       mov    -0x8(%rsp),%rcx
    0.00 :   cb4c:       shl    $0x2,%rax
    0.00 :   cb50:       mov    %rax,0xa0(%rsp)
    0.00 :   cb58:       mov    -0x20(%rsp),%rax
    0.00 :   cb5d:       imul   0x18(%rbp),%rax
    0.00 :   cb62:       add    0x28(%rbp),%rax
    0.00 :   cb66:       lea    (%rcx,%rax,4),%rax
    0.00 :   cb6a:       mov    %rax,0x68(%rsp)
    0.00 :   cb6f:       lea    -0x1(%rsi),%rax
    0.00 :   cb73:       shr    $0x3,%rax
    0.00 :   cb77:       inc    %rax
    0.00 :   cb7a:       mov    %rax,%rcx
    0.00 :   cb7d:       shl    $0x7,%rcx
    0.00 :   cb81:       mov    %rcx,0x38(%rsp)
    0.00 :   cb86:       mov    %rax,%rcx
    0.00 :   cb89:       shl    $0x3,%rax
    0.00 :   cb8d:       mov    %rax,0x90(%rsp)
    0.00 :   cb95:       mov    0x0(%r13),%rax
    0.00 :   cb99:       shl    $0x5,%rcx
    0.00 :   cb9d:       mov    %rcx,0x98(%rsp)
    0.00 :   cba5:       lea    -0x1(%r11),%rcx
    0.00 :   cba9:       mov    %rax,0x80(%rsp)
    0.00 :   cbb1:       mov    0x8(%r13),%rax
    0.00 :   cbb5:       mov    %rcx,0x48(%rsp)
    0.00 :   cbba:       mov    %rax,0x30(%rsp)
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
    0.00 :   cbbf:       lea    0x0(,%rax,4),%rbx
    0.00 :   cbc7:       mov    0x38(%rsp),%rax
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   cbcc:       mov    0x30(%rsp),%r12
    0.00 :   cbd1:       imul   0x78(%rsp),%r12
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   cbd7:       mov    0x68(%rsp),%rdi
    0.00 :   cbdc:       mov    -0x20(%rsp),%r10
    0.00 :   cbe1:       lea    (%r15,%rax,1),%r13
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA];
    0.00 :   cbe5:       mov    %rdi,%r8
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   cbe8:       prefetcht0 (%rdi)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :
         :          Index k=0;
         :          for(; k<endk4; k+=4*spk)
    0.00 :   cbeb:       test   %rsi,%rsi
    0.00 :   cbee:       jle    d034 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2274>
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cbf4:       vxorps %xmm6,%xmm6,%xmm6
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA];
    0.00 :   cbf8:       mov    %rdi,%rax
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   cbfb:       mov    %r15,%rdx
         :          Index k=0;
    0.00 :   cbfe:       xor    %ecx,%ecx
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cc00:       vmovaps %ymm6,%ymm2
    0.00 :   cc04:       vmovaps %ymm6,%ymm5
    0.00 :   cc08:       vmovaps %ymm6,%ymm4
    0.00 :   cc0c:       nopl   0x0(%rax)
         :          _Z16_mm_broadcast_ssPKf():
         :          return (__m128) __builtin_ia32_vbroadcastss (__X);
    0.00 :   cc10:       vbroadcastss 0x4(%rax),%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(; k<endk4; k+=4*spk)
    0.00 :   cc16:       add    $0x8,%rcx
         :          straits.loadRhsQuad(blA+2*spk, B_0);
         :          straits.loadRhsQuad(blA+3*spk, B_1);
         :          straits.madd(A0,B_0,C2,B_0, fix<0>);
         :          straits.madd(A1,B_1,C3,B_1, fix<0>);
         :
         :          blB += 4*SwappedTraits::LhsProgress;
    0.00 :   cc1a:       sub    $0xffffffffffffff80,%rdx
         :          blA += 4*spk;
    0.00 :   cc1e:       add    $0x20,%rax
         :          _Z16_mm_broadcast_ssPKf():
    0.00 :   cc22:       vbroadcastss -0x20(%rax),%xmm1
    0.00 :   cc28:       vbroadcastss -0x14(%rax),%xmm7
         :          _Z20_mm256_insertf128_psDv8_fDv4_fi():
         :          return (__m256) __builtin_ia32_vinsertf128_ps256 ((__v8sf)__X,
    0.00 :   cc2e:       vinsertf128 $0x1,%xmm0,%ymm1,%ymm1
         :          _Z16_mm_broadcast_ssPKf():
         :          return (__m128) __builtin_ia32_vbroadcastss (__X);
    0.00 :   cc34:       vbroadcastss -0x18(%rax),%xmm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
         :          return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
    0.00 :   cc3a:       vfmadd231ps -0x80(%rdx),%ymm1,%ymm4
         :          _Z16_mm_broadcast_ssPKf():
    0.00 :   cc40:       vbroadcastss -0x10(%rax),%xmm1
         :          _Z20_mm256_insertf128_psDv8_fDv4_fi():
         :          return (__m256) __builtin_ia32_vinsertf128_ps256 ((__v8sf)__X,
    0.00 :   cc46:       vinsertf128 $0x1,%xmm7,%ymm0,%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   cc4c:       vfmadd231ps -0x60(%rdx),%ymm0,%ymm5
         :          _Z16_mm_broadcast_ssPKf():
         :          return (__m128) __builtin_ia32_vbroadcastss (__X);
    0.00 :   cc52:       vbroadcastss -0xc(%rax),%xmm0
    0.00 :   cc58:       vbroadcastss -0x4(%rax),%xmm7
         :          _Z20_mm256_insertf128_psDv8_fDv4_fi():
         :          return (__m256) __builtin_ia32_vinsertf128_ps256 ((__v8sf)__X,
    0.00 :   cc5e:       vinsertf128 $0x1,%xmm0,%ymm1,%ymm1
         :          _Z16_mm_broadcast_ssPKf():
         :          return (__m128) __builtin_ia32_vbroadcastss (__X);
    0.00 :   cc64:       vbroadcastss -0x8(%rax),%xmm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   cc6a:       vfmadd231ps -0x40(%rdx),%ymm1,%ymm2
         :          _Z20_mm256_insertf128_psDv8_fDv4_fi():
         :          return (__m256) __builtin_ia32_vinsertf128_ps256 ((__v8sf)__X,
    0.00 :   cc70:       vinsertf128 $0x1,%xmm7,%ymm0,%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   cc76:       vfmadd231ps -0x20(%rdx),%ymm0,%ymm6
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(; k<endk4; k+=4*spk)
    0.00 :   cc7c:       cmp    %rcx,%rsi
    0.00 :   cc7f:       jg     cc10 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1e50>
    0.00 :   cc81:       vaddps %ymm6,%ymm2,%ymm1
    0.00 :   cc85:       vaddps %ymm5,%ymm4,%ymm4
         :          blB += 4*SwappedTraits::LhsProgress;
    0.00 :   cc89:       mov    %r13,%r9
    0.00 :   cc8c:       mov    0x98(%rsp),%rax
         :          for(; k<endk4; k+=4*spk)
    0.00 :   cc94:       mov    0x90(%rsp),%r14
    0.00 :   cc9c:       lea    (%rdi,%rax,1),%r8
    0.00 :   cca0:       vaddps %ymm4,%ymm1,%ymm1
         :          }
         :          C0 = padd(padd(C0,C1),padd(C2,C3));
         :          for(; k<endk; k+=spk)
    0.00 :   cca4:       cmp    %r14,%r11
    0.00 :   cca7:       jle    ccfc <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1f3c>
    0.00 :   cca9:       mov    %r8,%rax
    0.00 :   ccac:       mov    %r9,%rcx
    0.00 :   ccaf:       mov    %r14,%rdx
    0.00 :   ccb2:       nopw   0x0(%rax,%rax,1)
         :          _Z16_mm_broadcast_ssPKf():
         :          return (__m128) __builtin_ia32_vbroadcastss (__X);
    0.00 :   ccb8:       vbroadcastss (%rax),%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   ccbd:       add    $0x2,%rdx
         :
         :          straits.loadLhsUnaligned(blB, A0);
         :          straits.loadRhsQuad(blA, B_0);
         :          straits.madd(A0,B_0,C0,B_0, fix<0>);
         :
         :          blB += SwappedTraits::LhsProgress;
    0.00 :   ccc1:       add    $0x20,%rcx
         :          blA += spk;
    0.00 :   ccc5:       add    $0x8,%rax
         :          _Z16_mm_broadcast_ssPKf():
    0.00 :   ccc9:       vbroadcastss -0x4(%rax),%xmm2
         :          _Z20_mm256_insertf128_psDv8_fDv4_fi():
         :          return (__m256) __builtin_ia32_vinsertf128_ps256 ((__v8sf)__X,
    0.00 :   cccf:       vinsertf128 $0x1,%xmm2,%ymm0,%ymm0
         :          _Z15_mm256_fmadd_psDv8_fS_S_():
    0.00 :   ccd5:       vfmadd231ps -0x20(%rcx),%ymm0,%ymm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(; k<endk; k+=spk)
    0.00 :   ccdb:       cmp    %rdx,%r11
    0.00 :   ccde:       jg     ccb8 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1ef8>
    0.00 :   cce0:       mov    0x48(%rsp),%rax
    0.00 :   cce5:       sub    %r14,%rax
    0.00 :   cce8:       shr    %rax
    0.00 :   cceb:       inc    %rax
    0.00 :   ccee:       mov    %rax,%rdx
    0.00 :   ccf1:       lea    (%r8,%rax,8),%r8
    0.00 :   ccf5:       shl    $0x5,%rdx
    0.00 :   ccf9:       add    %rdx,%r9
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   ccfc:       mov    0x80(%rsp),%rcx
    0.00 :   cd04:       lea    (%r12,%r10,1),%rax
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          typedef typename conditional<SwappedTraits::LhsProgress>=8,typename unpacket_traits<SAccPacket>::half,SAccPacket>::type SAccPacketHalf;
         :
         :          SResPacketHalf R = res.template gatherPacket<SResPacketHalf>(i, j2);
         :          SResPacketHalf alphav = pset1<SResPacketHalf>(alpha);
         :
         :          if(depth-endk>0)
    0.00 :   cd08:       cmpq   $0x1,0x88(%rsp)
         :          _ZNK5Eigen8internal16blas_data_mapperIflLi0ELi0ELi1EEclEll():
    0.00 :   cd11:       lea    (%rcx,%rax,4),%rcx
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
    0.00 :   cd15:       lea    (%rcx,%rbx,1),%rdx
         :          _Z10_mm_set_psffff():
         :          return __extension__ (__m128)(__v4sf){ __W, __X, __Y, __Z };
    0.00 :   cd19:       vmovss (%rcx),%xmm0
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
    0.00 :   cd1d:       lea    (%rdx,%rbx,1),%rax
         :          _Z10_mm_set_psffff():
    0.00 :   cd21:       vinsertps $0x10,(%rdx),%xmm0,%xmm0
    0.00 :   cd27:       vmovss (%rax),%xmm2
    0.00 :   cd2b:       vinsertps $0x10,(%rax,%rbx,1),%xmm2,%xmm2
         :          _ZN5Eigen8internal7pgatherIfDv4_fEET0_PKT_l():
    0.00 :   cd32:       lea    (%rax,%rbx,1),%r14
         :          _Z10_mm_set_psffff():
    0.00 :   cd36:       vmovlhps %xmm2,%xmm0,%xmm2
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   cd3a:       je     cfe0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2220>
         :          _Z21_mm256_extractf128_psDv8_fi():
         :          return (__m128) __builtin_ia32_vextractf128_ps256 ((__v8sf)__X, __N);
    0.00 :   cd40:       vextractf128 $0x1,%ymm1,%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=peeled_mc_quarter; i<rows; i+=1)
    0.00 :   cd46:       inc    %r10
    0.00 :   cd49:       add    0xa0(%rsp),%rdi
         :          _Z10_mm_add_psDv4_fS_():
         :          return (__m128) ((__v4sf)__A + (__v4sf)__B);
    0.00 :   cd51:       vaddps %xmm1,%xmm0,%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
         :          return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,
    0.00 :   cd55:       vmovaps %xmm1,%xmm0
    0.00 :   cd59:       vfmadd132ps %xmm3,%xmm2,%xmm0
         :          _ZN5Eigen8internal8pscatterIfDv4_fEEvPT_RKT0_l():
         :          from[3*stride], from[2*stride], from[1*stride], from[0*stride]);
         :          }
         :
         :          template<> EIGEN_DEVICE_FUNC inline void pscatter<float, Packet4f>(float* to, const Packet4f& from, Index stride)
         :          {
         :          to[stride*0] = _mm_cvtss_f32(from);
    0.00 :   cd5e:       vmovss %xmm0,(%rcx)
         :          to[stride*1] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 1));
    0.00 :   cd62:       vextractps $0x1,%xmm0,(%rdx)
         :          to[stride*2] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 2));
    0.00 :   cd68:       vextractps $0x2,%xmm0,(%rax)
         :          to[stride*3] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 3));
    0.00 :   cd6e:       vextractps $0x3,%xmm0,(%r14)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   cd74:       cmp    %r10,0x8(%rsp)
    0.00 :   cd79:       jne    cbe5 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1e25>
         :          for(Index j2=0; j2<packet_cols4; j2+=nr)
    0.00 :   cd7f:       addq   $0x4,0x78(%rsp)
    0.00 :   cd85:       add    0x70(%rsp),%r15
    0.00 :   cd8a:       mov    0x78(%rsp),%rax
    0.00 :   cd8f:       cmp    %rax,0x40(%rsp)
    0.00 :   cd94:       jg     cbc7 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1e07>
    0.00 :   cd9a:       mov    0x28(%rsp),%r13
    0.00 :   cd9f:       mov    0x20(%rsp),%r14
         :          res(i, j2 + 3) += alpha * C3;
         :          }
         :          }
         :          }
         :          // remaining columns
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   cda4:       mov    0x40(%rsp),%rax
    0.00 :   cda9:       cmp    %rax,0x10(%rbp)
    0.00 :   cdad:       jle    ce95 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x20d5>
    0.00 :   cdb3:       mov    %rax,%rdi
    0.00 :   cdb6:       mov    0x8(%r13),%rax
    0.00 :   cdba:       mov    0x30(%rbp),%rsi
    0.00 :   cdbe:       vxorps %xmm1,%xmm1,%xmm1
    0.00 :   cdc2:       mov    0x8(%rsp),%r10
    0.00 :   cdc7:       mov    0x0(%r13),%rcx
    0.00 :   cdcb:       lea    0x0(,%rax,4),%rdx
    0.00 :   cdd3:       mov    -0x20(%rsp),%rbx
    0.00 :   cdd8:       mov    -0x8(%rsp),%r11
    0.00 :   cddd:       imul   %rdi,%rax
    0.00 :   cde1:       vmovss -0x14(%rsp),%xmm2
    0.00 :   cde7:       imul   0x20(%rbp),%rdi
    0.00 :   cdec:       add    %r10,%rax
    0.00 :   cdef:       add    %rdi,%rsi
    0.00 :   cdf2:       mov    -0x10(%rsp),%rdi
    0.00 :   cdf7:       lea    (%rcx,%rax,4),%rax
    0.00 :   cdfb:       mov    0x20(%rbp),%rcx
    0.00 :   cdff:       lea    (%rdi,%rsi,4),%r8
    0.00 :   ce03:       mov    0x18(%rbp),%rsi
    0.00 :   ce07:       mov    0x18(%rbp),%rdi
    0.00 :   ce0b:       shl    $0x2,%rcx
    0.00 :   ce0f:       imul   %rbx,%rsi
    0.00 :   ce13:       sub    %r10,%rbx
    0.00 :   ce16:       add    0x28(%rbp),%rsi
    0.00 :   ce1a:       shl    $0x2,%rdi
    0.00 :   ce1e:       lea    (%r11,%rsi,4),%r11
    0.00 :   ce22:       mov    %rbx,%r13
    0.00 :   ce25:       shl    $0x2,%r13
    0.00 :   ce29:       lea    (%r11,%r14,4),%r15
    0.00 :   ce2d:       lea    (%rax,%r13,1),%rbx
         :          for(; k<endk; k+=spk)
    0.00 :   ce31:       mov    %r15,%r10
    0.00 :   ce34:       mov    %r11,%r12
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   ce37:       prefetcht0 (%r12)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA];
         :          prefetch(&blA[0]);
         :          // gets a 1 x 1 res block as registers
         :          ResScalar C0(0);
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
         :          for(Index k=0; k<depth; k++)
    0.00 :   ce3c:       test   %r14,%r14
    0.00 :   ce3f:       jle    d043 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2283>
    0.00 :   ce45:       mov    %r8,%r9
    0.00 :   ce48:       mov    %r12,%rsi
         :          ResScalar C0(0);
    0.00 :   ce4b:       vmovaps %xmm1,%xmm0
    0.00 :   ce4f:       nop
         :          _ZN5Eigen8internal5pmaddIfEET_RKS2_S4_S4_():
         :          }
         :
         :          // Scalar path for pmadd with FMA to ensure consistency with vectorized path.
         :          #ifdef EIGEN_VECTORIZE_FMA
         :          template<> EIGEN_STRONG_INLINE float pmadd(const float& a, const float& b, const float& c) {
         :          return ::fmaf(a,b,c);
    0.00 :   ce50:       vmovss (%rsi),%xmm6
    0.00 :   ce54:       add    $0x4,%rsi
    0.00 :   ce58:       vfmadd231ss (%r9),%xmm6,%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index k=0; k<depth; k++)
    0.00 :   ce5d:       add    $0x4,%r9
    0.00 :   ce61:       cmp    %rsi,%r10
    0.00 :   ce64:       jne    ce50 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2090>
         :          {
         :          LhsScalar A0 = blA[k];
         :          RhsScalar B_0 = blB[k];
         :          C0 = cj.pmadd(A0, B_0, C0);
         :          }
         :          res(i, j2) += alpha * C0;
    0.00 :   ce66:       vfmadd213ss (%rbx),%xmm2,%xmm0
    0.00 :   ce6b:       add    $0x4,%rbx
    0.00 :   ce6f:       add    %rdi,%r12
    0.00 :   ce72:       add    %rdi,%r10
    0.00 :   ce75:       vmovss %xmm0,-0x4(%rbx)
         :          for(Index i=peeled_mc_quarter; i<rows; i+=1)
    0.00 :   ce7a:       cmp    %rbx,%rax
    0.00 :   ce7d:       jne    ce37 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x2077>
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   ce7f:       incq   0x40(%rsp)
    0.00 :   ce84:       add    %rdx,%rax
    0.00 :   ce87:       mov    0x40(%rsp),%rbx
    0.00 :   ce8c:       add    %rcx,%r8
    0.00 :   ce8f:       cmp    %rbx,0x10(%rbp)
    0.00 :   ce93:       jne    ce2d <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x206d>
    0.00 :   ce95:       vzeroupper
         :          }
         :          }
         :          }
         :          }
    0.00 :   ce98:       lea    -0x28(%rbp),%rsp
    0.00 :   ce9c:       pop    %rbx
    0.00 :   ce9d:       pop    %r12
    0.00 :   ce9f:       pop    %r13
    0.00 :   cea1:       pop    %r14
    0.00 :   cea3:       pop    %r15
    0.00 :   cea5:       pop    %rbp
    0.00 :   cea6:       retq
    0.00 :   cea7:       nopw   0x0(%rax,%rax,1)
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   ceb0:       vxorps %xmm1,%xmm1,%xmm1
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   ceb4:       mov    %r9,%r15
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   ceb7:       vmovaps %ymm1,%ymm0
    0.00 :   cebb:       jmpq   bfb0 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x11f0>
    0.00 :   cec0:       vxorps %xmm0,%xmm0,%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   cec4:       mov    %r11,%rax
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cec7:       vmovaps %ymm0,%ymm3
    0.00 :   cecb:       vmovaps %ymm0,%ymm5
    0.00 :   cecf:       vmovaps %ymm0,%ymm6
    0.00 :   ced3:       vmovaps %ymm0,%ymm4
    0.00 :   ced7:       vmovaps %ymm0,%ymm7
    0.00 :   cedb:       vmovaps %ymm0,%ymm8
    0.00 :   cedf:       vmovaps %ymm0,%ymm2
    0.00 :   cee3:       jmpq   bd86 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xfc6>
    0.00 :   cee8:       nopl   0x0(%rax,%rax,1)
    0.00 :   cef0:       vxorps %xmm3,%xmm3,%xmm3
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB];
    0.00 :   cef4:       mov    %r9,%r15
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cef7:       vmovaps %ymm3,%ymm0
    0.00 :   cefb:       vmovaps %ymm3,%ymm1
    0.00 :   ceff:       jmpq   b808 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xa48>
    0.00 :   cf04:       nopl   0x0(%rax)
    0.00 :   cf08:       vxorps %xmm9,%xmm9,%xmm9
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   cf0d:       mov    %r11,%rdx
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cf10:       vmovaps %ymm9,%ymm13
    0.00 :   cf15:       vmovaps %ymm9,%ymm14
    0.00 :   cf1a:       vmovaps %ymm9,%ymm11
    0.00 :   cf1f:       vmovaps %ymm9,%ymm6
    0.00 :   cf23:       vmovaps %ymm9,%ymm2
    0.00 :   cf27:       vmovaps %ymm9,%ymm0
    0.00 :   cf2b:       vmovaps %ymm9,%ymm1
    0.00 :   cf2f:       vmovaps %ymm9,%ymm5
    0.00 :   cf33:       vmovaps %ymm9,%ymm10
    0.00 :   cf38:       vmovaps %ymm9,%ymm3
    0.00 :   cf3c:       vmovaps %ymm9,%ymm4
    0.00 :   cf40:       jmpq   b516 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x756>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   cf45:       mov    %rdi,%rdx
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi1EE7initAccERDv4_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cf48:       vxorps %xmm0,%xmm0,%xmm0
    0.00 :   cf4c:       jmpq   ca56 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1c96>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl4ELl1EfffDv4_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi1EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   cf51:       vxorps %xmm1,%xmm1,%xmm1
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   cf55:       mov    %rdi,%rdx
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   cf58:       vmovaps %xmm1,%xmm2
    0.00 :   cf5c:       vmovaps %xmm1,%xmm3
    0.00 :   cf60:       vmovaps %xmm1,%xmm4
    0.00 :   cf64:       jmpq   c8f7 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1b37>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA*(LhsProgress)];
    0.00 :   cf69:       mov    %rdi,%rdx
         :          _ZN5Eigen8internal11gebp_traitsIffLb0ELb0ELi1ELi0EE7initAccERDv8_f():
         :          p = pset1<ResPacket>(ResScalar(0));
    0.00 :   cf6c:       vxorps %xmm0,%xmm0,%xmm0
    0.00 :   cf70:       jmpq   c514 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1754>
         :          _ZN5Eigen8internal22lhs_process_one_packetILi4ELl8ELl1EfffDv8_fS2_S2_S2_NS0_11gebp_traitsIffLb0ELb0ELi1ELi0EEENS0_16BlasLinearMapperIflLi0ELi1EEENS0_16blas_data_mapperIflLi0ELi0ELi1EEEEclERKS8_PKfSD_fllllllilllll():
         :          for(Index k=0; k<peeled_kc; k+=pk)
    0.00 :   cf75:       vxorps %xmm1,%xmm1,%xmm1
    0.00 :   cf79:       vmovaps %ymm1,%ymm2
    0.00 :   cf7d:       vmovaps %ymm1,%ymm3
    0.00 :   cf81:       vmovaps %ymm1,%ymm4
    0.00 :   cf85:       jmpq   c39b <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x15db>
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   cf8a:       mov    0x40(%rsp),%rax
    0.00 :   cf8f:       cmp    %rax,0x10(%rbp)
    0.00 :   cf93:       jle    c018 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1258>
    0.00 :   cf99:       mov    0x68(%rsp),%rcx
    0.00 :   cf9e:       cmp    %rcx,0xa0(%rsp)
    0.00 :   cfa6:       jg     be7e <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x10be>
    0.00 :   cfac:       jmpq   c018 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1258>
    0.00 :   cfb1:       nopl   0x0(%rax)
         :          for(Index j2=packet_cols4; j2<cols; j2++)
    0.00 :   cfb8:       mov    0x40(%rsp),%rax
    0.00 :   cfbd:       cmp    %rax,0x10(%rbp)
    0.00 :   cfc1:       jle    b881 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xac1>
    0.00 :   cfc7:       mov    0x38(%rsp),%rcx
    0.00 :   cfcc:       cmp    %rcx,0xa0(%rsp)
    0.00 :   cfd4:       jg     b67e <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x8be>
    0.00 :   cfda:       jmpq   b881 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0xac1>
    0.00 :   cfdf:       nop
         :          _Z21_mm256_extractf128_psDv8_fi():
    0.00 :   cfe0:       vextractf128 $0x1,%ymm1,%xmm4
         :          _Z11_mm_set1_psf():
         :          return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };
    0.00 :   cfe6:       vbroadcastss (%r8),%xmm0
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(Index i=peeled_mc_quarter; i<rows; i+=1)
    0.00 :   cfeb:       inc    %r10
    0.00 :   cfee:       add    0xa0(%rsp),%rdi
         :          _Z10_mm_add_psDv4_fS_():
         :          return (__m128) ((__v4sf)__A + (__v4sf)__B);
    0.00 :   cff6:       vaddps %xmm1,%xmm4,%xmm1
         :          _Z12_mm_fmadd_psDv4_fS_S_():
    0.00 :   cffa:       vfmadd132ps (%r9),%xmm1,%xmm0
    0.00 :   cfff:       vfmadd132ps %xmm3,%xmm2,%xmm0
         :          _ZN5Eigen8internal8pscatterIfDv4_fEEvPT_RKT0_l():
         :          to[stride*0] = _mm_cvtss_f32(from);
    0.00 :   d004:       vmovss %xmm0,(%rcx)
         :          to[stride*1] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 1));
    0.00 :   d008:       vextractps $0x1,%xmm0,(%rdx)
         :          to[stride*2] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 2));
    0.00 :   d00e:       vextractps $0x2,%xmm0,(%rax)
         :          to[stride*3] = _mm_cvtss_f32(_mm_shuffle_ps(from, from, 3));
    0.00 :   d014:       vextractps $0x3,%xmm0,(%r14)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
    0.00 :   d01a:       cmp    0x8(%rsp),%r10
    0.00 :   d01f:       je     cd7f <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1fbf>
         :          const LhsScalar* blA = &blockA[i*strideA+offsetA];
    0.00 :   d025:       mov    %rdi,%r8
         :          _Z12_mm_prefetchPKv8_mm_hint():
         :          __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);
    0.00 :   d028:       prefetcht0 (%rdi)
         :          _ZN5Eigen8internal11gebp_kernelIfflNS0_16blas_data_mapperIflLi0ELi0ELi1EEELi24ELi4ELb0ELb0EEclERKS3_PKfS8_lllfllll():
         :          for(; k<endk4; k+=4*spk)
    0.00 :   d02b:       test   %rsi,%rsi
    0.00 :   d02e:       jg     cbf4 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1e34>
         :          const RhsScalar* blB = &blockB[j2*strideB+offsetB*nr];
    0.00 :   d034:       mov    %r15,%r9
         :          for(; k<endk4; k+=4*spk)
    0.00 :   d037:       vxorps %xmm1,%xmm1,%xmm1
         :          Index k=0;
    0.00 :   d03b:       xor    %r14d,%r14d
    0.00 :   d03e:       jmpq   cca4 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x1ee4>
         :          ResScalar C0(0);
    0.00 :   d043:       vmovaps %xmm1,%xmm0
    0.00 :   d047:       jmpq   ce66 <Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0, 1>, 24, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<float, long, 0, 0, 1> const&, float const*, float const*, long, long, long, float, long, long, long, long)+0x20a6>
    0.00 :   d04c:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (41 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          00000000000065c0 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]>:
         :          _ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll():
         :          typedef typename unpacket_traits<typename unpacket_traits<Packet>::half>::half QuarterPacket;
         :          typedef typename DataMapper::LinearMapper LinearMapper;
         :          enum { PacketSize = packet_traits<Scalar>::size,
         :          HalfPacketSize = unpacket_traits<HalfPacket>::size,
         :          QuarterPacketSize = unpacket_traits<QuarterPacket>::size};
         :          EIGEN_DONT_INLINE void operator()(Scalar* blockB, const DataMapper& rhs, Index depth, Index cols, Index stride=0, Index offset=0)
    0.00 :   65c0:       push   %r12
    0.00 :   65c2:       push   %rbp
    0.00 :   65c3:       mov    %rdi,%rbp
    0.00 :   65c6:       push   %rbx
    0.00 :   65c7:       mov    %rcx,%rbx
         :          eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));
         :          const bool HasHalf = (int)HalfPacketSize < (int)PacketSize;
         :          const bool HasQuarter = (int)QuarterPacketSize < (int)HalfPacketSize;
         :          conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;
         :          Index packet_cols8 = nr>=8 ? (cols/8) * 8 : 0;
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   65ca:       add    $0x3,%rcx
    0.00 :   65ce:       test   %rbx,%rbx
    0.00 :   65d1:       cmovns %rbx,%rcx
         :          //       if(PanelMode) count += 8 * (stride-offset-depth);
         :          //     }
         :          //   }
         :          if(nr>=4)
         :          {
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   65d5:       and    $0xfffffffffffffffc,%rcx
    0.00 :   65d9:       jle    6691 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xd1>
    0.00 :   65df:       lea    -0x4(,%rdx,4),%r12
         :          Index count = 0;
    0.00 :   65e7:       xor    %edi,%edi
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   65e9:       xor    %r11d,%r11d
    0.00 :   65ec:       nopl   0x0(%rax)
         :          {
         :          // skip what we have before
         :          if(PanelMode) count += 4 * offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   65f0:       lea    0x0(%rbp,%rdi,4),%r9
    0.00 :   65f5:       xor    %eax,%eax
    0.00 :   65f7:       test   %rdx,%rdx
    0.00 :   65fa:       jle    662b <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x6b>
    0.00 :   65fc:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   6600:       mov    0x8(%rsi),%r8
         :          _Z15_mm_loadu_si128PKDv2_x():
         :          }
         :
         :          extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_loadu_si128 (__m128i_u const *__P)
         :          {
         :          return *__P;
    0.00 :   6604:       mov    (%rsi),%r10
    0.00 :   6607:       add    $0x10,%r9
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    2.64 :   660b:       imul   %rax,%r8
         :          _ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll():
    0.00 :   660f:       inc    %rax
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    2.63 :   6612:       add    %r11,%r8
         :          _Z15_mm_loadu_si128PKDv2_x():
    4.54 :   6615:       vmovdqu (%r10,%r8,4),%xmm0
   81.25 :   661b:       vmovups %xmm0,-0x10(%r9)
         :          _ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll():
    8.95 :   6621:       cmp    %rax,%rdx
    0.00 :   6624:       jne    6600 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x40>
    0.00 :   6626:       lea    0x4(%rdi,%r12,1),%rdi
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   662b:       add    $0x4,%r11
    0.00 :   662f:       cmp    %r11,%rcx
    0.00 :   6632:       jg     65f0 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x30>
         :          // skip what we have after
         :          if(PanelMode) count += 4 * (stride-offset-depth);
         :          }
         :          }
         :          // copy the remaining columns one at a time (nr==1)
         :          for(Index j2=packet_cols4; j2<cols; ++j2)
    0.00 :   6634:       cmp    %rcx,%rbx
    0.00 :   6637:       jle    668c <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xcc>
    0.00 :   6639:       test   %rdx,%rdx
    0.00 :   663c:       jle    668c <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xcc>
    0.00 :   663e:       mov    0x8(%rsi),%r9
    0.00 :   6642:       add    %rdx,%rdi
    0.00 :   6645:       lea    0x0(,%rdx,4),%r10
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   664d:       mov    (%rsi),%r11
    0.00 :   6650:       neg    %rdx
    0.00 :   6653:       lea    0x0(%rbp,%rdi,4),%r8
    0.00 :   6658:       shl    $0x2,%r9
    0.00 :   665c:       lea    0x0(,%rdx,4),%rdi
    0.00 :   6664:       nopl   0x0(%rax)
         :          _ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll():
         :          {
         :          if(PanelMode) count += offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   6668:       lea    (%r11,%rcx,4),%rdx
    0.00 :   666c:       lea    (%rdi,%r8,1),%rax
         :          {
         :          blockB[count] = cj(rhs(k, j2));
    0.00 :   6670:       mov    (%rdx),%esi
    0.00 :   6672:       add    $0x4,%rax
    0.00 :   6676:       add    %r9,%rdx
    0.00 :   6679:       mov    %esi,-0x4(%rax)
         :          for(Index k=0; k<depth; k++)
    0.00 :   667c:       cmp    %rax,%r8
    0.00 :   667f:       jne    6670 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xb0>
         :          for(Index j2=packet_cols4; j2<cols; ++j2)
    0.00 :   6681:       inc    %rcx
    0.00 :   6684:       add    %r10,%r8
    0.00 :   6687:       cmp    %rcx,%rbx
    0.00 :   668a:       jne    6668 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xa8>
         :          count += 1;
         :          }
         :          if(PanelMode) count += stride-offset-depth;
         :          }
         :          }
    0.00 :   668c:       pop    %rbx
    0.00 :   668d:       pop    %rbp
    0.00 :   668e:       pop    %r12
    0.00 :   6690:       retq
         :          Index count = 0;
    0.00 :   6691:       xor    %edi,%edi
    0.00 :   6693:       jmp    6634 <Eigen::internal::gemm_pack_rhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 4, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x74>
         :          _ZN5Eigen8internal13gemm_pack_rhsIilNS0_22const_blas_data_mapperIilLi1EEELi4ELi1ELb0ELb0EEclEPiRKS3_llll.constprop.0():
    0.00 :   6695:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   669f:       nop
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (18 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000005a40 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]>:
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          typedef typename DataMapper::LinearMapper LinearMapper;
         :          EIGEN_DONT_INLINE void operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride=0, Index offset=0);
         :          };
         :
         :          template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>
         :          EIGEN_DONT_INLINE void gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, RowMajor, Conjugate, PanelMode>
    0.00 :   5a40:       push   %rbp
    0.00 :   5a41:       mov    %rsp,%rbp
    0.00 :   5a44:       push   %r15
    0.00 :   5a46:       mov    %rsi,%r15
    0.00 :   5a49:       push   %r14
    0.00 :   5a4b:       push   %r13
    0.00 :   5a4d:       push   %r12
    0.00 :   5a4f:       push   %rbx
    0.00 :   5a50:       and    $0xffffffffffffffe0,%rsp
    0.00 :   5a54:       sub    $0x88,%rsp
    0.00 :   5a5b:       mov    %rdi,-0x20(%rsp)
    0.00 :   5a60:       mov    %rdx,0x78(%rsp)
    0.00 :   5a65:       mov    %rcx,-0x48(%rsp)
         :          bool gone_half = false, gone_quarter = false, gone_last = false;
         :
         :          Index i = 0;
         :          int pack = Pack1;
         :          int psize = PacketSize;
         :          while(pack>0)
    0.00 :   5a6a:       lea    0x10(%rdi),%rax
         :          bool gone_half = false, gone_quarter = false, gone_last = false;
    0.00 :   5a6e:       movb   $0x0,0x2e(%rsp)
         :          Index count = 0;
    0.00 :   5a73:       xor    %r13d,%r13d
         :          int psize = PacketSize;
    0.00 :   5a76:       mov    $0x8,%r12d
         :          int pack = Pack1;
    0.00 :   5a7c:       movl   $0x18,-0x34(%rsp)
    0.00 :   5a84:       mov    %rax,0x50(%rsp)
         :          Index i = 0;
    0.00 :   5a89:       movq   $0x0,-0x40(%rsp)
    0.00 :   5a92:       mov    -0x40(%rsp),%rdi
         :          {
         :          Index remaining_rows = rows-i;
    0.00 :   5a97:       mov    -0x48(%rsp),%rax
         :          Index peeled_mc = gone_last ? Pack2>1 ? (rows/pack)*pack : 0 : i+(remaining_rows/pack)*pack;
    0.00 :   5a9c:       mov    -0x34(%rsp),%ebx
         :          Index remaining_rows = rows-i;
    0.00 :   5aa0:       sub    %rdi,%rax
         :          Index peeled_mc = gone_last ? Pack2>1 ? (rows/pack)*pack : 0 : i+(remaining_rows/pack)*pack;
    0.00 :   5aa3:       movslq %ebx,%r14
    0.00 :   5aa6:       cqto
    0.00 :   5aa8:       idiv   %r14
    0.00 :   5aab:       imul   %r14,%rax
    0.00 :   5aaf:       add    %rdi,%rax
    0.00 :   5ab2:       mov    %rax,-0x28(%rsp)
         :          Index starting_pos = i;
         :          for(; i<peeled_mc; i+=pack)
    0.00 :   5ab7:       cmp    %rdi,%rax
    0.00 :   5aba:       jle    61d3 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x793>
         :          {
         :          if(PanelMode) count += pack * offset;
         :
         :          Index k=0;
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5ac0:       cmp    %r12d,%ebx
         :          } else if (HasHalf && psize == HalfPacketSize) {
         :          gone_half = true;
         :          PacketBlock<HalfPacket> kernel_half;
         :          for (int p = 0; p < psize; ++p) kernel_half.packet[p] = lhs.template loadPacket<HalfPacket>(i+p+m, k);
         :          ptranspose(kernel_half);
         :          for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel_half.packet[p]));
    0.00 :   5ac3:       lea    (%rbx,%rbx,1),%ecx
         :          }
         :
         :          for(; k<depth; k++)
         :          {
         :          Index w=0;
         :          for(; w<pack-3; w+=4)
    0.00 :   5ac6:       lea    -0x3(%rbx),%r11d
    0.00 :   5aca:       mov    %r12d,-0x38(%rsp)
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5acf:       setge  %dl
    0.00 :   5ad2:       cmp    $0x3,%r12d
         :          for(; w<pack-3; w+=4)
    0.00 :   5ad6:       mov    %r11d,0x28(%rsp)
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5adb:       setg   %al
         :          for(; w<pack-3; w+=4)
    0.00 :   5ade:       mov    %rdi,0x80(%rsp)
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5ae6:       and    %eax,%edx
         :          for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel_half.packet[p]));
    0.00 :   5ae8:       movslq %ecx,%rax
    0.00 :   5aeb:       add    %ebx,%ecx
    0.00 :   5aed:       mov    %rax,-0x50(%rsp)
    0.00 :   5af2:       movslq %ecx,%rax
    0.00 :   5af5:       mov    %rax,-0x58(%rsp)
         :          count += psize*pack;
    0.00 :   5afa:       mov    %ebx,%eax
    0.00 :   5afc:       imul   %r12d,%eax
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5b00:       mov    %dl,0x2f(%rsp)
         :          count += psize*pack;
    0.00 :   5b04:       movslq %eax,%rsi
         :          for(; w<pack-3; w+=4)
    0.00 :   5b07:       mov    %ebx,%eax
    0.00 :   5b09:       lea    0x1(%rdi),%rbx
    0.00 :   5b0d:       mov    %rbx,0x70(%rsp)
    0.00 :   5b12:       lea    0x2(%rdi),%rbx
    0.00 :   5b16:       mov    %rbx,0x68(%rsp)
    0.00 :   5b1b:       lea    0x3(%rdi),%rbx
    0.00 :   5b1f:       mov    %rbx,0x60(%rsp)
    0.00 :   5b24:       lea    0x0(,%rsi,4),%rbx
    0.00 :   5b2c:       mov    %rbx,0x8(%rsp)
         :          for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel.packet[p]));
    0.00 :   5b31:       mov    %eax,%ebx
    0.00 :   5b33:       lea    0x0(,%rax,4),%eax
    0.00 :   5b3a:       movslq %eax,%rdx
    0.00 :   5b3d:       add    %ebx,%eax
         :          count += psize*pack;
    0.00 :   5b3f:       mov    %rsi,0x10(%rsp)
         :          for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel.packet[p]));
    0.00 :   5b44:       cltq
    0.00 :   5b46:       lea    0x0(,%rdx,4),%rsi
    0.00 :   5b4e:       shl    $0x2,%rax
    0.00 :   5b52:       mov    %rsi,(%rsp)
    0.00 :   5b56:       mov    %rax,-0x8(%rsp)
    0.00 :   5b5b:       lea    (%rcx,%rcx,1),%eax
    0.00 :   5b5e:       cltq
    0.00 :   5b60:       shl    $0x2,%rax
    0.00 :   5b64:       mov    %rax,-0x10(%rsp)
    0.00 :   5b69:       lea    0x0(,%rbx,8),%eax
    0.00 :   5b70:       sub    %ebx,%eax
    0.00 :   5b72:       cltq
    0.00 :   5b74:       shl    $0x2,%rax
    0.00 :   5b78:       mov    %rax,-0x18(%rsp)
    0.00 :   5b7d:       movslq %r11d,%rax
    0.00 :   5b80:       dec    %rax
    0.00 :   5b83:       mov    %rax,%rbx
    0.00 :   5b86:       and    $0xfffffffffffffffc,%rax
    0.00 :   5b8a:       and    $0xfffffffffffffffc,%rbx
    0.00 :   5b8e:       mov    %rax,0x58(%rsp)
    0.00 :   5b93:       mov    %rbx,-0x30(%rsp)
         :          const Index peeled_k = (depth/psize)*psize;
    0.00 :   5b98:       movslq %r12d,%rbx
    0.00 :   5b9b:       mov    %rbx,-0x60(%rsp)
         :          Index k=0;
    0.00 :   5ba0:       xor    %ecx,%ecx
         :          if(pack>=psize && psize >= QuarterPacketSize)
    0.00 :   5ba2:       cmpb   $0x0,0x2f(%rsp)
    0.00 :   5ba7:       jne    5cd9 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x299>
         :          for(; k<depth; k++)
    0.00 :   5bad:       cmp    %rcx,0x78(%rsp)
    0.00 :   5bb2:       jle    5c7c <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x23c>
    0.00 :   5bb8:       mov    0x28(%rsp),%r12d
    0.00 :   5bbd:       mov    -0x20(%rsp),%rbx
    0.00 :   5bc2:       mov    %r14,0x48(%rsp)
    0.00 :   5bc7:       mov    -0x30(%rsp),%r14
    0.00 :   5bcc:       nopl   0x0(%rax)
         :          for(; w<pack-3; w+=4)
    0.00 :   5bd0:       test   %r12d,%r12d
    0.00 :   5bd3:       jle    5c69 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x229>
    0.00 :   5bd9:       mov    0x58(%rsp),%rdi
    0.00 :   5bde:       mov    0x50(%rsp),%r9
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   5be3:       mov    0x8(%r15),%rsi
    0.00 :   5be7:       mov    0x80(%rsp),%r11
    0.00 :   5bef:       add    %r13,%rdi
    0.00 :   5bf2:       mov    0x70(%rsp),%r8
    0.00 :   5bf7:       mov    (%r15),%rax
    0.00 :   5bfa:       imul   %rsi,%r11
    0.00 :   5bfe:       lea    (%r9,%rdi,4),%r9
    0.00 :   5c02:       mov    0x68(%rsp),%rdi
    0.00 :   5c07:       mov    %rsi,%r10
    0.00 :   5c0a:       imul   %rsi,%r8
    0.00 :   5c0e:       shl    $0x4,%r10
    0.00 :   5c12:       imul   %rsi,%rdi
    0.00 :   5c16:       imul   0x60(%rsp),%rsi
    0.00 :   5c1c:       lea    (%r11,%rcx,1),%rdx
    0.00 :   5c20:       lea    (%rax,%rdx,4),%rax
    0.00 :   5c24:       sub    %r11,%r8
    0.00 :   5c27:       lea    (%rbx,%r13,4),%rdx
    0.00 :   5c2b:       sub    %r11,%rdi
    0.00 :   5c2e:       sub    %r11,%rsi
    0.00 :   5c31:       nopl   0x0(%rax)
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          {
         :          Scalar a(cj(lhs(i+w+0, k))),
         :          b(cj(lhs(i+w+1, k))),
         :          c(cj(lhs(i+w+2, k))),
         :          d(cj(lhs(i+w+3, k)));
         :          blockA[count++] = a;
    0.00 :   5c38:       vmovss (%rax,%rdi,4),%xmm0
    0.00 :   5c3d:       vinsertps $0x10,(%rax,%rsi,4),%xmm0,%xmm1
    0.00 :   5c44:       add    $0x10,%rdx
    0.00 :   5c48:       vmovss (%rax),%xmm0
    0.00 :   5c4c:       vinsertps $0x10,(%rax,%r8,4),%xmm0,%xmm0
    0.00 :   5c53:       add    %r10,%rax
    0.00 :   5c56:       vmovlhps %xmm1,%xmm0,%xmm0
    0.00 :   5c5a:       vmovups %xmm0,-0x10(%rdx)
         :          for(; w<pack-3; w+=4)
    0.00 :   5c5f:       cmp    %rdx,%r9
    0.00 :   5c62:       jne    5c38 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x1f8>
    0.00 :   5c64:       lea    0x4(%r13,%r14,1),%r13
         :          for(; k<depth; k++)
    0.00 :   5c69:       inc    %rcx
    0.00 :   5c6c:       cmp    %rcx,0x78(%rsp)
    0.00 :   5c71:       jne    5bd0 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x190>
    0.00 :   5c77:       mov    0x48(%rsp),%r14
         :          for(; i<peeled_mc; i+=pack)
    0.00 :   5c7c:       add    %r14,0x80(%rsp)
    0.00 :   5c84:       mov    0x80(%rsp),%rax
    0.00 :   5c8c:       add    %r14,0x70(%rsp)
    0.00 :   5c91:       add    %r14,0x68(%rsp)
    0.00 :   5c96:       add    %r14,0x60(%rsp)
    0.00 :   5c9b:       cmp    %rax,-0x28(%rsp)
    0.00 :   5ca0:       jg     5ba0 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x160>
    0.00 :   5ca6:       mov    -0x48(%rsp),%rdx
    0.00 :   5cab:       mov    -0x38(%rsp),%r12d
         :          }
         :
         :          if(PanelMode) count += pack * (stride-offset-depth);
         :          }
         :
         :          pack -= psize;
    0.00 :   5cb0:       sub    %r12d,-0x34(%rsp)
    0.00 :   5cb5:       sub    %rax,%rdx
    0.00 :   5cb8:       mov    -0x34(%rsp),%eax
         :          Index left = rows - i;
         :          if (pack <= 0) {
    0.00 :   5cbc:       test   %eax,%eax
    0.00 :   5cbe:       jle    5fbe <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x57e>
    0.00 :   5cc4:       mov    0x80(%rsp),%rax
    0.00 :   5ccc:       mov    %rax,-0x40(%rsp)
    0.00 :   5cd1:       mov    %rax,%rdi
    0.00 :   5cd4:       jmpq   5a97 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x57>
         :          const Index peeled_k = (depth/psize)*psize;
    0.00 :   5cd9:       mov    0x78(%rsp),%rax
    0.00 :   5cde:       mov    -0x60(%rsp),%rbx
    0.00 :   5ce3:       cqto
    0.00 :   5ce5:       idiv   %rbx
    0.00 :   5ce8:       imul   %rbx,%rax
    0.00 :   5cec:       mov    %rax,0x18(%rsp)
         :          for(; k<peeled_k; k+=psize)
    0.00 :   5cf1:       test   %rax,%rax
    0.00 :   5cf4:       jle    5bad <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x16d>
    0.00 :   5cfa:       mov    -0x20(%rsp),%rdi
    0.00 :   5cff:       lea    (%r14,%r13,1),%rax
    0.00 :   5d03:       mov    -0x38(%rsp),%r12d
    0.00 :   5d08:       mov    %r13,0x20(%rsp)
    0.00 :   5d0d:       lea    (%rdi,%rax,4),%r11
    0.00 :   5d11:       mov    -0x50(%rsp),%rax
    0.00 :   5d16:       lea    (%rdi,%r13,4),%r9
    0.00 :   5d1a:       add    %r13,%rax
    0.00 :   5d1d:       lea    (%rdi,%rax,4),%r10
    0.00 :   5d21:       mov    -0x58(%rsp),%rax
    0.00 :   5d26:       add    %r13,%rax
    0.00 :   5d29:       lea    (%rdi,%rax,4),%rax
    0.00 :   5d2d:       mov    %rax,%r13
    0.00 :   5d30:       mov    (%rsp),%rax
         :          Index k=0;
    0.00 :   5d34:       mov    0x80(%rsp),%rdx
    0.00 :   5d3c:       add    %r9,%rax
    0.00 :   5d3f:       mov    %rax,0x48(%rsp)
    0.00 :   5d44:       mov    -0x8(%rsp),%rax
    0.00 :   5d49:       add    %r9,%rax
    0.00 :   5d4c:       mov    %rax,0x40(%rsp)
    0.00 :   5d51:       mov    -0x10(%rsp),%rax
    0.00 :   5d56:       add    %r9,%rax
    0.00 :   5d59:       mov    %rax,0x38(%rsp)
    0.00 :   5d5e:       mov    -0x18(%rsp),%rax
    0.00 :   5d63:       add    %r9,%rax
    0.00 :   5d66:       mov    %rax,0x30(%rsp)
         :          for (Index m = 0; m < pack; m += psize)
    0.00 :   5d6b:       xor    %eax,%eax
    0.00 :   5d6d:       jmp    5d89 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x349>
    0.00 :   5d6f:       nop
         :          } else if (HasHalf && psize == HalfPacketSize) {
    0.00 :   5d70:       cmp    $0x4,%r12d
    0.00 :   5d74:       je     5f28 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x4e8>
         :          for (Index m = 0; m < pack; m += psize)
    0.00 :   5d7a:       add    %rbx,%rax
    0.00 :   5d7d:       add    %rbx,%rdx
    0.00 :   5d80:       cmp    %rax,%r14
    0.00 :   5d83:       jle    5ef0 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x4b0>
         :          if (psize == PacketSize) {
    0.00 :   5d89:       cmp    $0x8,%r12d
    0.00 :   5d8d:       jne    5d70 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x330>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5d8f:       mov    0x80(%rsp),%r8
    0.00 :   5d97:       mov    0x8(%r15),%rdi
    0.00 :   5d9b:       mov    (%r15),%rsi
    0.00 :   5d9e:       add    %rax,%r8
    0.00 :   5da1:       imul   %rdi,%r8
    0.00 :   5da5:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
         :          }
         :
         :          extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm256_loadu_ps (float const *__P)
         :          {
         :          return *(__m256_u *)__P;
    0.00 :   5da8:       vmovups (%rsi,%r8,4),%ymm7
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
   16.92 :   5dae:       lea    0x1(%rdx),%r8
    0.00 :   5db2:       imul   %rdi,%r8
    0.00 :   5db6:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
    0.00 :   5db9:       vmovups (%rsi,%r8,4),%ymm4
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
   14.71 :   5dbf:       lea    0x2(%rdx),%r8
    0.00 :   5dc3:       imul   %rdi,%r8
         :          _Z18_mm256_unpacklo_psDv8_fS_():
         :          }
         :
         :          extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm256_unpacklo_ps (__m256 __A, __m256 __B)
         :          {
         :          return (__m256) __builtin_ia32_unpcklps256 ((__v8sf)__A, (__v8sf)__B);
    0.00 :   5dc7:       vunpcklps %ymm4,%ymm7,%ymm5
         :          _Z18_mm256_unpackhi_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpckhps256 ((__v8sf)__A, (__v8sf)__B);
   13.32 :   5dcb:       vunpckhps %ymm4,%ymm7,%ymm7
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5dcf:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
         :          return *(__m256_u *)__P;
    0.00 :   5dd2:       vmovups (%rsi,%r8,4),%ymm0
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    1.56 :   5dd8:       lea    0x3(%rdx),%r8
    0.00 :   5ddc:       imul   %rdi,%r8
    0.00 :   5de0:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
    0.00 :   5de3:       vmovups (%rsi,%r8,4),%ymm2
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    1.18 :   5de9:       lea    0x4(%rdx),%r8
    0.00 :   5ded:       imul   %rdi,%r8
         :          _Z18_mm256_unpacklo_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpcklps256 ((__v8sf)__A, (__v8sf)__B);
    0.00 :   5df1:       vunpcklps %ymm2,%ymm0,%ymm4
         :          _Z18_mm256_unpackhi_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpckhps256 ((__v8sf)__A, (__v8sf)__B);
    7.01 :   5df5:       vunpckhps %ymm2,%ymm0,%ymm0
         :          _Z17_mm256_shuffle_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_shufps256 ((__v8sf)__A, (__v8sf)__B,
    0.00 :   5df9:       vshufps $0x44,%ymm4,%ymm5,%ymm9
    0.00 :   5dfe:       vshufps $0xee,%ymm4,%ymm5,%ymm4
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5e03:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
         :          return *(__m256_u *)__P;
    0.00 :   5e06:       vmovups (%rsi,%r8,4),%ymm6
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    2.39 :   5e0c:       lea    0x5(%rdx),%r8
    0.00 :   5e10:       imul   %rdi,%r8
    0.00 :   5e14:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
    0.00 :   5e17:       vmovups (%rsi,%r8,4),%ymm3
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    9.54 :   5e1d:       lea    0x6(%rdx),%r8
    0.00 :   5e21:       imul   %rdi,%r8
         :          _Z18_mm256_unpacklo_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpcklps256 ((__v8sf)__A, (__v8sf)__B);
    0.00 :   5e25:       vunpcklps %ymm3,%ymm6,%ymm2
         :          _Z18_mm256_unpackhi_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpckhps256 ((__v8sf)__A, (__v8sf)__B);
    0.00 :   5e29:       vunpckhps %ymm3,%ymm6,%ymm3
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5e2d:       add    %rcx,%r8
         :          _Z15_mm256_loadu_psPKf():
         :          return *(__m256_u *)__P;
    0.00 :   5e30:       vmovups (%rsi,%r8,4),%ymm1
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5e36:       lea    0x7(%rdx),%r8
    0.00 :   5e3a:       add    %rbx,%rdx
    0.00 :   5e3d:       imul   %r8,%rdi
    0.00 :   5e41:       lea    (%rdi,%rcx,1),%r8
         :          _Z15_mm256_store_psPfDv8_f():
         :          *(__m256 *)__P = __A;
    0.00 :   5e45:       mov    0x48(%rsp),%rdi
         :          _Z15_mm256_loadu_psPKf():
         :          return *(__m256_u *)__P;
    0.00 :   5e4a:       vmovups (%rsi,%r8,4),%ymm8
         :          _Z18_mm256_unpacklo_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpcklps256 ((__v8sf)__A, (__v8sf)__B);
   20.20 :   5e50:       vunpcklps %ymm8,%ymm1,%ymm6
         :          _Z18_mm256_unpackhi_psDv8_fS_():
         :          return (__m256) __builtin_ia32_unpckhps256 ((__v8sf)__A, (__v8sf)__B);
    0.00 :   5e55:       vunpckhps %ymm8,%ymm1,%ymm1
         :          _Z17_mm256_shuffle_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_shufps256 ((__v8sf)__A, (__v8sf)__B,
    0.00 :   5e5a:       vshufps $0x44,%ymm0,%ymm7,%ymm8
    0.00 :   5e5f:       vshufps $0xee,%ymm0,%ymm7,%ymm0
    6.64 :   5e64:       vshufps $0x44,%ymm6,%ymm2,%ymm5
    0.00 :   5e69:       vshufps $0xee,%ymm6,%ymm2,%ymm2
         :          _Z22_mm256_permute2f128_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_vperm2f128_ps256 ((__v8sf)__X,
    0.00 :   5e6e:       vinsertf128 $0x1,%xmm5,%ymm9,%ymm12
         :          _Z17_mm256_shuffle_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_shufps256 ((__v8sf)__A, (__v8sf)__B,
    6.54 :   5e74:       vshufps $0x44,%ymm1,%ymm3,%ymm6
         :          _Z22_mm256_permute2f128_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_vperm2f128_ps256 ((__v8sf)__X,
    0.00 :   5e79:       vinsertf128 $0x1,%xmm2,%ymm4,%ymm11
         :          _Z17_mm256_shuffle_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_shufps256 ((__v8sf)__A, (__v8sf)__B,
    0.00 :   5e7f:       vshufps $0xee,%ymm1,%ymm3,%ymm1
         :          _Z22_mm256_permute2f128_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_vperm2f128_ps256 ((__v8sf)__X,
    0.00 :   5e84:       vinsertf128 $0x1,%xmm6,%ymm8,%ymm10
    0.00 :   5e8a:       vinsertf128 $0x1,%xmm1,%ymm0,%ymm7
    0.00 :   5e90:       vperm2f128 $0x31,%ymm5,%ymm9,%ymm5
         :          _Z15_mm256_store_psPfDv8_f():
         :          *(__m256 *)__P = __A;
    0.00 :   5e96:       vmovaps %ymm12,(%r9,%rax,4)
         :          _Z22_mm256_permute2f128_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_vperm2f128_ps256 ((__v8sf)__X,
    0.00 :   5e9c:       vperm2f128 $0x31,%ymm2,%ymm4,%ymm2
    0.00 :   5ea2:       vperm2f128 $0x31,%ymm6,%ymm8,%ymm3
         :          _Z15_mm256_store_psPfDv8_f():
         :          *(__m256 *)__P = __A;
    0.00 :   5ea8:       vmovaps %ymm11,(%r11,%rax,4)
         :          _Z22_mm256_permute2f128_psDv8_fS_i():
         :          return (__m256) __builtin_ia32_vperm2f128_ps256 ((__v8sf)__X,
    0.00 :   5eae:       vperm2f128 $0x31,%ymm1,%ymm0,%ymm0
         :          _Z15_mm256_store_psPfDv8_f():
         :          *(__m256 *)__P = __A;
    0.00 :   5eb4:       vmovaps %ymm10,(%r10,%rax,4)
    0.00 :   5eba:       vmovaps %ymm7,0x0(%r13,%rax,4)
    0.00 :   5ec1:       vmovaps %ymm5,(%rdi,%rax,4)
    0.00 :   5ec6:       mov    0x40(%rsp),%rdi
    0.00 :   5ecb:       vmovaps %ymm2,(%rdi,%rax,4)
    0.00 :   5ed0:       mov    0x38(%rsp),%rdi
    0.00 :   5ed5:       vmovaps %ymm3,(%rdi,%rax,4)
    0.00 :   5eda:       mov    0x30(%rsp),%rdi
    0.00 :   5edf:       vmovaps %ymm0,(%rdi,%rax,4)
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          for (Index m = 0; m < pack; m += psize)
    0.00 :   5ee4:       add    %rbx,%rax
    0.00 :   5ee7:       cmp    %rax,%r14
    0.00 :   5eea:       jg     5d89 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x349>
         :          for(; k<peeled_k; k+=psize)
    0.00 :   5ef0:       mov    0x8(%rsp),%rax
         :          count += psize*pack;
    0.00 :   5ef5:       mov    0x10(%rsp),%rdi
         :          for(; k<peeled_k; k+=psize)
    0.00 :   5efa:       add    %rbx,%rcx
         :          count += psize*pack;
    0.00 :   5efd:       add    %rdi,0x20(%rsp)
    0.00 :   5f02:       add    %rax,%r9
    0.00 :   5f05:       add    %rax,%r11
    0.00 :   5f08:       add    %rax,%r10
    0.00 :   5f0b:       add    %rax,%r13
         :          for(; k<peeled_k; k+=psize)
    0.00 :   5f0e:       cmp    %rcx,0x18(%rsp)
    0.00 :   5f13:       jg     5d30 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x2f0>
    0.00 :   5f19:       mov    0x20(%rsp),%r13
    0.00 :   5f1e:       jmpq   5bad <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x16d>
    0.00 :   5f23:       nopl   0x0(%rax,%rax,1)
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5f28:       mov    0x80(%rsp),%rsi
    0.00 :   5f30:       mov    0x8(%r15),%r8
    0.00 :   5f34:       mov    (%r15),%rdi
    0.00 :   5f37:       add    %rax,%rsi
    0.00 :   5f3a:       imul   %r8,%rsi
    0.00 :   5f3e:       add    %rcx,%rsi
         :          _Z12_mm_loadu_psPKf():
         :
         :          /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */
         :          extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_loadu_ps (float const *__P)
         :          {
         :          return *(__m128_u *)__P;
    0.00 :   5f41:       vmovups (%rdi,%rsi,4),%xmm0
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5f46:       lea    0x1(%rdx),%rsi
    0.00 :   5f4a:       imul   %r8,%rsi
    0.00 :   5f4e:       add    %rcx,%rsi
         :          _Z12_mm_loadu_psPKf():
    0.00 :   5f51:       vmovups (%rdi,%rsi,4),%xmm5
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5f56:       lea    0x2(%rdx),%rsi
    0.00 :   5f5a:       imul   %r8,%rsi
         :          _ZN5Eigen8internal10ptransposeERNS0_11PacketBlockIDv4_fLi4EEE():
         :          return _mm_movemask_ps(x) != 0x0;
         :          }
         :
         :          EIGEN_DEVICE_FUNC inline void
         :          ptranspose(PacketBlock<Packet4f,4>& kernel) {
         :          _MM_TRANSPOSE4_PS(kernel.packet[0], kernel.packet[1], kernel.packet[2], kernel.packet[3]);
    0.00 :   5f5e:       vunpcklps %xmm5,%xmm0,%xmm2
    0.00 :   5f62:       vunpckhps %xmm5,%xmm0,%xmm0
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5f66:       add    %rcx,%rsi
         :          _Z12_mm_loadu_psPKf():
    0.00 :   5f69:       vmovups (%rdi,%rsi,4),%xmm1
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   5f6e:       lea    0x3(%rdx),%rsi
    0.00 :   5f72:       imul   %r8,%rsi
    0.00 :   5f76:       add    %rcx,%rsi
         :          _Z12_mm_loadu_psPKf():
    0.00 :   5f79:       vmovups (%rdi,%rsi,4),%xmm4
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          gone_half = true;
    0.00 :   5f7e:       movzbl 0x2f(%rsp),%edi
         :          _ZN5Eigen8internal10ptransposeERNS0_11PacketBlockIDv4_fLi4EEE():
    0.00 :   5f83:       vunpcklps %xmm4,%xmm1,%xmm3
    0.00 :   5f87:       vunpckhps %xmm4,%xmm1,%xmm1
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
    0.00 :   5f8b:       mov    %dil,0x2e(%rsp)
         :          _ZN5Eigen8internal10ptransposeERNS0_11PacketBlockIDv4_fLi4EEE():
    0.00 :   5f90:       vmovlhps %xmm3,%xmm2,%xmm5
    0.00 :   5f94:       vmovlhps %xmm1,%xmm0,%xmm4
         :          _Z12_mm_store_psPfDv4_f():
         :
         :          /* Store four SPFP values.  The address must be 16-byte aligned.  */
         :          extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_store_ps (float *__P, __m128 __A)
         :          {
         :          *(__m128 *)__P = __A;
    0.00 :   5f98:       vmovhlps %xmm2,%xmm3,%xmm7
    0.00 :   5f9c:       vmovhlps %xmm0,%xmm1,%xmm6
    0.00 :   5fa0:       vmovaps %xmm5,(%r9,%rax,4)
    0.00 :   5fa6:       vmovaps %xmm7,(%r11,%rax,4)
    0.00 :   5fac:       vmovaps %xmm4,(%r10,%rax,4)
    0.00 :   5fb2:       vmovaps %xmm6,0x0(%r13,%rax,4)
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          for (int p = 0; p < psize; ++p) pstore(blockA+count+m+(pack)*p, cj.pconj(kernel_half.packet[p]));
    0.00 :   5fb9:       jmpq   5d7a <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x33a>
         :          if (!gone_last &&
    0.00 :   5fbe:       mov    -0x40(%rsp),%rbx
    0.00 :   5fc3:       cmp    %rbx,0x80(%rsp)
    0.00 :   5fcb:       je     61ec <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7ac>
         :          (starting_pos == i || left >= psize/2 || left >= psize/4) &&
    0.00 :   5fd1:       mov    %r12d,%eax
    0.00 :   5fd4:       shr    %eax
    0.00 :   5fd6:       cmp    %rdx,%rax
    0.00 :   5fd9:       jle    61ec <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7ac>
    0.00 :   5fdf:       mov    %r12d,%eax
    0.00 :   5fe2:       shr    $0x2,%eax
    0.00 :   5fe5:       cmp    %rdx,%rax
    0.00 :   5fe8:       jle    61ec <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7ac>
         :          psize = pack = left & ~1;
         :          }
         :          }
         :          }
         :
         :          for(; i<rows; i++)
    0.00 :   5fee:       mov    0x80(%rsp),%rbx
    0.00 :   5ff6:       cmp    %rbx,-0x48(%rsp)
    0.00 :   5ffb:       jle    61c1 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x781>
    0.00 :   6001:       mov    0x78(%rsp),%rdx
    0.00 :   6006:       mov    %rdx,%r12
    0.00 :   6009:       test   %rdx,%rdx
    0.00 :   600c:       jle    61c1 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x781>
    0.00 :   6012:       shr    $0x3,%r12
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   6016:       mov    0x8(%r15),%rbx
    0.00 :   601a:       lea    0x0(,%rdx,4),%rax
    0.00 :   6022:       mov    (%r15),%rcx
    0.00 :   6025:       mov    %r12,%rdi
    0.00 :   6028:       mov    %rdx,%r12
    0.00 :   602b:       mov    %rax,0x60(%rsp)
    0.00 :   6030:       mov    -0x20(%rsp),%rax
    0.00 :   6035:       and    $0xfffffffffffffff8,%r12
    0.00 :   6039:       mov    %rbx,0x70(%rsp)
    0.00 :   603e:       shl    $0x5,%rdi
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          {
         :          if(PanelMode) count += offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   6042:       lea    0x6(%r12),%r10
    0.00 :   6047:       mov    %r12,%rsi
    0.00 :   604a:       lea    0x1(%r12),%r9
    0.00 :   604f:       mov    %rdi,0x78(%rsp)
    0.00 :   6054:       lea    0x2(%r12),%rbx
    0.00 :   6059:       lea    0x3(%r12),%r15
    0.00 :   605e:       mov    %r10,0x68(%rsp)
    0.00 :   6063:       lea    0x4(%r12),%r11
    0.00 :   6068:       lea    0x5(%r12),%r14
    0.00 :   606d:       mov    %rdx,%r12
    0.00 :   6070:       lea    -0x1(%rdx),%rdx
    0.00 :   6074:       lea    (%rax,%r13,4),%rax
    0.00 :   6078:       mov    %rdx,0x50(%rsp)
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   607d:       mov    0x70(%rsp),%rdx
    0.00 :   6082:       lea    0x20(%rax),%r10
    0.00 :   6086:       imul   0x80(%rsp),%rdx
    0.00 :   608f:       lea    (%rcx,%rdx,4),%r8
    0.00 :   6093:       cmp    %r10,%r8
    0.00 :   6096:       lea    0x20(%rcx,%rdx,4),%r10
    0.00 :   609b:       setae  0x58(%rsp)
    0.00 :   60a0:       cmp    %r10,%rax
    0.00 :   60a3:       movzbl 0x58(%rsp),%edi
    0.00 :   60a8:       setae  %r10b
    0.00 :   60ac:       or     %r10b,%dil
    0.00 :   60af:       je     6218 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7d8>
    0.00 :   60b5:       cmpq   $0x6,0x50(%rsp)
    0.00 :   60bb:       jbe    6218 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7d8>
    0.00 :   60c1:       mov    0x78(%rsp),%rdi
    0.00 :   60c6:       xor    %r10d,%r10d
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   60c9:       vmovups (%r8,%r10,1),%ymm7
    0.00 :   60cf:       vmovups %ymm7,(%rax,%r10,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   60d5:       add    $0x20,%r10
    0.00 :   60d9:       cmp    %r10,%rdi
    0.00 :   60dc:       jne    60c9 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x689>
    0.00 :   60de:       mov    %rdi,0x78(%rsp)
    0.00 :   60e3:       lea    (%rsi,%r13,1),%r8
    0.00 :   60e7:       cmp    %rsi,%r12
    0.00 :   60ea:       je     619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   60f0:       lea    (%rdx,%rsi,1),%r10
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   60f4:       mov    -0x20(%rsp),%rdi
    0.00 :   60f9:       vmovss (%rcx,%r10,4),%xmm0
    0.00 :   60ff:       lea    0x1(%r8),%r10
    0.00 :   6103:       vmovss %xmm0,(%rdi,%r8,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6109:       cmp    %r9,%r12
    0.00 :   610c:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   6112:       lea    (%rdx,%r9,1),%r8
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6116:       vmovss (%rcx,%r8,4),%xmm0
    0.00 :   611c:       lea    0x0(,%r10,4),%r8
    0.00 :   6124:       vmovss %xmm0,(%rdi,%r10,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   612a:       cmp    %rbx,%r12
    0.00 :   612d:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   612f:       lea    (%rdx,%rbx,1),%r10
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6133:       vmovss (%rcx,%r10,4),%xmm0
    0.00 :   6139:       vmovss %xmm0,0x4(%rdi,%r8,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6140:       cmp    %r15,%r12
    0.00 :   6143:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   6145:       lea    (%rdx,%r15,1),%r10
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6149:       vmovss (%rcx,%r10,4),%xmm0
    0.00 :   614f:       vmovss %xmm0,0x8(%rdi,%r8,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6156:       cmp    %r11,%r12
    0.00 :   6159:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   615b:       lea    (%rdx,%r11,1),%r10
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   615f:       vmovss (%rcx,%r10,4),%xmm0
    0.00 :   6165:       vmovss %xmm0,0xc(%rdi,%r8,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   616c:       cmp    %r14,%r12
    0.00 :   616f:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   6171:       lea    (%rdx,%r14,1),%r10
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6175:       vmovss (%rcx,%r10,4),%xmm0
    0.00 :   617b:       mov    %rdi,%r10
    0.00 :   617e:       vmovss %xmm0,0x10(%rdi,%r8,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6185:       mov    0x68(%rsp),%rdi
    0.00 :   618a:       cmp    %rdi,%r12
    0.00 :   618d:       jle    619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   618f:       add    %rdi,%rdx
         :          _ZN5Eigen8internal13gemm_pack_lhsIflNS0_22const_blas_data_mapperIflLi1EEELi24ELi8EDv8_fLi1ELb0ELb0EEclEPfRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6192:       vmovss (%rcx,%rdx,4),%xmm0
    0.00 :   6197:       vmovss %xmm0,0x14(%r10,%r8,1)
         :          for(; i<rows; i++)
    0.00 :   619e:       incq   0x80(%rsp)
    0.00 :   61a6:       add    %r12,%r13
    0.00 :   61a9:       mov    0x80(%rsp),%rdi
    0.00 :   61b1:       add    0x60(%rsp),%rax
    0.00 :   61b6:       cmp    %rdi,-0x48(%rsp)
    0.00 :   61bb:       jne    607d <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x63d>
    0.00 :   61c1:       vzeroupper
         :          if(PanelMode) count += (stride-offset-depth);
         :          }
         :          }
    0.00 :   61c4:       lea    -0x28(%rbp),%rsp
    0.00 :   61c8:       pop    %rbx
    0.00 :   61c9:       pop    %r12
    0.00 :   61cb:       pop    %r13
    0.00 :   61cd:       pop    %r14
    0.00 :   61cf:       pop    %r15
    0.00 :   61d1:       pop    %rbp
    0.00 :   61d2:       retq
         :          pack -= psize;
    0.00 :   61d3:       sub    %r12d,-0x34(%rsp)
    0.00 :   61d8:       mov    -0x34(%rsp),%eax
         :          if (pack <= 0) {
    0.00 :   61dc:       mov    %rdi,0x80(%rsp)
    0.00 :   61e4:       test   %eax,%eax
    0.00 :   61e6:       jg     5cc4 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x284>
         :          (starting_pos == i || left >= psize/2 || left >= psize/4) &&
    0.00 :   61ec:       lea    -0x8(%r12),%eax
    0.00 :   61f1:       cmp    $0x1,%eax
    0.00 :   61f4:       ja     5fee <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x5ae>
         :          ((psize/2 == HalfPacketSize && HasHalf && !gone_half) ||
    0.00 :   61fa:       cmpb   $0x0,0x2e(%rsp)
         :          pack = psize;
    0.00 :   61ff:       movl   $0x4,-0x34(%rsp)
         :          psize /= 2;
    0.00 :   6207:       mov    $0x4,%r12d
         :          ((psize/2 == HalfPacketSize && HasHalf && !gone_half) ||
    0.00 :   620d:       jne    5fee <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x5ae>
    0.00 :   6213:       jmpq   5cc4 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x284>
         :          for(Index k=0; k<depth; k++)
    0.00 :   6218:       mov    0x78(%rsp),%rdi
    0.00 :   621d:       lea    (%rcx,%rdx,4),%r8
    0.00 :   6221:       xor    %edx,%edx
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6223:       vmovss (%r8,%rdx,4),%xmm0
    0.00 :   6229:       vmovss %xmm0,(%rax,%rdx,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   622e:       inc    %rdx
    0.00 :   6231:       cmp    %rdx,%r12
    0.00 :   6234:       jne    6223 <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x7e3>
    0.00 :   6236:       mov    %rdi,0x78(%rsp)
    0.00 :   623b:       jmpq   619e <Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 24, 8, float __vector(8), 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x75e>
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (13 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000006240 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]>:
         :          _ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi1EEELi4ELi1ELb0ELb0EEclEPfRKS3_llll():
         :          typedef typename unpacket_traits<typename unpacket_traits<Packet>::half>::half QuarterPacket;
         :          typedef typename DataMapper::LinearMapper LinearMapper;
         :          enum { PacketSize = packet_traits<Scalar>::size,
         :          HalfPacketSize = unpacket_traits<HalfPacket>::size,
         :          QuarterPacketSize = unpacket_traits<QuarterPacket>::size};
         :          EIGEN_DONT_INLINE void operator()(Scalar* blockB, const DataMapper& rhs, Index depth, Index cols, Index stride=0, Index offset=0)
    0.00 :   6240:       push   %r12
    0.00 :   6242:       push   %rbp
    0.00 :   6243:       mov    %rdi,%rbp
    0.00 :   6246:       push   %rbx
    0.00 :   6247:       mov    %rcx,%rbx
         :          eigen_assert(((!PanelMode) && stride==0 && offset==0) || (PanelMode && stride>=depth && offset<=stride));
         :          const bool HasHalf = (int)HalfPacketSize < (int)PacketSize;
         :          const bool HasQuarter = (int)QuarterPacketSize < (int)HalfPacketSize;
         :          conj_if<NumTraits<Scalar>::IsComplex && Conjugate> cj;
         :          Index packet_cols8 = nr>=8 ? (cols/8) * 8 : 0;
         :          Index packet_cols4 = nr>=4 ? (cols/4) * 4 : 0;
    0.00 :   624a:       add    $0x3,%rcx
    0.00 :   624e:       test   %rbx,%rbx
    0.00 :   6251:       cmovns %rbx,%rcx
         :          //       if(PanelMode) count += 8 * (stride-offset-depth);
         :          //     }
         :          //   }
         :          if(nr>=4)
         :          {
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   6255:       and    $0xfffffffffffffffc,%rcx
    0.00 :   6259:       jle    6315 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xd5>
    0.00 :   625f:       lea    -0x4(,%rdx,4),%r12
         :          Index count = 0;
    0.00 :   6267:       xor    %edi,%edi
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   6269:       xor    %r11d,%r11d
    0.00 :   626c:       nopl   0x0(%rax)
         :          {
         :          // skip what we have before
         :          if(PanelMode) count += 4 * offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   6270:       lea    0x0(%rbp,%rdi,4),%r9
    0.00 :   6275:       xor    %eax,%eax
    0.00 :   6277:       test   %rdx,%rdx
    0.00 :   627a:       jle    62ab <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x6b>
    0.00 :   627c:       nopl   0x0(%rax)
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   6280:       mov    0x8(%rsi),%r8
         :          _Z12_mm_loadu_psPKf():
         :
         :          /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */
         :          extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
         :          _mm_loadu_ps (float const *__P)
         :          {
         :          return *(__m128_u *)__P;
    7.58 :   6284:       mov    (%rsi),%r10
    0.00 :   6287:       add    $0x10,%r9
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    8.49 :   628b:       imul   %rax,%r8
         :          _ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi1EEELi4ELi1ELb0ELb0EEclEPfRKS3_llll():
    0.00 :   628f:       inc    %rax
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    6.90 :   6292:       add    %r11,%r8
         :          _Z12_mm_loadu_psPKf():
    8.27 :   6295:       vmovups (%r10,%r8,4),%xmm1
   54.36 :   629b:       vmovups %xmm1,-0x10(%r9)
         :          _ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi1EEELi4ELi1ELb0ELb0EEclEPfRKS3_llll():
   14.40 :   62a1:       cmp    %rax,%rdx
    0.00 :   62a4:       jne    6280 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x40>
    0.00 :   62a6:       lea    0x4(%rdi,%r12,1),%rdi
         :          for(Index j2=packet_cols8; j2<packet_cols4; j2+=4)
    0.00 :   62ab:       add    $0x4,%r11
    0.00 :   62af:       cmp    %r11,%rcx
    0.00 :   62b2:       jg     6270 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x30>
         :          // skip what we have after
         :          if(PanelMode) count += 4 * (stride-offset-depth);
         :          }
         :          }
         :          // copy the remaining columns one at a time (nr==1)
         :          for(Index j2=packet_cols4; j2<cols; ++j2)
    0.00 :   62b4:       cmp    %rcx,%rbx
    0.00 :   62b7:       jle    6310 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xd0>
    0.00 :   62b9:       test   %rdx,%rdx
    0.00 :   62bc:       jle    6310 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xd0>
    0.00 :   62be:       mov    0x8(%rsi),%r8
    0.00 :   62c2:       add    %rdx,%rdi
    0.00 :   62c5:       lea    0x0(,%rdx,4),%r9
    0.00 :   62cd:       neg    %rdx
         :          _ZNK5Eigen8internal16blas_data_mapperIKflLi1ELi0ELi1EEclEll():
    0.00 :   62d0:       mov    (%rsi),%r10
    0.00 :   62d3:       lea    0x0(%rbp,%rdi,4),%rdi
    0.00 :   62d8:       lea    0x0(,%rdx,4),%rsi
    0.00 :   62e0:       shl    $0x2,%r8
    0.00 :   62e4:       nopl   0x0(%rax)
         :          _ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi1EEELi4ELi1ELb0ELb0EEclEPfRKS3_llll():
         :          {
         :          if(PanelMode) count += offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   62e8:       lea    (%r10,%rcx,4),%rdx
    0.00 :   62ec:       lea    (%rsi,%rdi,1),%rax
         :          {
         :          blockB[count] = cj(rhs(k, j2));
    0.00 :   62f0:       vmovss (%rdx),%xmm0
    0.00 :   62f4:       add    $0x4,%rax
    0.00 :   62f8:       add    %r8,%rdx
    0.00 :   62fb:       vmovss %xmm0,-0x4(%rax)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6300:       cmp    %rax,%rdi
    0.00 :   6303:       jne    62f0 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xb0>
         :          for(Index j2=packet_cols4; j2<cols; ++j2)
    0.00 :   6305:       inc    %rcx
    0.00 :   6308:       add    %r9,%rdi
    0.00 :   630b:       cmp    %rcx,%rbx
    0.00 :   630e:       jne    62e8 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xa8>
         :          count += 1;
         :          }
         :          if(PanelMode) count += stride-offset-depth;
         :          }
         :          }
    0.00 :   6310:       pop    %rbx
    0.00 :   6311:       pop    %rbp
    0.00 :   6312:       pop    %r12
    0.00 :   6314:       retq
         :          Index count = 0;
    0.00 :   6315:       xor    %edi,%edi
    0.00 :   6317:       jmp    62b4 <Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::const_blas_data_mapper<float, long, 1>, 4, 1, false, false>::operator()(float*, Eigen::internal::const_blas_data_mapper<float, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x74>
         :          _ZN5Eigen8internal13gemm_pack_rhsIflNS0_22const_blas_data_mapperIflLi1EEELi4ELi1ELb0ELb0EEclEPfRKS3_llll.constprop.0():
    0.00 :   6319:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (16 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000006320 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]>:
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          typedef typename DataMapper::LinearMapper LinearMapper;
         :          EIGEN_DONT_INLINE void operator()(Scalar* blockA, const DataMapper& lhs, Index depth, Index rows, Index stride=0, Index offset=0);
         :          };
         :
         :          template<typename Scalar, typename Index, typename DataMapper, int Pack1, int Pack2, typename Packet, bool Conjugate, bool PanelMode>
         :          EIGEN_DONT_INLINE void gemm_pack_lhs<Scalar, Index, DataMapper, Pack1, Pack2, Packet, RowMajor, Conjugate, PanelMode>
    0.00 :   6320:       push   %rbp
    0.00 :   6321:       mov    %rdx,%r10
    0.00 :   6324:       mov    %rsp,%rbp
    0.00 :   6327:       push   %r15
    0.00 :   6329:       mov    %rdi,%r15
    0.00 :   632c:       push   %r14
    0.00 :   632e:       push   %r13
    0.00 :   6330:       push   %r12
    0.00 :   6332:       mov    %rsi,%r12
    0.00 :   6335:       push   %rbx
    0.00 :   6336:       and    $0xffffffffffffffe0,%rsp
    0.00 :   633a:       mov    %rcx,-0x10(%rsp)
         :          bool gone_half = false, gone_quarter = false, gone_last = false;
         :
         :          Index i = 0;
         :          int pack = Pack1;
         :          int psize = PacketSize;
         :          while(pack>0)
    0.00 :   633f:       lea    -0x1(%rdx),%rax
         :          Index count = 0;
    0.00 :   6343:       xor    %r9d,%r9d
         :          Index i = 0;
    0.00 :   6346:       xor    %r8d,%r8d
         :          int pack = Pack1;
    0.00 :   6349:       mov    $0x2,%esi
         :          EIGEN_ASM_COMMENT("EIGEN PRODUCT PACK LHS");
    0.00 :   634e:       movl   $0x2,-0x18(%rsp)
    0.00 :   6356:       mov    %rax,-0x20(%rsp)
         :          {
         :          Index remaining_rows = rows-i;
    0.00 :   635b:       mov    -0x10(%rsp),%rax
         :          Index peeled_mc = gone_last ? Pack2>1 ? (rows/pack)*pack : 0 : i+(remaining_rows/pack)*pack;
    0.00 :   6360:       movslq %esi,%rbx
         :          Index remaining_rows = rows-i;
    0.00 :   6363:       sub    %r8,%rax
         :          Index peeled_mc = gone_last ? Pack2>1 ? (rows/pack)*pack : 0 : i+(remaining_rows/pack)*pack;
    0.00 :   6366:       cqto
    0.00 :   6368:       idiv   %rbx
    0.00 :   636b:       imul   %rbx,%rax
    0.00 :   636f:       lea    (%rax,%r8,1),%r13
         :          Index starting_pos = i;
         :          for(; i<peeled_mc; i+=pack)
    0.00 :   6373:       cmp    %r8,%r13
    0.00 :   6376:       jle    63e4 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xc4>
    0.00 :   6378:       mov    -0x20(%rsp),%rax
    0.00 :   637d:       lea    0x0(,%rbx,4),%rcx
    0.00 :   6385:       imul   %rbx,%rax
    0.00 :   6389:       mov    %rax,-0x8(%rsp)
    0.00 :   638e:       xchg   %ax,%ax
         :
         :          Index k=0;
         :          if(pack>=psize && psize >= QuarterPacketSize)
         :          {
         :          const Index peeled_k = (depth/psize)*psize;
         :          for(; k<peeled_k; k+=psize)
    0.00 :   6390:       test   %r10,%r10
    0.00 :   6393:       jle    63dc <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xbc>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
         :          }
         :
         :
         :          EIGEN_DEVICE_FUNC
         :          EIGEN_ALWAYS_INLINE Scalar& operator()(Index i, Index j) const {
         :          return m_data[StorageOrder==RowMajor ? j + i*m_stride : i + j*m_stride];
    0.00 :   6395:       mov    0x8(%r12),%r14
    0.00 :   639a:       mov    %r8,%rdi
    0.00 :   639d:       mov    (%r12),%r11
    0.00 :   63a1:       lea    0x4(%r15,%r9,4),%rdx
    0.00 :   63a6:       imul   %r14,%rdi
    0.00 :   63aa:       lea    (%r11,%rdi,4),%rax
    0.00 :   63ae:       add    %r10,%rdi
    0.00 :   63b1:       lea    (%r11,%rdi,4),%rdi
    0.00 :   63b5:       nopl   (%rax)
         :          _ZN5Eigen8internal6ploadtIiLi0EEET_PKNS0_15unpacket_traitsIS2_E4typeE():
         :          EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Packet ploadt(const typename unpacket_traits<Packet>::type* from)
         :          {
         :          if(Alignment >= unpacket_traits<Packet>::alignment)
         :          return pload<Packet>(from);
         :          else
         :          return ploadu<Packet>(from);
    4.59 :   63b8:       mov    (%rax),%r11d
         :          _ZN5Eigen8internal6pstoreIiiEEvPT_RKT0_():
         :          { (*to) = from; }
    0.00 :   63bb:       mov    %r11d,-0x4(%rdx)
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          {
         :          for (Index m = 0; m < pack; m += psize)
   38.38 :   63bf:       cmp    $0x1,%esi
    0.00 :   63c2:       jne    65ad <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x28d>
         :          for(; k<peeled_k; k+=psize)
    0.00 :   63c8:       add    $0x4,%rax
    0.00 :   63cc:       add    %rcx,%rdx
    0.00 :   63cf:       cmp    %rdi,%rax
    0.00 :   63d2:       jne    63b8 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x98>
    0.00 :   63d4:       add    %rbx,%r9
    0.00 :   63d7:       add    -0x8(%rsp),%r9
         :          for(; i<peeled_mc; i+=pack)
    0.00 :   63dc:       add    %rbx,%r8
    0.00 :   63df:       cmp    %r8,%r13
    0.00 :   63e2:       jg     6390 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x70>
         :          while(pack>0)
    0.00 :   63e4:       cmpl   $0x1,-0x18(%rsp)
         :          }
         :
         :          if(PanelMode) count += pack * (stride-offset-depth);
         :          }
         :
         :          pack -= psize;
    0.00 :   63e9:       mov    $0x1,%esi
         :          while(pack>0)
    0.00 :   63ee:       jne    65a0 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x280>
         :          psize = pack = left & ~1;
         :          }
         :          }
         :          }
         :
         :          for(; i<rows; i++)
    0.00 :   63f4:       cmp    %r8,-0x10(%rsp)
    0.00 :   63f9:       jle    657f <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x25f>
    0.00 :   63ff:       test   %r10,%r10
    0.00 :   6402:       jle    657f <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x25f>
    0.00 :   6408:       mov    %r10,%r11
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   640b:       mov    0x8(%r12),%rdi
    0.00 :   6410:       lea    0x0(,%r10,4),%rax
    0.00 :   6418:       mov    (%r12),%rsi
    0.00 :   641c:       and    $0xfffffffffffffff8,%r11
    0.00 :   6420:       mov    %rax,-0x8(%rsp)
    0.00 :   6425:       lea    (%r15,%r9,4),%rax
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          {
         :          if(PanelMode) count += offset;
         :          for(Index k=0; k<depth; k++)
    0.00 :   6429:       lea    0x3(%r11),%rcx
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   642d:       mov    %rdi,-0x18(%rsp)
    0.00 :   6432:       mov    %r10,%rdi
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
    0.00 :   6435:       lea    0x1(%r11),%r13
    0.00 :   6439:       mov    %rcx,-0x28(%rsp)
    0.00 :   643e:       lea    0x4(%r11),%rcx
    0.00 :   6442:       shr    $0x3,%rdi
    0.00 :   6446:       lea    0x2(%r11),%r14
    0.00 :   644a:       mov    %rcx,-0x30(%rsp)
    0.00 :   644f:       lea    0x5(%r11),%rcx
    0.00 :   6453:       shl    $0x5,%rdi
    0.00 :   6457:       mov    %rcx,-0x38(%rsp)
    0.00 :   645c:       lea    0x6(%r11),%rcx
    0.00 :   6460:       mov    %rcx,-0x40(%rsp)
    0.00 :   6465:       lea    -0x1(%r10),%rcx
    0.00 :   6469:       mov    %rcx,-0x20(%rsp)
    0.00 :   646e:       xchg   %ax,%ax
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   6470:       mov    -0x18(%rsp),%rcx
    0.00 :   6475:       imul   %r8,%rcx
    0.00 :   6479:       lea    0x0(,%rcx,4),%rbx
    0.00 :   6481:       lea    (%rsi,%rbx,1),%rdx
    0.00 :   6485:       lea    0x20(%rsi,%rbx,1),%rbx
    0.00 :   648a:       cmp    %rbx,%rax
    0.00 :   648d:       lea    0x20(%rax),%rbx
    0.00 :   6491:       setae  %r12b
    0.00 :   6495:       cmp    %rbx,%rdx
    0.00 :   6498:       setae  %bl
    0.00 :   649b:       or     %bl,%r12b
    0.00 :   649e:       je     658e <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x26e>
    0.00 :   64a4:       cmpq   $0x6,-0x20(%rsp)
    0.00 :   64aa:       jbe    658e <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x26e>
    0.00 :   64b0:       xor    %ebx,%ebx
    0.00 :   64b2:       nopw   0x0(%rax,%rax,1)
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   64b8:       vmovdqu (%rdx,%rbx,1),%ymm0
    0.00 :   64bd:       vmovdqu %ymm0,(%rax,%rbx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   64c2:       add    $0x20,%rbx
    0.00 :   64c6:       cmp    %rbx,%rdi
    0.00 :   64c9:       jne    64b8 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x198>
    0.00 :   64cb:       lea    (%r9,%r11,1),%rdx
    0.00 :   64cf:       cmp    %r11,%r10
    0.00 :   64d2:       je     6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   64d8:       lea    (%r11,%rcx,1),%rbx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   64dc:       mov    (%rsi,%rbx,4),%r12d
    0.00 :   64e0:       lea    0x1(%rdx),%rbx
    0.00 :   64e4:       mov    %r12d,(%r15,%rdx,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   64e8:       cmp    %r13,%r10
    0.00 :   64eb:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   64ed:       lea    (%rcx,%r13,1),%rdx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   64f1:       mov    (%rsi,%rdx,4),%r12d
    0.00 :   64f5:       lea    0x0(,%rbx,4),%rdx
    0.00 :   64fd:       mov    %r12d,(%r15,%rbx,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6501:       cmp    %r14,%r10
    0.00 :   6504:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   6506:       lea    (%rcx,%r14,1),%rbx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   650a:       mov    (%rsi,%rbx,4),%ebx
    0.00 :   650d:       mov    %ebx,0x4(%r15,%rdx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6512:       mov    -0x28(%rsp),%rbx
    0.00 :   6517:       cmp    %rbx,%r10
    0.00 :   651a:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   651c:       add    %rcx,%rbx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   651f:       mov    (%rsi,%rbx,4),%ebx
    0.00 :   6522:       mov    %ebx,0x8(%r15,%rdx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6527:       mov    -0x30(%rsp),%rbx
    0.00 :   652c:       cmp    %rbx,%r10
    0.00 :   652f:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   6531:       add    %rcx,%rbx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6534:       mov    (%rsi,%rbx,4),%ebx
    0.00 :   6537:       mov    %ebx,0xc(%r15,%rdx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   653c:       mov    -0x38(%rsp),%rbx
    0.00 :   6541:       cmp    %rbx,%r10
    0.00 :   6544:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   6546:       add    %rcx,%rbx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6549:       mov    (%rsi,%rbx,4),%ebx
    0.00 :   654c:       mov    %ebx,0x10(%r15,%rdx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6551:       mov    -0x40(%rsp),%rbx
    0.00 :   6556:       cmp    %rbx,%r10
    0.00 :   6559:       jle    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
         :          _ZNK5Eigen8internal16blas_data_mapperIKilLi1ELi0ELi1EEclEll():
    0.00 :   655b:       add    %rbx,%rcx
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   655e:       mov    (%rsi,%rcx,4),%ecx
    0.00 :   6561:       mov    %ecx,0x14(%r15,%rdx,1)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6566:       add    %r10,%r9
         :          for(; i<rows; i++)
    0.00 :   6569:       inc    %r8
    0.00 :   656c:       add    -0x8(%rsp),%rax
    0.00 :   6571:       cmp    %r8,-0x10(%rsp)
    0.00 :   6576:       jne    6470 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x150>
    0.00 :   657c:       vzeroupper
         :          if(PanelMode) count += (stride-offset-depth);
         :          }
         :          }
    0.00 :   657f:       lea    -0x28(%rbp),%rsp
    0.00 :   6583:       pop    %rbx
    0.00 :   6584:       pop    %r12
    0.00 :   6586:       pop    %r13
    0.00 :   6588:       pop    %r14
    0.00 :   658a:       pop    %r15
    0.00 :   658c:       pop    %rbp
    0.00 :   658d:       retq
         :          for(Index k=0; k<depth; k++)
    0.00 :   658e:       xor    %ecx,%ecx
         :          blockA[count++] = cj(lhs(i, k));
    0.00 :   6590:       mov    (%rdx,%rcx,4),%ebx
    0.00 :   6593:       mov    %ebx,(%rax,%rcx,4)
         :          for(Index k=0; k<depth; k++)
    0.00 :   6596:       inc    %rcx
    0.00 :   6599:       cmp    %rcx,%r10
    0.00 :   659c:       jne    6590 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x270>
    0.00 :   659e:       jmp    6566 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x246>
    0.00 :   65a0:       movl   $0x1,-0x18(%rsp)
    0.00 :   65a8:       jmpq   635b <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0x3b>
         :          _ZN5Eigen8internal6ploadtIiLi0EEET_PKNS0_15unpacket_traitsIS2_E4typeE():
         :          return ploadu<Packet>(from);
    8.55 :   65ad:       mov    (%rax,%r14,4),%r11d
         :          _ZN5Eigen8internal6pstoreIiiEEvPT_RKT0_():
         :          { (*to) = from; }
    5.31 :   65b1:       mov    %r11d,(%rdx)
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll():
         :          for (Index m = 0; m < pack; m += psize)
   43.16 :   65b4:       jmpq   63c8 <Eigen::internal::gemm_pack_lhs<int, long, Eigen::internal::const_blas_data_mapper<int, long, 1>, 2, 1, int, 1, false, false>::operator()(int*, Eigen::internal::const_blas_data_mapper<int, long, 1> const&, long, long, long, long) [clone .constprop.0]+0xa8>
         :          _ZN5Eigen8internal13gemm_pack_lhsIilNS0_22const_blas_data_mapperIilLi1EEELi2ELi1EiLi1ELb0ELb0EEclEPiRKS3_llll.constprop.0():
    0.00 :   65b9:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of libc-2.31.so for L1-dcache-load-misses (8 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000047c70 <random_r@@GLIBC_2.2.5>:
    0.00 :   47c70:       endbr64
   13.30 :   47c74:       test   %rdi,%rdi
    0.00 :   47c77:       je     47cf8 <random_r@@GLIBC_2.2.5+0x88>
    0.00 :   47c79:       test   %rsi,%rsi
    0.00 :   47c7c:       je     47cf8 <random_r@@GLIBC_2.2.5+0x88>
    0.00 :   47c7e:       mov    0x18(%rdi),%r8d
    0.00 :   47c82:       mov    0x10(%rdi),%rax
    0.00 :   47c86:       test   %r8d,%r8d
    0.00 :   47c89:       jne    47ca8 <random_r@@GLIBC_2.2.5+0x38>
    0.00 :   47c8b:       imul   $0x41c64e6d,(%rax),%edx
    0.00 :   47c91:       add    $0x3039,%edx
    0.00 :   47c97:       and    $0x7fffffff,%edx
    0.00 :   47c9d:       mov    %edx,(%rax)
    0.00 :   47c9f:       mov    %edx,(%rsi)
    0.00 :   47ca1:       mov    %r8d,%eax
    0.00 :   47ca4:       retq
    0.00 :   47ca5:       nopl   (%rax)
    0.00 :   47ca8:       mov    (%rdi),%rcx
    0.00 :   47cab:       mov    0x8(%rdi),%r8
    0.00 :   47caf:       mov    0x28(%rdi),%r9
   25.19 :   47cb3:       mov    (%r8),%edx
   12.72 :   47cb6:       add    (%rcx),%edx
    0.00 :   47cb8:       add    $0x4,%rcx
    0.00 :   47cbc:       add    $0x4,%r8
    0.00 :   47cc0:       mov    %edx,-0x4(%rcx)
    0.00 :   47cc3:       shr    %edx
    0.00 :   47cc5:       mov    %edx,(%rsi)
    0.00 :   47cc7:       cmp    %rcx,%r9
    0.00 :   47cca:       jbe    47cd7 <random_r@@GLIBC_2.2.5+0x67>
    0.00 :   47ccc:       cmp    %r8,%r9
    0.00 :   47ccf:       ja     47cf0 <random_r@@GLIBC_2.2.5+0x80>
    0.00 :   47cd1:       mov    %rax,%r8
    0.00 :   47cd4:       mov    %rcx,%rax
   25.35 :   47cd7:       movq   %r8,%xmm1
    0.00 :   47cdc:       movq   %rax,%xmm0
    0.00 :   47ce1:       xor    %r8d,%r8d
    0.00 :   47ce4:       punpcklqdq %xmm1,%xmm0
   12.13 :   47ce8:       mov    %r8d,%eax
    0.00 :   47ceb:       movups %xmm0,(%rdi)
   11.32 :   47cee:       retq
    0.00 :   47cef:       nop
    0.00 :   47cf0:       mov    %rcx,%rax
    0.00 :   47cf3:       jmp    47cd7 <random_r@@GLIBC_2.2.5+0x67>
    0.00 :   47cf5:       nopl   (%rax)
    0.00 :   47cf8:       mov    0x1a4171(%rip),%rax        # 1ebe70 <h_errlist@@GLIBC_2.2.5+0xd50>
    0.00 :   47cff:       mov    $0xffffffff,%r8d
    0.00 :   47d05:       movl   $0x16,%fs:(%rax)
    0.00 :   47d0c:       jmp    47ca1 <random_r@@GLIBC_2.2.5+0x31>
    0.00 :   47d0e:       xchg   %ax,%ax
 Percent |	Source code & Disassembly of libc-2.31.so for L1-dcache-load-misses (5 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000047800 <random@@GLIBC_2.2.5>:
    0.00 :   47800:       endbr64
    0.00 :   47804:       sub    $0x18,%rsp
    0.00 :   47808:       mov    %fs:0x28,%rax
    0.00 :   47811:       mov    %rax,0x8(%rsp)
    0.00 :   47816:       xor    %eax,%eax
    0.00 :   47818:       mov    %fs:0x18,%eax
   20.14 :   47820:       test   %eax,%eax
    0.00 :   47822:       jne    47870 <random@@GLIBC_2.2.5+0x70>
   20.97 :   47824:       mov    $0x1,%edx
    0.00 :   47829:       cmpxchg %edx,0x1a6cb0(%rip)        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
   19.86 :   47830:       lea    0x4(%rsp),%rsi
   19.40 :   47835:       lea    0x1a4f04(%rip),%rdi        # 1ec740 <__ctype_b@GLIBC_2.2.5+0x38>
    0.00 :   4783c:       callq  47c70 <random_r@@GLIBC_2.2.5>
    0.00 :   47841:       mov    %fs:0x18,%eax
    0.00 :   47849:       test   %eax,%eax
    0.00 :   4784b:       jne    47890 <random@@GLIBC_2.2.5+0x90>
    0.00 :   4784d:       subl   $0x1,0x1a6c8c(%rip)        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
   19.62 :   47854:       mov    0x8(%rsp),%rcx
    0.00 :   47859:       xor    %fs:0x28,%rcx
    0.00 :   47862:       movslq 0x4(%rsp),%rax
    0.00 :   47867:       jne    478ba <random@@GLIBC_2.2.5+0xba>
    0.00 :   47869:       add    $0x18,%rsp
    0.00 :   4786d:       retq
    0.00 :   4786e:       xchg   %ax,%ax
    0.00 :   47870:       xor    %eax,%eax
    0.00 :   47872:       mov    $0x1,%edx
    0.00 :   47877:       lock cmpxchg %edx,0x1a6c61(%rip)        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
    0.00 :   4787f:       je     47830 <random@@GLIBC_2.2.5+0x30>
    0.00 :   47881:       lea    0x1a6c58(%rip),%rdi        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
    0.00 :   47888:       callq  945a0 <pthread_setcanceltype@@GLIBC_2.2.5+0x30>
    0.00 :   4788d:       jmp    47830 <random@@GLIBC_2.2.5+0x30>
    0.00 :   4788f:       nop
    0.00 :   47890:       xor    %eax,%eax
    0.00 :   47892:       xchg   %eax,0x1a6c48(%rip)        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
    0.00 :   47898:       cmp    $0x1,%eax
    0.00 :   4789b:       jle    47854 <random@@GLIBC_2.2.5+0x54>
    0.00 :   4789d:       xor    %r10d,%r10d
    0.00 :   478a0:       mov    $0x1,%edx
    0.00 :   478a5:       mov    $0x81,%esi
    0.00 :   478aa:       mov    $0xca,%eax
    0.00 :   478af:       lea    0x1a6c2a(%rip),%rdi        # 1ee4e0 <__abort_msg@@GLIBC_PRIVATE+0x8a0>
    0.00 :   478b6:       syscall
    0.00 :   478b8:       jmp    47854 <random@@GLIBC_2.2.5+0x54>
    0.00 :   478ba:       callq  12fa70 <__stack_chk_fail@@GLIBC_2.4>
    0.00 :   478bf:       nop
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (3 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000002ca0 <randomizeMatrix(int*, Matrix_t)>:
         :          _Z15randomizeMatrixPi8Matrix_t():
         :          matrix[j + (i * dimensions.columns)] = 2.0f*(float)2000.0f * ((float)rand() / (float)RAND_MAX) - (float)2000.0f;
         :          }
         :          }
         :          }
         :          void randomizeMatrix(int *matrix, Matrix_t dimensions)
         :          {
    0.00 :   2ca0:       endbr64
    0.00 :   2ca4:       mov    %rsi,%rax
    0.00 :   2ca7:       sar    $0x20,%rax
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2cab:       test   %esi,%esi
    0.00 :   2cad:       jle    2d44 <randomizeMatrix(int*, Matrix_t)+0xa4>
    0.00 :   2cb3:       test   %eax,%eax
    0.00 :   2cb5:       jle    2d44 <randomizeMatrix(int*, Matrix_t)+0xa4>
         :          {
    0.00 :   2cbb:       push   %r15
    0.00 :   2cbd:       push   %r14
    0.00 :   2cbf:       lea    0x0(,%rax,4),%r14
    0.00 :   2cc7:       push   %r13
    0.00 :   2cc9:       mov    %esi,%r13d
    0.00 :   2ccc:       push   %r12
    0.00 :   2cce:       lea    -0x1(%rax),%r12d
    0.00 :   2cd2:       push   %rbp
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2cd3:       xor    %ebp,%ebp
         :          {
    0.00 :   2cd5:       push   %rbx
    0.00 :   2cd6:       lea    0x4(%rdi,%r12,4),%rbx
    0.00 :   2cdb:       not    %r12
    0.00 :   2cde:       shl    $0x2,%r12
    0.00 :   2ce2:       sub    $0x8,%rsp
    0.00 :   2ce6:       nopw   %cs:0x0(%rax,%rax,1)
         :          {
         :          for (int j = 0; j < dimensions.columns; j++)
    0.00 :   2cf0:       lea    (%r12,%rbx,1),%r15
    0.00 :   2cf4:       nopl   0x0(%rax)
         :          {
         :          matrix[j + (i * dimensions.columns)] = (int)(2*2000 * ((float)rand() / (float)RAND_MAX)) - 2000;
    0.00 :   2cf8:       callq  22b0 <rand@plt>
    0.00 :   2cfd:       vxorps %xmm1,%xmm1,%xmm1
    0.00 :   2d01:       add    $0x4,%r15
    0.00 :   2d05:       vcvtsi2ss %eax,%xmm1,%xmm0
    0.00 :   2d09:       vmulss 0x1034b(%rip),%xmm0,%xmm0        # 1305c <_IO_stdin_used+0x5c>
    0.00 :   2d11:       vmulss 0x10347(%rip),%xmm0,%xmm0        # 13060 <_IO_stdin_used+0x60>
    0.00 :   2d19:       vcvttss2si %xmm0,%eax
   32.84 :   2d1d:       sub    $0x7d0,%eax
   67.16 :   2d22:       mov    %eax,-0x4(%r15)
         :          for (int j = 0; j < dimensions.columns; j++)
    0.00 :   2d26:       cmp    %rbx,%r15
    0.00 :   2d29:       jne    2cf8 <randomizeMatrix(int*, Matrix_t)+0x58>
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2d2b:       inc    %ebp
    0.00 :   2d2d:       add    %r14,%rbx
    0.00 :   2d30:       cmp    %r13d,%ebp
    0.00 :   2d33:       jne    2cf0 <randomizeMatrix(int*, Matrix_t)+0x50>
         :          }
         :          }
         :          }
    0.00 :   2d35:       add    $0x8,%rsp
    0.00 :   2d39:       pop    %rbx
    0.00 :   2d3a:       pop    %rbp
    0.00 :   2d3b:       pop    %r12
    0.00 :   2d3d:       pop    %r13
    0.00 :   2d3f:       pop    %r14
    0.00 :   2d41:       pop    %r15
    0.00 :   2d43:       retq
    0.00 :   2d44:       retq
    0.00 :   2d45:       data16 nopw %cs:0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of tests for L1-dcache-load-misses (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000002bf0 <randomizeMatrix(float*, Matrix_t)>:
         :          _Z15randomizeMatrixPf8Matrix_t():
         :          {
         :          return (int *)calloc((dimensions.rows * dimensions.columns), sizeof(int));
         :          }
         :
         :          void randomizeMatrix(float *matrix, Matrix_t dimensions)
         :          {
    0.00 :   2bf0:       endbr64
    0.00 :   2bf4:       mov    %rsi,%rax
    0.00 :   2bf7:       sar    $0x20,%rax
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2bfb:       test   %esi,%esi
    0.00 :   2bfd:       jle    2c96 <randomizeMatrix(float*, Matrix_t)+0xa6>
    0.00 :   2c03:       test   %eax,%eax
    0.00 :   2c05:       jle    2c96 <randomizeMatrix(float*, Matrix_t)+0xa6>
         :          {
    0.00 :   2c0b:       push   %r15
    0.00 :   2c0d:       push   %r14
    0.00 :   2c0f:       lea    0x0(,%rax,4),%r14
    0.00 :   2c17:       push   %r13
    0.00 :   2c19:       mov    %esi,%r13d
    0.00 :   2c1c:       push   %r12
    0.00 :   2c1e:       lea    -0x1(%rax),%r12d
    0.00 :   2c22:       push   %rbp
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2c23:       xor    %ebp,%ebp
         :          {
    0.00 :   2c25:       push   %rbx
    0.00 :   2c26:       lea    0x4(%rdi,%r12,4),%rbx
    0.00 :   2c2b:       not    %r12
    0.00 :   2c2e:       shl    $0x2,%r12
    0.00 :   2c32:       sub    $0x8,%rsp
    0.00 :   2c36:       nopw   %cs:0x0(%rax,%rax,1)
         :          {
         :          for (int j = 0; j < dimensions.columns; j++)
    0.00 :   2c40:       lea    (%r12,%rbx,1),%r15
    0.00 :   2c44:       nopl   0x0(%rax)
         :          {
         :          matrix[j + (i * dimensions.columns)] = 2.0f*(float)2000.0f * ((float)rand() / (float)RAND_MAX) - (float)2000.0f;
    0.00 :   2c48:       callq  22b0 <rand@plt>
    0.00 :   2c4d:       vxorps %xmm1,%xmm1,%xmm1
    0.00 :   2c51:       add    $0x4,%r15
    0.00 :   2c55:       vmovss 0x10407(%rip),%xmm2        # 13064 <_IO_stdin_used+0x64>
    0.00 :   2c5d:       vcvtsi2ss %eax,%xmm1,%xmm0
    0.00 :   2c61:       vmulss 0x103f3(%rip),%xmm0,%xmm0        # 1305c <_IO_stdin_used+0x5c>
    0.00 :   2c69:       vfmadd132ss 0x103ee(%rip),%xmm2,%xmm0        # 13060 <_IO_stdin_used+0x60>
  100.00 :   2c72:       vmovss %xmm0,-0x4(%r15)
         :          for (int j = 0; j < dimensions.columns; j++)
    0.00 :   2c78:       cmp    %rbx,%r15
    0.00 :   2c7b:       jne    2c48 <randomizeMatrix(float*, Matrix_t)+0x58>
         :          for (int i = 0; i < dimensions.rows; i++)
    0.00 :   2c7d:       inc    %ebp
    0.00 :   2c7f:       add    %r14,%rbx
    0.00 :   2c82:       cmp    %r13d,%ebp
    0.00 :   2c85:       jne    2c40 <randomizeMatrix(float*, Matrix_t)+0x50>
         :          }
         :          }
         :          }
    0.00 :   2c87:       add    $0x8,%rsp
    0.00 :   2c8b:       pop    %rbx
    0.00 :   2c8c:       pop    %rbp
    0.00 :   2c8d:       pop    %r12
    0.00 :   2c8f:       pop    %r13
    0.00 :   2c91:       pop    %r14
    0.00 :   2c93:       pop    %r15
    0.00 :   2c95:       retq
    0.00 :   2c96:       retq
    0.00 :   2c97:       nopw   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc-2.31.so for L1-dcache-loads (34 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000047d10 <rand@@GLIBC_2.2.5>:
   58.19 :   47d10:       endbr64
    0.00 :   47d14:       sub    $0x8,%rsp
    0.00 :   47d18:       callq  47800 <random@@GLIBC_2.2.5>
    0.00 :   47d1d:       add    $0x8,%rsp
   41.81 :   47d21:       retq
    0.00 :   47d22:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   47d2c:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of ld-2.31.so for L1-dcache-loads (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          000000000000b4c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x430>:
    0.00 :   b4c0:       push   %r15
    0.00 :   b4c2:       push   %r14
    0.00 :   b4c4:       mov    %rsi,%r14
    0.00 :   b4c7:       push   %r13
    0.00 :   b4c9:       push   %r12
    0.00 :   b4cb:       push   %rbp
    0.00 :   b4cc:       push   %rbx
    0.00 :   b4cd:       sub    $0x98,%rsp
    0.00 :   b4d4:       mov    0x8(%r9),%r12d
    0.00 :   b4d8:       mov    %rdi,0x20(%rsp)
    0.00 :   b4dd:       mov    0xd0(%rsp),%rbp
    0.00 :   b4e5:       mov    %rdx,0x58(%rsp)
    0.00 :   b4ea:       mov    0xe8(%rsp),%r15
    0.00 :   b4f2:       mov    %rcx,0x50(%rsp)
    0.00 :   b4f7:       mov    %r8,0x48(%rsp)
    0.00 :   b4fc:       shr    $0x6,%rsi
    0.00 :   b500:       mov    %r12,%r11
    0.00 :   b503:       mov    %r14,0x28(%rsp)
    0.00 :   b508:       mov    %r15,%r12
    0.00 :   b50b:       mov    0xf0(%rsp),%eax
    0.00 :   b512:       mov    (%r9),%r13
    0.00 :   b515:       mov    %rsi,0x30(%rsp)
    0.00 :   b51a:       and    $0x2,%eax
    0.00 :   b51d:       mov    %eax,0x64(%rsp)
    0.00 :   b521:       mov    %eax,%r15d
    0.00 :   b524:       jmpq   b5bf <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x52f>
    0.00 :   b529:       nopl   0x0(%rax)
    0.00 :   b530:       mov    0x2f4(%rbx),%esi
    0.00 :   b536:       test   %esi,%esi
    0.00 :   b538:       je     b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b53a:       movl   $0x0,0x84(%rsp)
    0.00 :   b545:       mov    0x70(%rbx),%rax
    0.00 :   b549:       movq   $0x0,0x88(%rsp)
    0.00 :   b555:       mov    0x8(%rax),%rax
    0.00 :   b559:       mov    %rax,0x18(%rsp)
    0.00 :   b55e:       mov    0x68(%rbx),%rax
    0.00 :   b562:       mov    0x8(%rax),%rax
    0.00 :   b566:       mov    %rax,(%rsp)
    0.00 :   b56a:       mov    0x300(%rbx),%rax
    0.00 :   b571:       test   %rax,%rax
    0.00 :   b574:       je     b640 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x5b0>
    0.00 :   b57a:       mov    0x28(%rsp),%rdi
    0.00 :   b57f:       mov    0x2fc(%rbx),%ecx
    0.00 :   b585:       mov    0x30(%rsp),%edx
    0.00 :   b589:       and    0x2f8(%rbx),%edx
    0.00 :   b58f:       mov    (%rax,%rdx,8),%rax
  100.00 :   b593:       mov    %rdi,%rdx
    0.00 :   b596:       shr    %cl,%rdx
    0.00 :   b599:       mov    %rdx,%rcx
    0.00 :   b59c:       mov    %rax,%rdx
    0.00 :   b59f:       shr    %cl,%rdx
    0.00 :   b5a2:       mov    %edi,%ecx
    0.00 :   b5a4:       shr    %cl,%rax
    0.00 :   b5a7:       and    %rdx,%rax
    0.00 :   b5aa:       test   $0x1,%al
    0.00 :   b5ac:       jne    b7b0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x720>
    0.00 :   b5b2:       add    $0x1,%rbp
    0.00 :   b5b6:       cmp    %rbp,%r11
    0.00 :   b5b9:       jbe    b8a0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x810>
    0.00 :   b5bf:       mov    0x0(%r13,%rbp,8),%rax
    0.00 :   b5c4:       mov    0x28(%rax),%rbx
    0.00 :   b5c8:       cmp    %r12,%rbx
    0.00 :   b5cb:       je     b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b5cd:       test   %r15d,%r15d
    0.00 :   b5d0:       je     b5db <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x54b>
    0.00 :   b5d2:       testb  $0x3,0x31c(%rbx)
    0.00 :   b5d9:       je     b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b5db:       testb  $0x20,0x31d(%rbx)
    0.00 :   b5e2:       jne    b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b5e4:       testb  $0x8,0x22035(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   b5eb:       je     b530 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x4a0>
    0.00 :   b5f1:       mov    0x8(%rbx),%rdx
    0.00 :   b5f5:       mov    0x30(%rbx),%rcx
    0.00 :   b5f9:       cmpb   $0x0,(%rdx)
    0.00 :   b5fc:       je     b620 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x590>
    0.00 :   b5fe:       mov    0x20(%rsp),%rsi
    0.00 :   b603:       lea    0x1c09e(%rip),%rdi        # 276a8 <_dl_catch_error@@GLIBC_PRIVATE+0x9968>
    0.00 :   b60a:       xor    %eax,%eax
    0.00 :   b60c:       mov    %r11,(%rsp)
    0.00 :   b610:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   b615:       mov    (%rsp),%r11
    0.00 :   b619:       jmpq   b530 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x4a0>
    0.00 :   b61e:       xchg   %ax,%ax
    0.00 :   b620:       mov    0x21fd9(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   b627:       mov    (%rax),%rdx
    0.00 :   b62a:       lea    0x19a61(%rip),%rax        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   b631:       test   %rdx,%rdx
    0.00 :   b634:       cmove  %rax,%rdx
    0.00 :   b638:       jmp    b5fe <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x56e>
    0.00 :   b63a:       nopw   0x0(%rax,%rax,1)
    0.00 :   b640:       mov    0x58(%rsp),%rax
    0.00 :   b645:       mov    $0xffffffff,%edi
    0.00 :   b64a:       mov    (%rax),%rax
    0.00 :   b64d:       cmp    %rdi,%rax
    0.00 :   b650:       je     bcf0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xc60>
    0.00 :   b656:       xor    %edx,%edx
    0.00 :   b658:       div    %rsi
    0.00 :   b65b:       shl    $0x2,%rdx
    0.00 :   b65f:       mov    0x310(%rbx),%rax
    0.00 :   b666:       mov    (%rax,%rdx,1),%eax
    0.00 :   b669:       test   %eax,%eax
    0.00 :   b66b:       je     b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b671:       lea    0x84(%rsp),%rsi
    0.00 :   b679:       lea    0x88(%rsp),%rdi
    0.00 :   b681:       mov    %r15d,0x68(%rsp)
    0.00 :   b686:       mov    0xe0(%rsp),%r14d
    0.00 :   b68e:       mov    %r13,0x70(%rsp)
    0.00 :   b693:       mov    0xf0(%rsp),%r15d
    0.00 :   b69b:       mov    %r12,0xe8(%rsp)
    0.00 :   b6a3:       mov    0xd8(%rsp),%r13
    0.00 :   b6ab:       mov    %rsi,0x38(%rsp)
    0.00 :   b6b0:       mov    0x50(%rsp),%r12
    0.00 :   b6b5:       mov    %rdi,0x40(%rsp)
    0.00 :   b6ba:       mov    %rbp,0xd0(%rsp)
    0.00 :   b6c2:       mov    %r11,0x78(%rsp)
    0.00 :   b6c7:       jmp    b6e2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x652>
    0.00 :   b6c9:       nopl   0x0(%rax)
    0.00 :   b6d0:       mov    0x308(%rbx),%rax
    0.00 :   b6d7:       mov    (%rax,%rbp,4),%eax
    0.00 :   b6da:       test   %eax,%eax
    0.00 :   b6dc:       je     bb18 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xa88>
    0.00 :   b6e2:       sub    $0x8,%rsp
    0.00 :   b6e6:       mov    %eax,%ebp
    0.00 :   b6e8:       mov    %r15d,%r8d
    0.00 :   b6eb:       mov    %r14d,%ecx
    0.00 :   b6ee:       pushq  0x40(%rsp)
    0.00 :   b6f2:       lea    0x0(%rbp,%rbp,2),%rdx
    0.00 :   b6f7:       mov    %r12,%rsi
    0.00 :   b6fa:       pushq  0x50(%rsp)
    0.00 :   b6fe:       push   %rbx
    0.00 :   b6ff:       pushq  0x20(%rsp)
    0.00 :   b703:       push   %rax
    0.00 :   b704:       mov    0x48(%rsp),%rax
    0.00 :   b709:       mov    0x50(%rsp),%rdi
    0.00 :   b70e:       lea    (%rax,%rdx,8),%r9
    0.00 :   b712:       mov    %r13,%rdx
    0.00 :   b715:       callq  b330 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x2a0>
    0.00 :   b71a:       add    $0x30,%rsp
    0.00 :   b71e:       test   %rax,%rax
    0.00 :   b721:       je     b6d0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x640>
    0.00 :   b723:       mov    0x68(%rsp),%r15d
    0.00 :   b728:       mov    0x70(%rsp),%r13
    0.00 :   b72d:       mov    %rax,%r8
    0.00 :   b730:       mov    0xd0(%rsp),%rbp
    0.00 :   b738:       mov    0xe8(%rsp),%r12
    0.00 :   b740:       mov    0x78(%rsp),%r11
    0.00 :   b745:       nopl   (%rax)
    0.00 :   b748:       cmpq   $0x0,0xf8(%rsp)
    0.00 :   b751:       je     b8b8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x828>
    0.00 :   b757:       movzbl 0x5(%r8),%eax
    0.00 :   b75c:       and    $0x3,%eax
    0.00 :   b75f:       sub    $0x1,%eax
    0.00 :   b762:       cmp    $0x1,%eax
    0.00 :   b765:       jbe    b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b76b:       movzbl 0x4(%r8),%eax
    0.00 :   b770:       shr    $0x4,%al
    0.00 :   b773:       cmp    $0x2,%al
    0.00 :   b775:       je     b9c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x930>
    0.00 :   b77b:       cmp    $0xa,%al
    0.00 :   b77d:       je     b9f8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x968>
    0.00 :   b783:       cmp    $0x1,%al
    0.00 :   b785:       jne    b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b78b:       mov    0x48(%rsp),%rax
    0.00 :   b790:       movq   %r8,%xmm0
    0.00 :   b795:       movq   %rbx,%xmm1
    0.00 :   b79a:       punpcklqdq %xmm1,%xmm0
    0.00 :   b79e:       movaps %xmm0,(%rax)
    0.00 :   b7a1:       mov    $0x1,%eax
    0.00 :   b7a6:       jmpq   b8a2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x812>
    0.00 :   b7ab:       nopl   0x0(%rax,%rax,1)
    0.00 :   b7b0:       mov    %rdi,%rax
    0.00 :   b7b3:       xor    %edx,%edx
    0.00 :   b7b5:       div    %rsi
    0.00 :   b7b8:       mov    0x308(%rbx),%rax
    0.00 :   b7bf:       mov    (%rax,%rdx,4),%eax
    0.00 :   b7c2:       test   %eax,%eax
    0.00 :   b7c4:       je     b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b7ca:       mov    0x310(%rbx),%rdx
    0.00 :   b7d1:       mov    %r15d,0x40(%rsp)
    0.00 :   b7d6:       mov    %r13,0x68(%rsp)
    0.00 :   b7db:       mov    0xe0(%rsp),%r15d
    0.00 :   b7e3:       lea    (%rdx,%rax,4),%r14
    0.00 :   b7e7:       lea    0x84(%rsp),%rax
    0.00 :   b7ef:       mov    %r11,0x70(%rsp)
    0.00 :   b7f4:       mov    0xd8(%rsp),%r13
    0.00 :   b7fc:       mov    %rbp,0xd0(%rsp)
    0.00 :   b804:       mov    %rdi,%rbp
    0.00 :   b807:       mov    %r12,0xe8(%rsp)
    0.00 :   b80f:       mov    0x50(%rsp),%r12
    0.00 :   b814:       mov    %rax,0x38(%rsp)
    0.00 :   b819:       jmp    b82d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x79d>
    0.00 :   b81b:       nopl   0x0(%rax,%rax,1)
    0.00 :   b820:       add    $0x4,%r14
    0.00 :   b824:       and    $0x1,%edx
    0.00 :   b827:       jne    be5c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xdcc>
    0.00 :   b82d:       mov    (%r14),%eax
    0.00 :   b830:       mov    %rax,%rdx
    0.00 :   b833:       xor    %rbp,%rax
    0.00 :   b836:       shr    %rax
    0.00 :   b839:       jne    b820 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x790>
    0.00 :   b83b:       sub    $0x8,%rsp
    0.00 :   b83f:       mov    %r14,%rax
    0.00 :   b842:       sub    0x310(%rbx),%rax
    0.00 :   b849:       mov    %r12,%rsi
    0.00 :   b84c:       pushq  0x40(%rsp)
    0.00 :   b850:       sar    $0x2,%rax
    0.00 :   b854:       mov    %eax,%edx
    0.00 :   b856:       lea    (%rdx,%rdx,2),%rdx
    0.00 :   b85a:       lea    0x98(%rsp),%rcx
    0.00 :   b862:       push   %rcx
    0.00 :   b863:       mov    %r15d,%ecx
    0.00 :   b866:       push   %rbx
    0.00 :   b867:       pushq  0x20(%rsp)
    0.00 :   b86b:       push   %rax
    0.00 :   b86c:       mov    0x48(%rsp),%rax
    0.00 :   b871:       mov    0x120(%rsp),%r8d
    0.00 :   b879:       mov    0x50(%rsp),%rdi
    0.00 :   b87e:       lea    (%rax,%rdx,8),%r9
    0.00 :   b882:       mov    %r13,%rdx
    0.00 :   b885:       callq  b330 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x2a0>
    0.00 :   b88a:       add    $0x30,%rsp
    0.00 :   b88e:       test   %rax,%rax
    0.00 :   b891:       jne    bfd4 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xf44>
    0.00 :   b897:       mov    (%r14),%edx
    0.00 :   b89a:       jmp    b820 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x790>
    0.00 :   b89c:       nopl   0x0(%rax)
    0.00 :   b8a0:       xor    %eax,%eax
    0.00 :   b8a2:       add    $0x98,%rsp
    0.00 :   b8a9:       pop    %rbx
    0.00 :   b8aa:       pop    %rbp
    0.00 :   b8ab:       pop    %r12
    0.00 :   b8ad:       pop    %r13
    0.00 :   b8af:       pop    %r14
    0.00 :   b8b1:       pop    %r15
    0.00 :   b8b3:       retq
    0.00 :   b8b4:       nopl   0x0(%rax)
    0.00 :   b8b8:       testb  $0x3,0x31c(%rbx)
    0.00 :   b8bf:       jne    b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b8c5:       cmpl   $0x4,0xf0(%rsp)
    0.00 :   b8cd:       jne    b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b8d3:       mov    0x78(%rbx),%rdx
    0.00 :   b8d7:       test   %rdx,%rdx
    0.00 :   b8da:       je     b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b8e0:       mov    0x80(%rbx),%rax
    0.00 :   b8e7:       test   %rax,%rax
    0.00 :   b8ea:       je     b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b8f0:       mov    0x8(%rax),%rax
    0.00 :   b8f4:       test   %rax,%rax
    0.00 :   b8f7:       je     b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b8fd:       movabs $0xaaaaaaaaaaaaaaab,%rdi
    0.00 :   b907:       mov    0x8(%rdx),%r9
    0.00 :   b90b:       mul    %rdi
    0.00 :   b90e:       mov    %rdx,%rax
    0.00 :   b911:       shr    $0x4,%rax
    0.00 :   b915:       test   %eax,%eax
    0.00 :   b917:       je     b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   b91d:       sub    $0x1,%eax
    0.00 :   b920:       mov    %rbx,0x38(%rsp)
    0.00 :   b925:       mov    %r9,%rbx
    0.00 :   b928:       lea    (%rax,%rax,2),%rax
    0.00 :   b92c:       mov    %rbp,0xd0(%rsp)
    0.00 :   b934:       lea    0x18(%r9,%rax,8),%r14
    0.00 :   b939:       mov    %r8,0x40(%rsp)
    0.00 :   b93e:       mov    %r14,%rbp
    0.00 :   b941:       mov    %r11,%r14
    0.00 :   b944:       jmp    b95d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x8cd>
    0.00 :   b946:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   b950:       add    $0x18,%rbx
    0.00 :   b954:       cmp    %rbp,%rbx
    0.00 :   b957:       je     c040 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xfb0>
    0.00 :   b95d:       mov    0x8(%rbx),%rcx
    0.00 :   b961:       mov    %ecx,%esi
    0.00 :   b963:       cmp    $0x24,%ecx
    0.00 :   b966:       ja     b950 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x8c0>
    0.00 :   b968:       movabs $0x1000070080,%rax
    0.00 :   b972:       shr    %cl,%rax
    0.00 :   b975:       not    %rax
    0.00 :   b978:       and    $0x1,%eax
    0.00 :   b97b:       cmp    $0x5,%rsi
    0.00 :   b97f:       jne    b950 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x8c0>
    0.00 :   b981:       test   %al,%al
    0.00 :   b983:       je     b950 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x8c0>
    0.00 :   b985:       shr    $0x20,%rcx
    0.00 :   b989:       mov    0x18(%rsp),%rdi
    0.00 :   b98e:       mov    0x20(%rsp),%rsi
    0.00 :   b993:       lea    (%rcx,%rcx,2),%rax
    0.00 :   b997:       mov    (%rdi,%rax,8),%edi
    0.00 :   b99a:       add    (%rsp),%rdi
    0.00 :   b99e:       callq  1f600 <_dl_catch_error@@GLIBC_PRIVATE+0x18c0>
    0.00 :   b9a3:       test   %eax,%eax
    0.00 :   b9a5:       jne    b950 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x8c0>
    0.00 :   b9a7:       mov    0xd0(%rsp),%rbp
    0.00 :   b9af:       mov    %r14,%r11
    0.00 :   b9b2:       jmpq   b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b9b7:       nopw   0x0(%rax,%rax,1)
    0.00 :   b9c0:       mov    0x21ca6(%rip),%ecx        # 2d66c <_rtld_global_ro@@GLIBC_PRIVATE+0x4c>
    0.00 :   b9c6:       test   %ecx,%ecx
    0.00 :   b9c8:       je     b78b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6fb>
    0.00 :   b9ce:       mov    0x48(%rsp),%rax
    0.00 :   b9d3:       cmpq   $0x0,(%rax)
    0.00 :   b9d7:       jne    b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b9dd:       movq   %r8,%xmm0
    0.00 :   b9e2:       movq   %rbx,%xmm5
    0.00 :   b9e7:       punpcklqdq %xmm5,%xmm0
    0.00 :   b9eb:       movaps %xmm0,(%rax)
    0.00 :   b9ee:       jmpq   b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   b9f3:       nopl   0x0(%rax,%rax,1)
    0.00 :   b9f8:       mov    0x30(%rbx),%rax
    0.00 :   b9fc:       mov    0x28(%rsp),%r14
    0.00 :   ba01:       mov    %r8,0x38(%rsp)
    0.00 :   ba06:       lea    0x22653(%rip),%r15        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   ba0d:       lea    (%rax,%rax,8),%rbp
    0.00 :   ba11:       mov    %rax,0x28(%rsp)
    0.00 :   ba16:       shl    $0x4,%rbp
    0.00 :   ba1a:       lea    0x20(%r15,%rbp,1),%rax
    0.00 :   ba1f:       add    %r15,%rbp
    0.00 :   ba22:       mov    %rax,0x30(%rsp)
    0.00 :   ba27:       mov    %rax,%rdi
    0.00 :   ba2a:       callq  *0x23538(%rip)        # 2ef68 <_rtld_global@@GLIBC_PRIVATE+0xf08>
    0.00 :   ba30:       mov    0x48(%rbp),%rax
    0.00 :   ba34:       mov    0x50(%rbp),%r9
    0.00 :   ba38:       mov    0x38(%rsp),%r8
    0.00 :   ba3d:       test   %rax,%rax
    0.00 :   ba40:       mov    %rax,0x18(%rsp)
    0.00 :   ba45:       je     bda0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xd10>
    0.00 :   ba4b:       mov    %r14,%rax
    0.00 :   ba4e:       xor    %edx,%edx
    0.00 :   ba50:       lea    -0x2(%r9),%rcx
    0.00 :   ba54:       mov    %r8,0x40(%rsp)
    0.00 :   ba59:       div    %r9
    0.00 :   ba5c:       mov    %rbx,0x38(%rsp)
    0.00 :   ba61:       mov    %r14,%rax
    0.00 :   ba64:       mov    %rdx,%r12
    0.00 :   ba67:       xor    %edx,%edx
    0.00 :   ba69:       div    %rcx
    0.00 :   ba6c:       mov    %r12,0x58(%rsp)
    0.00 :   ba71:       mov    %r12,%r13
    0.00 :   ba74:       mov    %r14,%r12
    0.00 :   ba77:       lea    0x1(%rdx),%r15
    0.00 :   ba7b:       mov    %r15,%rdx
    0.00 :   ba7e:       mov    %r15,%rbx
    0.00 :   ba81:       mov    %r9,%r15
    0.00 :   ba84:       shl    $0x5,%rdx
    0.00 :   ba88:       mov    %rdx,%r14
    0.00 :   ba8b:       mov    %r13,%rbp
    0.00 :   ba8e:       shl    $0x5,%rbp
    0.00 :   ba92:       add    0x18(%rsp),%rbp
    0.00 :   ba97:       jmp    bab8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xa28>
    0.00 :   ba99:       nopl   0x0(%rax)
    0.00 :   baa0:       test   %rdi,%rdi
    0.00 :   baa3:       je     bb60 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xad0>
    0.00 :   baa9:       add    %rbx,%r13
    0.00 :   baac:       add    %r14,%rbp
    0.00 :   baaf:       cmp    %r13,%r15
    0.00 :   bab2:       jbe    bce0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xc50>
    0.00 :   bab8:       mov    0x0(%rbp),%eax
    0.00 :   babb:       mov    0x8(%rbp),%rdi
    0.00 :   babf:       cmp    %rax,%r12
    0.00 :   bac2:       jne    baa0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xa10>
    0.00 :   bac4:       mov    0x20(%rsp),%rsi
    0.00 :   bac9:       callq  1f600 <_dl_catch_error@@GLIBC_PRIVATE+0x18c0>
    0.00 :   bace:       test   %eax,%eax
    0.00 :   bad0:       jne    baa9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xa19>
    0.00 :   bad2:       mov    0x64(%rsp),%edx
    0.00 :   bad6:       mov    0x38(%rsp),%rbx
    0.00 :   badb:       mov    0x40(%rsp),%r8
    0.00 :   bae0:       test   %edx,%edx
    0.00 :   bae2:       jne    baec <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xa5c>
    0.00 :   bae4:       mov    0x10(%rbp),%r8
    0.00 :   bae8:       mov    0x18(%rbp),%rbx
    0.00 :   baec:       mov    0x48(%rsp),%rax
    0.00 :   baf1:       movq   %r8,%xmm0
    0.00 :   baf6:       movq   %rbx,%xmm4
    0.00 :   bafb:       mov    0x30(%rsp),%rdi
    0.00 :   bb00:       punpcklqdq %xmm4,%xmm0
    0.00 :   bb04:       movaps %xmm0,(%rax)
    0.00 :   bb07:       callq  *0x23463(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   bb0d:       jmpq   b7a1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x711>
    0.00 :   bb12:       nopw   0x0(%rax,%rax,1)
    0.00 :   bb18:       mov    0x68(%rsp),%r15d
    0.00 :   bb1d:       mov    0x70(%rsp),%r13
    0.00 :   bb22:       mov    0xd0(%rsp),%rbp
    0.00 :   bb2a:       mov    0xe8(%rsp),%r12
    0.00 :   bb32:       mov    0x78(%rsp),%r11
    0.00 :   bb37:       cmpl   $0x1,0x84(%rsp)
    0.00 :   bb3f:       jne    b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   bb45:       mov    0x88(%rsp),%r8
    0.00 :   bb4d:       test   %r8,%r8
    0.00 :   bb50:       jne    b748 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6b8>
    0.00 :   bb56:       jmpq   b5b2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x522>
    0.00 :   bb5b:       nopl   0x0(%rax,%rax,1)
    0.00 :   bb60:       mov    0x28(%rsp),%rax
    0.00 :   bb65:       mov    %r15,%r9
    0.00 :   bb68:       mov    %r12,%r14
    0.00 :   bb6b:       mov    %rbx,%r15
    0.00 :   bb6e:       lea    0x224eb(%rip),%rdi        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   bb75:       lea    (%r9,%r9,2),%rdx
    0.00 :   bb79:       mov    0x40(%rsp),%r8
    0.00 :   bb7e:       mov    0x38(%rsp),%rbx
    0.00 :   bb83:       lea    (%rax,%rax,8),%rax
    0.00 :   bb87:       mov    0x58(%rsp),%r12
    0.00 :   bb8c:       shl    $0x4,%rax
    0.00 :   bb90:       mov    0x58(%rdi,%rax,1),%rax
    0.00 :   bb95:       shl    $0x2,%rax
    0.00 :   bb99:       cmp    %rax,%rdx
    0.00 :   bb9c:       jbe    be80 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xdf0>
    0.00 :   bba2:       mov    0x64(%rsp),%eax
    0.00 :   bba6:       mov    %r15,%rdx
    0.00 :   bba9:       mov    (%r8),%ecx
    0.00 :   bbac:       mov    0x18(%rsp),%rsi
    0.00 :   bbb1:       add    (%rsp),%rcx
    0.00 :   bbb5:       shl    $0x5,%rdx
    0.00 :   bbb9:       test   %eax,%eax
    0.00 :   bbbb:       je     bc4f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xbbf>
    0.00 :   bbc1:       mov    %r12,%rax
    0.00 :   bbc4:       shl    $0x5,%rax
    0.00 :   bbc8:       add    %rsi,%rax
    0.00 :   bbcb:       jmp    bbdf <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb4f>
    0.00 :   bbcd:       nopl   (%rax)
    0.00 :   bbd0:       add    %r15,%r12
    0.00 :   bbd3:       add    %rdx,%rax
    0.00 :   bbd6:       cmp    %r12,%r9
    0.00 :   bbd9:       jbe    bce8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xc58>
    0.00 :   bbdf:       cmpq   $0x0,0x8(%rax)
    0.00 :   bbe4:       jne    bbd0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb40>
    0.00 :   bbe6:       mov    0xf8(%rsp),%rsi
    0.00 :   bbee:       movq   %rcx,%xmm0
    0.00 :   bbf3:       mov    %r14d,(%rax)
    0.00 :   bbf6:       movhps 0x50(%rsp),%xmm0
    0.00 :   bbfb:       mov    %rsi,0x18(%rax)
    0.00 :   bbff:       movups %xmm0,0x8(%rax)
    0.00 :   bc03:       mov    0x28(%rsp),%rax
    0.00 :   bc08:       lea    0x22451(%rip),%rsi        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   bc0f:       lea    (%rax,%rax,8),%rax
    0.00 :   bc13:       shl    $0x4,%rax
    0.00 :   bc17:       addq   $0x1,0x58(%rsi,%rax,1)
    0.00 :   bc1d:       movq   %r8,%xmm0
    0.00 :   bc22:       movq   %rbx,%xmm2
    0.00 :   bc27:       mov    0x30(%rsp),%rdi
    0.00 :   bc2c:       punpcklqdq %xmm2,%xmm0
    0.00 :   bc30:       movaps %xmm0,(%rsp)
    0.00 :   bc34:       callq  *0x23336(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   bc3a:       mov    0x48(%rsp),%rax
    0.00 :   bc3f:       movdqa (%rsp),%xmm0
    0.00 :   bc44:       movaps %xmm0,(%rax)
    0.00 :   bc47:       jmpq   b7a1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x711>
    0.00 :   bc4c:       sub    %r9,%r12
    0.00 :   bc4f:       mov    %r12,%rax
    0.00 :   bc52:       shl    $0x5,%rax
    0.00 :   bc56:       add    %rsi,%rax
    0.00 :   bc59:       jmp    bc6b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xbdb>
    0.00 :   bc5b:       nopl   0x0(%rax,%rax,1)
    0.00 :   bc60:       add    %r15,%r12
    0.00 :   bc63:       add    %rdx,%rax
    0.00 :   bc66:       cmp    %r12,%r9
    0.00 :   bc69:       jbe    bc4c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xbbc>
    0.00 :   bc6b:       cmpq   $0x0,0x8(%rax)
    0.00 :   bc70:       jne    bc60 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xbd0>
    0.00 :   bc72:       movq   %rcx,%xmm0
    0.00 :   bc77:       movq   %r8,%xmm3
    0.00 :   bc7c:       mov    %r14d,(%rax)
    0.00 :   bc7f:       punpcklqdq %xmm3,%xmm0
    0.00 :   bc83:       mov    %rbx,0x18(%rax)
    0.00 :   bc87:       movups %xmm0,0x8(%rax)
    0.00 :   bc8b:       movzbl 0x31c(%rbx),%eax
    0.00 :   bc92:       and    $0x3,%eax
    0.00 :   bc95:       cmp    $0x2,%al
    0.00 :   bc97:       jne    bc03 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb73>
    0.00 :   bc9d:       cmpb   $0x0,0x31f(%rbx)
    0.00 :   bca4:       jne    bc03 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb73>
    0.00 :   bcaa:       testb  $0x8,0xe0(%rsp)
    0.00 :   bcb2:       je     bffb <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xf6b>
    0.00 :   bcb8:       cmpb   $0x0,0x320(%rbx)
    0.00 :   bcbf:       jne    bc03 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb73>
    0.00 :   bcc5:       testb  $0x4,0x21954(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   bccc:       jne    c0a2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1012>
    0.00 :   bcd2:       movb   $0x1,0x320(%rbx)
    0.00 :   bcd9:       jmpq   bc03 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb73>
    0.00 :   bcde:       xchg   %ax,%ax
    0.00 :   bce0:       sub    %r15,%r13
    0.00 :   bce3:       jmpq   ba8b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x9fb>
    0.00 :   bce8:       sub    %r9,%r12
    0.00 :   bceb:       jmpq   bbc1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb31>
    0.00 :   bcf0:       mov    0x20(%rsp),%rax
    0.00 :   bcf5:       xor    %edx,%edx
    0.00 :   bcf7:       movzbl (%rax),%ecx
    0.00 :   bcfa:       test   %rcx,%rcx
    0.00 :   bcfd:       je     bd93 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xd03>
    0.00 :   bd03:       movzbl 0x1(%rax),%eax
    0.00 :   bd07:       test   %al,%al
    0.00 :   bd09:       je     bd87 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xcf7>
    0.00 :   bd0b:       shl    $0x4,%rcx
    0.00 :   bd0f:       add    %rax,%rcx
    0.00 :   bd12:       mov    0x20(%rsp),%rax
    0.00 :   bd17:       movzbl 0x2(%rax),%eax
    0.00 :   bd1b:       test   %al,%al
    0.00 :   bd1d:       je     bd87 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xcf7>
    0.00 :   bd1f:       shl    $0x4,%rcx
    0.00 :   bd23:       add    %rax,%rcx
    0.00 :   bd26:       mov    0x20(%rsp),%rax
    0.00 :   bd2b:       movzbl 0x3(%rax),%eax
    0.00 :   bd2f:       test   %al,%al
    0.00 :   bd31:       je     bd87 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xcf7>
    0.00 :   bd33:       shl    $0x4,%rcx
    0.00 :   bd37:       add    %rax,%rcx
    0.00 :   bd3a:       mov    0x20(%rsp),%rax
    0.00 :   bd3f:       movzbl 0x4(%rax),%eax
    0.00 :   bd43:       test   %al,%al
    0.00 :   bd45:       je     bd87 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xcf7>
    0.00 :   bd47:       shl    $0x4,%rcx
    0.00 :   bd4b:       add    %rax,%rcx
    0.00 :   bd4e:       mov    0x20(%rsp),%rax
    0.00 :   bd53:       lea    0x5(%rax),%rdx
    0.00 :   bd57:       movzbl 0x5(%rax),%eax
    0.00 :   bd5b:       test   %al,%al
    0.00 :   bd5d:       je     bd81 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xcf1>
    0.00 :   bd5f:       shl    $0x4,%rcx
    0.00 :   bd63:       add    $0x1,%rdx
    0.00 :   bd67:       add    %rcx,%rax
    0.00 :   bd6a:       mov    %rax,%rcx
    0.00 :   bd6d:       shr    $0x18,%rcx
    0.00 :   bd71:       and    $0xf0,%ecx
    0.00 :   bd77:       xor    %rax,%rcx
    0.00 :   bd7a:       movzbl (%rdx),%eax
    0.00 :   bd7d:       test   %al,%al
    0.00 :   bd7f:       jne    bd5f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xccf>
    0.00 :   bd81:       and    $0xfffffff,%ecx
    0.00 :   bd87:       mov    %rcx,%rax
    0.00 :   bd8a:       xor    %edx,%edx
    0.00 :   bd8c:       div    %rsi
    0.00 :   bd8f:       shl    $0x2,%rdx
    0.00 :   bd93:       mov    0x58(%rsp),%rax
    0.00 :   bd98:       mov    %rcx,(%rax)
    0.00 :   bd9b:       jmpq   b65f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x5cf>
    0.00 :   bda0:       test   %r9,%r9
    0.00 :   bda3:       jne    c010 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xf80>
    0.00 :   bda9:       mov    $0x1f,%esi
    0.00 :   bdae:       mov    $0x20,%edi
    0.00 :   bdb3:       mov    %r8,0x20(%rsp)
    0.00 :   bdb8:       callq  10c0 <calloc@plt>
    0.00 :   bdbd:       mov    %rax,0x18(%rsp)
    0.00 :   bdc2:       test   %rax,%rax
    0.00 :   bdc5:       je     c07a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xfea>
    0.00 :   bdcb:       mov    %rax,0x48(%rbp)
    0.00 :   bdcf:       mov    %r14,%r12
    0.00 :   bdd2:       mov    %r14,%r15
    0.00 :   bdd5:       mov    0x20(%rsp),%r8
    0.00 :   bdda:       mov    0x221ff(%rip),%rax        # 2dfe0 <free@@GLIBC_2.2.5+0x109e0>
    0.00 :   bde1:       movq   $0x1f,0x50(%rbp)
    0.00 :   bde9:       movabs $0x842108421084211,%rdx
    0.00 :   bdf3:       mov    $0x1f,%r9d
    0.00 :   bdf9:       mov    %rax,0x60(%rbp)
    0.00 :   bdfd:       mov    %r14,%rax
    0.00 :   be00:       mul    %rdx
    0.00 :   be03:       sub    %rdx,%r12
    0.00 :   be06:       shr    %r12
    0.00 :   be09:       add    %rdx,%r12
    0.00 :   be0c:       movabs $0x469ee58469ee5847,%rdx
    0.00 :   be16:       shr    $0x4,%r12
    0.00 :   be1a:       mov    %r12,%rax
    0.00 :   be1d:       shl    $0x5,%rax
    0.00 :   be21:       sub    %r12,%rax
    0.00 :   be24:       mov    %r14,%r12
    0.00 :   be27:       sub    %rax,%r12
    0.00 :   be2a:       mov    %r14,%rax
    0.00 :   be2d:       imul   %rdx
    0.00 :   be30:       mov    %rdx,%rax
    0.00 :   be33:       mov    %r14,%rdx
    0.00 :   be36:       sar    $0x3f,%rdx
    0.00 :   be3a:       sar    $0x3,%rax
    0.00 :   be3e:       sub    %rdx,%rax
    0.00 :   be41:       lea    0x0(,%rax,8),%rdx
    0.00 :   be49:       sub    %rax,%rdx
    0.00 :   be4c:       lea    (%rax,%rdx,4),%rax
    0.00 :   be50:       sub    %rax,%r15
    0.00 :   be53:       add    $0x1,%r15
    0.00 :   be57:       jmpq   bba2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb12>
    0.00 :   be5c:       mov    0x40(%rsp),%r15d
    0.00 :   be61:       mov    0x68(%rsp),%r13
    0.00 :   be66:       mov    0xd0(%rsp),%rbp
    0.00 :   be6e:       mov    0xe8(%rsp),%r12
    0.00 :   be76:       mov    0x70(%rsp),%r11
    0.00 :   be7b:       jmpq   bb37 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xaa7>
    0.00 :   be80:       lea    0x1(%r9),%rdi
    0.00 :   be84:       mov    %r8,0x38(%rsp)
    0.00 :   be89:       mov    %r9,0x20(%rsp)
    0.00 :   be8e:       callq  12c00 <_dl_debug_state@@GLIBC_PRIVATE+0xa20>
    0.00 :   be93:       mov    $0x20,%edi
    0.00 :   be98:       mov    %rax,%rsi
    0.00 :   be9b:       mov    %rax,%rbp
    0.00 :   be9e:       callq  10c0 <calloc@plt>
    0.00 :   bea3:       mov    %rax,%r11
    0.00 :   bea6:       test   %rax,%rax
    0.00 :   bea9:       je     c07a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xfea>
    0.00 :   beaf:       mov    0x20(%rsp),%r9
    0.00 :   beb4:       mov    0x18(%rsp),%rax
    0.00 :   beb9:       lea    -0x2(%rbp),%r15
    0.00 :   bebd:       mov    0x38(%rsp),%r8
    0.00 :   bec2:       mov    %r9,%r13
    0.00 :   bec5:       mov    %rax,%rsi
    0.00 :   bec8:       shl    $0x5,%r13
    0.00 :   becc:       add    %rax,%r13
    0.00 :   becf:       test   %r9,%r9
    0.00 :   bed2:       jne    bee9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xe59>
    0.00 :   bed4:       jmpq   bf65 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xed5>
    0.00 :   bed9:       nopl   0x0(%rax)
    0.00 :   bee0:       add    $0x20,%rsi
    0.00 :   bee4:       cmp    %rsi,%r13
    0.00 :   bee7:       je     bf65 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xed5>
    0.00 :   bee9:       mov    0x8(%rsi),%rdi
    0.00 :   beed:       test   %rdi,%rdi
    0.00 :   bef0:       je     bee0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xe50>
    0.00 :   bef2:       mov    (%rsi),%r12d
    0.00 :   bef5:       mov    0x10(%rsi),%rax
    0.00 :   bef9:       xor    %edx,%edx
    0.00 :   befb:       mov    0x18(%rsi),%r10
    0.00 :   beff:       mov    %rax,0x20(%rsp)
    0.00 :   bf04:       mov    %r12,%rax
    0.00 :   bf07:       mov    %r12,%r9
    0.00 :   bf0a:       div    %rbp
    0.00 :   bf0d:       mov    %r12,%rax
    0.00 :   bf10:       mov    %rdx,%rcx
    0.00 :   bf13:       xor    %edx,%edx
    0.00 :   bf15:       div    %r15
    0.00 :   bf18:       add    $0x1,%rdx
    0.00 :   bf1c:       mov    %rdx,%r12
    0.00 :   bf1f:       shl    $0x5,%r12
    0.00 :   bf23:       mov    %rcx,%rax
    0.00 :   bf26:       shl    $0x5,%rax
    0.00 :   bf2a:       add    %r11,%rax
    0.00 :   bf2d:       jmp    bf3b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xeab>
    0.00 :   bf2f:       nop
    0.00 :   bf30:       add    %rdx,%rcx
    0.00 :   bf33:       add    %r12,%rax
    0.00 :   bf36:       cmp    %rcx,%rbp
    0.00 :   bf39:       jbe    bf60 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xed0>
    0.00 :   bf3b:       cmpq   $0x0,0x8(%rax)
    0.00 :   bf40:       jne    bf30 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xea0>
    0.00 :   bf42:       movq   %rdi,%xmm0
    0.00 :   bf47:       mov    %r9d,(%rax)
    0.00 :   bf4a:       movhps 0x20(%rsp),%xmm0
    0.00 :   bf4f:       mov    %r10,0x18(%rax)
    0.00 :   bf53:       movups %xmm0,0x8(%rax)
    0.00 :   bf57:       jmp    bee0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xe50>
    0.00 :   bf59:       nopl   0x0(%rax)
    0.00 :   bf60:       sub    %rbp,%rcx
    0.00 :   bf63:       jmp    bf23 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xe93>
    0.00 :   bf65:       mov    0x28(%rsp),%rax
    0.00 :   bf6a:       mov    0x18(%rsp),%rdi
    0.00 :   bf6f:       mov    %r11,0x38(%rsp)
    0.00 :   bf74:       mov    %r8,0x20(%rsp)
    0.00 :   bf79:       lea    (%rax,%rax,8),%r12
    0.00 :   bf7d:       lea    0x220dc(%rip),%rax        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   bf84:       shl    $0x4,%r12
    0.00 :   bf88:       add    %rax,%r12
    0.00 :   bf8b:       callq  *0x60(%r12)
    0.00 :   bf90:       xor    %edx,%edx
    0.00 :   bf92:       mov    0x38(%rsp),%r11
    0.00 :   bf97:       mov    %rbp,%r9
    0.00 :   bf9a:       mov    0x2203f(%rip),%rax        # 2dfe0 <free@@GLIBC_2.2.5+0x109e0>
    0.00 :   bfa1:       mov    0x20(%rsp),%r8
    0.00 :   bfa6:       mov    %rbp,0x50(%r12)
    0.00 :   bfab:       mov    %r11,0x48(%r12)
    0.00 :   bfb0:       mov    %rax,0x60(%r12)
    0.00 :   bfb5:       mov    %r14,%rax
    0.00 :   bfb8:       div    %rbp
    0.00 :   bfbb:       mov    %r11,0x18(%rsp)
    0.00 :   bfc0:       mov    %r14,%rax
    0.00 :   bfc3:       mov    %rdx,%r12
    0.00 :   bfc6:       xor    %edx,%edx
    0.00 :   bfc8:       div    %r15
    0.00 :   bfcb:       lea    0x1(%rdx),%r15
    0.00 :   bfcf:       jmpq   bba2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb12>
    0.00 :   bfd4:       mov    0x40(%rsp),%r15d
    0.00 :   bfd9:       mov    0x68(%rsp),%r13
    0.00 :   bfde:       mov    %rax,%r8
    0.00 :   bfe1:       mov    0xd0(%rsp),%rbp
    0.00 :   bfe9:       mov    0xe8(%rsp),%r12
    0.00 :   bff1:       mov    0x70(%rsp),%r11
    0.00 :   bff6:       jmpq   b748 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6b8>
    0.00 :   bffb:       testb  $0x4,0x2161e(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   c002:       jne    c05a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xfca>
    0.00 :   c004:       movb   $0x1,0x31f(%rbx)
    0.00 :   c00b:       jmpq   bc03 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb73>
    0.00 :   c010:       testb  $0x8,0x2160a(%rip)        # 2d621 <_rtld_global_ro@@GLIBC_PRIVATE+0x1>
    0.00 :   c017:       jne    bc1d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xb8d>
    0.00 :   c01d:       lea    0x1ca7c(%rip),%rcx        # 28aa0 <_dl_catch_error@@GLIBC_PRIVATE+0xad60>
    0.00 :   c024:       mov    $0x138,%edx
    0.00 :   c029:       lea    0x1969d(%rip),%rsi        # 256cd <_dl_catch_error@@GLIBC_PRIVATE+0x798d>
    0.00 :   c030:       lea    0x1b699(%rip),%rdi        # 276d0 <_dl_catch_error@@GLIBC_PRIVATE+0x9990>
    0.00 :   c037:       callq  1d790 <free@@GLIBC_2.2.5+0x190>
    0.00 :   c03c:       nopl   0x0(%rax)
    0.00 :   c040:       mov    0x38(%rsp),%rbx
    0.00 :   c045:       mov    0x40(%rsp),%r8
    0.00 :   c04a:       mov    %r14,%r11
    0.00 :   c04d:       mov    0xd0(%rsp),%rbp
    0.00 :   c055:       jmpq   b757 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6c7>
    0.00 :   c05a:       mov    0x30(%rbx),%rdx
    0.00 :   c05e:       mov    0x8(%rbx),%rsi
    0.00 :   c062:       xor    %eax,%eax
    0.00 :   c064:       mov    %r8,(%rsp)
    0.00 :   c068:       lea    0x1b689(%rip),%rdi        # 276f8 <_dl_catch_error@@GLIBC_PRIVATE+0x99b8>
    0.00 :   c06f:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   c074:       mov    (%rsp),%r8
    0.00 :   c078:       jmp    c004 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xf74>
    0.00 :   c07a:       mov    0x30(%rsp),%rdi
    0.00 :   c07f:       callq  *0x22eeb(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   c085:       mov    $0x2,%edi
    0.00 :   c08a:       lea    0x191aa(%rip),%rsi        # 2523b <_dl_catch_error@@GLIBC_PRIVATE+0x74fb>
    0.00 :   c091:       xor    %eax,%eax
    0.00 :   c093:       callq  12af0 <_dl_debug_state@@GLIBC_PRIVATE+0x910>
    0.00 :   c098:       mov    $0x7f,%edi
    0.00 :   c09d:       callq  1f290 <_dl_catch_error@@GLIBC_PRIVATE+0x1550>
    0.00 :   c0a2:       mov    0x30(%rbx),%rdx
    0.00 :   c0a6:       mov    0x8(%rbx),%rsi
    0.00 :   c0aa:       xor    %eax,%eax
    0.00 :   c0ac:       mov    %r8,(%rsp)
    0.00 :   c0b0:       lea    0x1b641(%rip),%rdi        # 276f8 <_dl_catch_error@@GLIBC_PRIVATE+0x99b8>
    0.00 :   c0b7:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   c0bc:       mov    (%rsp),%r8
    0.00 :   c0c0:       jmpq   bcd2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0xc42>
    0.00 :   c0c5:       data16 nopw %cs:0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of ld-2.31.so for L1-dcache-loads (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          000000000000c0d0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1040>:
    0.00 :   c0d0:       endbr64
    0.00 :   c0d4:       push   %r15
    0.00 :   c0d6:       push   %r14
    0.00 :   c0d8:       push   %r13
    0.00 :   c0da:       mov    %rdi,%r13
    0.00 :   c0dd:       push   %r12
    0.00 :   c0df:       mov    %rdx,%r12
    0.00 :   c0e2:       push   %rbp
    0.00 :   c0e3:       push   %rbx
    0.00 :   c0e4:       sub    $0x98,%rsp
    0.00 :   c0eb:       movzbl (%rdi),%edx
    0.00 :   c0ee:       mov    %rsi,0x10(%rsp)
    0.00 :   c0f3:       mov    %rcx,0x18(%rsp)
    0.00 :   c0f8:       mov    %r8,0x8(%rsp)
    0.00 :   c0fd:       mov    %r9d,0x38(%rsp)
    0.00 :   c102:       test   %dl,%dl
    0.00 :   c104:       je     c330 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x12a0>
    0.00 :   c10a:       mov    %rdi,%rcx
    0.00 :   c10d:       mov    $0x1505,%eax
    0.00 :   c112:       nopw   0x0(%rax,%rax,1)
    0.00 :   c118:       mov    %rax,%rsi
    0.00 :   c11b:       movzbl %dl,%edx
    0.00 :   c11e:       add    $0x1,%rcx
    0.00 :   c122:       shl    $0x5,%rsi
    0.00 :   c126:       add    %rsi,%rax
    0.00 :   c129:       add    %rdx,%rax
    0.00 :   c12c:       movzbl (%rcx),%edx
    0.00 :   c12f:       test   %dl,%dl
    0.00 :   c131:       jne    c118 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1088>
    0.00 :   c133:       mov    %eax,%ebx
    0.00 :   c135:       addq   $0x1,0x22893(%rip)        # 2e9d0 <_rtld_global@@GLIBC_PRIVATE+0x970>
    0.00 :   c13d:       mov    $0xffffffff,%eax
    0.00 :   c142:       pxor   %xmm0,%xmm0
    0.00 :   c146:       cmpq   $0x0,0x8(%rsp)
    0.00 :   c14c:       mov    %rax,0x40(%rsp)
    0.00 :   c151:       movaps %xmm0,0x50(%rsp)
    0.00 :   c156:       je     c166 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x10d6>
    0.00 :   c158:       testb  $0x2,0xd0(%rsp)
    0.00 :   c160:       jne    ceb2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e22>
    0.00 :   c166:       mov    0x18(%rsp),%rax
    0.00 :   c16b:       mov    (%r12),%rcx
    0.00 :   c16f:       cmpq   $0x0,0xd8(%rsp)
    0.00 :   c178:       mov    (%rax),%r9
    0.00 :   c17b:       jne    c3f0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1360>
    0.00 :   c181:       test   %r9,%r9
    0.00 :   c184:       je     c340 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x12b0>
    0.00 :   c18a:       movq   $0x0,0x20(%rsp)
    0.00 :   c193:       mov    %rax,%rbp
    0.00 :   c196:       mov    0x20(%rsp),%rax
    0.00 :   c19b:       lea    0x50(%rsp),%r15
    0.00 :   c1a0:       lea    0x40(%rsp),%r14
    0.00 :   c1a5:       jmp    c1c3 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1133>
    0.00 :   c1a7:       nopw   0x0(%rax,%rax,1)
    0.00 :   c1b0:       mov    0x8(%rbp),%r9
    0.00 :   c1b4:       add    $0x8,%rbp
    0.00 :   c1b8:       mov    (%r12),%rcx
    0.00 :   c1bc:       xor    %eax,%eax
    0.00 :   c1be:       test   %r9,%r9
    0.00 :   c1c1:       je     c1fd <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x116d>
    0.00 :   c1c3:       pushq  0x10(%rsp)
    0.00 :   c1c7:       mov    0x40(%rsp),%edi
    0.00 :   c1cb:       mov    %r15,%r8
    0.00 :   c1ce:       mov    %r14,%rdx
    0.00 :   c1d1:       mov    %rbx,%rsi
    0.00 :   c1d4:       push   %rdi
    0.00 :   c1d5:       pushq  0xe8(%rsp)
    0.00 :   c1dc:       mov    0xe8(%rsp),%edi
    0.00 :   c1e3:       push   %rdi
    0.00 :   c1e4:       mov    %r13,%rdi
    0.00 :   c1e7:       pushq  0x28(%rsp)
    0.00 :   c1eb:       push   %rax
    0.00 :   c1ec:       callq  b4c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x430>
    0.00 :   c1f1:       add    $0x30,%rsp
    0.00 :   c1f5:       test   %eax,%eax
    0.00 :   c1f7:       je     c1b0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1120>
    0.00 :   c1f9:       mov    (%r12),%rcx
    0.00 :   c1fd:       cmpq   $0x0,0x50(%rsp)
    0.00 :   c203:       je     c340 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x12b0>
    0.00 :   c209:       test   %rcx,%rcx
    0.00 :   c20c:       je     c219 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1189>
    0.00 :   c20e:       movzbl 0x5(%rcx),%eax
    0.00 :   c212:       and    $0x3,%eax
    0.00 :   c215:       cmp    $0x3,%al
    0.00 :   c217:       je     c278 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11e8>
    0.00 :   c219:       mov    0x58(%rsp),%r14
    0.00 :   c21e:       xor    %ebx,%ebx
    0.00 :   c220:       movzbl 0x31c(%r14),%eax
    0.00 :   c228:       and    $0x3,%eax
    0.00 :   c22b:       cmp    $0x2,%al
    0.00 :   c22d:       je     c5fa <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x156a>
    0.00 :   c233:       mov    0x3dc(%r14),%ecx
    0.00 :   c23a:       test   %ecx,%ecx
    0.00 :   c23c:       je     c5ea <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x155a>
    0.00 :   c242:       mov    0x213d8(%rip),%eax        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   c248:       test   $0x804,%eax
    0.00 :   c24d:       jne    c429 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1399>
    0.00 :   c253:       mov    0x50(%rsp),%rax
    0.00 :   c258:       mov    %rax,(%r12)
    0.00 :   c25c:       add    $0x98,%rsp
    0.00 :   c263:       mov    %r14,%rax
    0.00 :   c266:       pop    %rbx
    0.00 :   c267:       pop    %rbp
    0.00 :   c268:       pop    %r12
    0.00 :   c26a:       pop    %r13
    0.00 :   c26c:       pop    %r14
    0.00 :   c26e:       pop    %r15
  100.00 :   c270:       retq
    0.00 :   c271:       nopl   0x0(%rax)
    0.00 :   c278:       cmpl   $0x1,0x38(%rsp)
    0.00 :   c27d:       je     c6d1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1641>
    0.00 :   c283:       mov    0x18(%rsp),%rax
    0.00 :   c288:       pxor   %xmm0,%xmm0
    0.00 :   c28c:       movaps %xmm0,0x70(%rsp)
    0.00 :   c291:       mov    (%rax),%r9
    0.00 :   c294:       test   %r9,%r9
    0.00 :   c297:       je     c705 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1675>
    0.00 :   c29d:       cmpl   $0x4,0x38(%rsp)
    0.00 :   c2a2:       lea    0x70(%rsp),%r8
    0.00 :   c2a7:       mov    0x20(%rsp),%rdx
    0.00 :   c2ac:       mov    %rax,%r15
    0.00 :   c2af:       sete   0x28(%rsp)
    0.00 :   c2b4:       mov    %r8,%rbp
    0.00 :   c2b7:       jmp    c317 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1287>
    0.00 :   c2b9:       nopl   0x0(%rax)
    0.00 :   c2c0:       cmpb   $0x0,0x28(%rsp)
    0.00 :   c2c5:       mov    $0x4,%eax
    0.00 :   c2ca:       je     c322 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1292>
    0.00 :   c2cc:       pushq  $0x0
    0.00 :   c2ce:       mov    %rbp,%r8
    0.00 :   c2d1:       mov    %rbx,%rsi
    0.00 :   c2d4:       mov    %r13,%rdi
    0.00 :   c2d7:       push   %rax
    0.00 :   c2d8:       pushq  0xe8(%rsp)
    0.00 :   c2df:       mov    0xe8(%rsp),%eax
    0.00 :   c2e6:       push   %rax
    0.00 :   c2e7:       pushq  0x28(%rsp)
    0.00 :   c2eb:       push   %rdx
    0.00 :   c2ec:       mov    %r14,%rdx
    0.00 :   c2ef:       callq  b4c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x430>
    0.00 :   c2f4:       add    $0x30,%rsp
    0.00 :   c2f8:       test   %eax,%eax
    0.00 :   c2fa:       jne    c6a2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1612>
    0.00 :   c300:       mov    0x8(%r15),%r9
    0.00 :   c304:       add    $0x8,%r15
    0.00 :   c308:       test   %r9,%r9
    0.00 :   c30b:       je     c6a2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1612>
    0.00 :   c311:       mov    (%r12),%rcx
    0.00 :   c315:       xor    %edx,%edx
    0.00 :   c317:       movzbl 0x4(%rcx),%eax
    0.00 :   c31b:       and    $0xf,%eax
    0.00 :   c31e:       cmp    $0x1,%al
    0.00 :   c320:       je     c2c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1230>
    0.00 :   c322:       mov    $0x1,%eax
    0.00 :   c327:       jmp    c2cc <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x123c>
    0.00 :   c329:       nopl   0x0(%rax)
    0.00 :   c330:       mov    $0x1505,%ebx
    0.00 :   c335:       jmpq   c135 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x10a5>
    0.00 :   c33a:       nopw   0x0(%rax,%rax,1)
    0.00 :   c340:       test   %rcx,%rcx
    0.00 :   c343:       je     c354 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x12c4>
    0.00 :   c345:       movzbl 0x4(%rcx),%eax
    0.00 :   c349:       shr    $0x4,%al
    0.00 :   c34c:       cmp    $0x2,%al
    0.00 :   c34e:       je     c3d6 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1346>
    0.00 :   c354:       testb  $0x1,0x212c6(%rip)        # 2d621 <_rtld_global_ro@@GLIBC_PRIVATE+0x1>
    0.00 :   c35b:       jne    c3d6 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1346>
    0.00 :   c35d:       mov    0x10(%rsp),%rax
    0.00 :   c362:       test   %rax,%rax
    0.00 :   c365:       je     c7f8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1768>
    0.00 :   c36b:       mov    0x8(%rax),%rsi
    0.00 :   c36f:       lea    0x18fcc(%rip),%r8        # 25342 <_dl_catch_error@@GLIBC_PRIVATE+0x7602>
    0.00 :   c376:       cmpq   $0x0,0x8(%rsp)
    0.00 :   c37c:       mov    %r8,%r9
    0.00 :   c37f:       movzbl (%rsi),%eax
    0.00 :   c382:       je     c39c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x130c>
    0.00 :   c384:       mov    0x8(%rsp),%rbx
    0.00 :   c389:       lea    0x19349(%rip),%r8        # 256d9 <_dl_catch_error@@GLIBC_PRIVATE+0x7999>
    0.00 :   c390:       mov    (%rbx),%r9
    0.00 :   c393:       test   %r9,%r9
    0.00 :   c396:       je     ca45 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x19b5>
    0.00 :   c39c:       test   %al,%al
    0.00 :   c39e:       je     c827 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1797>
    0.00 :   c3a4:       lea    0x70(%rsp),%rbp
    0.00 :   c3a9:       mov    %r13,%rcx
    0.00 :   c3ac:       lea    0x19342(%rip),%rdx        # 256f5 <_dl_catch_error@@GLIBC_PRIVATE+0x79b5>
    0.00 :   c3b3:       xor    %eax,%eax
    0.00 :   c3b5:       mov    %rbp,%rdi
    0.00 :   c3b8:       callq  18db0 <_dl_exception_create_format@@GLIBC_PRIVATE>
    0.00 :   c3bd:       xor    %edi,%edi
    0.00 :   c3bf:       lea    0x19348(%rip),%rdx        # 2570e <_dl_catch_error@@GLIBC_PRIVATE+0x79ce>
    0.00 :   c3c6:       mov    %rbp,%rsi
    0.00 :   c3c9:       callq  1db30 <_dl_signal_error@@GLIBC_PRIVATE+0x60>
    0.00 :   c3ce:       mov    %rbp,%rdi
    0.00 :   c3d1:       callq  19260 <_dl_exception_free@@GLIBC_PRIVATE>
    0.00 :   c3d6:       movq   $0x0,(%r12)
    0.00 :   c3de:       xor    %r14d,%r14d
    0.00 :   c3e1:       jmpq   c25c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11cc>
    0.00 :   c3e6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   c3f0:       mov    (%r9),%rax
    0.00 :   c3f3:       mov    (%rax),%rdi
    0.00 :   c3f6:       cmp    %rdi,0xd8(%rsp)
    0.00 :   c3fe:       je     c8f9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1869>
    0.00 :   c404:       mov    0xd8(%rsp),%rsi
    0.00 :   c40c:       xor    %edx,%edx
    0.00 :   c40e:       xchg   %ax,%ax
    0.00 :   c410:       add    $0x1,%rdx
    0.00 :   c414:       cmp    %rsi,(%rax,%rdx,8)
    0.00 :   c418:       jne    c410 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1380>
    0.00 :   c41a:       mov    %rdx,0x20(%rsp)
    0.00 :   c41f:       mov    0x18(%rsp),%rbp
    0.00 :   c424:       jmpq   c196 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1106>
    0.00 :   c429:       test   $0x4,%al
    0.00 :   c42b:       je     c4cf <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x143f>
    0.00 :   c431:       mov    0x8(%r14),%rcx
    0.00 :   c435:       test   %ebx,%ebx
    0.00 :   c437:       mov    0x30(%r14),%r8
    0.00 :   c43b:       lea    0x192a2(%rip),%r9        # 256e4 <_dl_catch_error@@GLIBC_PRIVATE+0x79a4>
    0.00 :   c442:       lea    0x192a5(%rip),%rax        # 256ee <_dl_catch_error@@GLIBC_PRIVATE+0x79ae>
    0.00 :   c449:       cmove  %rax,%r9
    0.00 :   c44d:       cmpb   $0x0,(%rcx)
    0.00 :   c450:       jne    c46a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x13da>
    0.00 :   c452:       mov    0x211a7(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   c459:       mov    (%rax),%rcx
    0.00 :   c45c:       lea    0x18c2f(%rip),%rax        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   c463:       test   %rcx,%rcx
    0.00 :   c466:       cmove  %rax,%rcx
    0.00 :   c46a:       mov    0x10(%rsp),%rax
    0.00 :   c46f:       mov    0x8(%rax),%rsi
    0.00 :   c473:       mov    0x30(%rax),%rdx
    0.00 :   c477:       cmpb   $0x0,(%rsi)
    0.00 :   c47a:       jne    c494 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1404>
    0.00 :   c47c:       mov    0x2117d(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   c483:       mov    (%rax),%rsi
    0.00 :   c486:       lea    0x18c05(%rip),%rax        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   c48d:       test   %rsi,%rsi
    0.00 :   c490:       cmove  %rax,%rsi
    0.00 :   c494:       sub    $0x8,%rsp
    0.00 :   c498:       lea    0x1b389(%rip),%rdi        # 27828 <_dl_catch_error@@GLIBC_PRIVATE+0x9ae8>
    0.00 :   c49f:       xor    %eax,%eax
    0.00 :   c4a1:       push   %r13
    0.00 :   c4a3:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   c4a8:       pop    %rax
    0.00 :   c4a9:       pop    %rdx
    0.00 :   c4aa:       mov    0x8(%rsp),%rax
    0.00 :   c4af:       test   %rax,%rax
    0.00 :   c4b2:       je     c8e0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1850>
    0.00 :   c4b8:       mov    (%rax),%rsi
    0.00 :   c4bb:       lea    0x19260(%rip),%rdi        # 25722 <_dl_catch_error@@GLIBC_PRIVATE+0x79e2>
    0.00 :   c4c2:       xor    %eax,%eax
    0.00 :   c4c4:       callq  12a40 <_dl_debug_state@@GLIBC_PRIVATE+0x860>
    0.00 :   c4c9:       mov    0x21151(%rip),%eax        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   c4cf:       test   $0x8,%ah
    0.00 :   c4d2:       je     c6fb <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x166b>
    0.00 :   c4d8:       mov    0x212c1(%rip),%rdx        # 2d7a0 <_rtld_global_ro@@GLIBC_PRIVATE+0x180>
    0.00 :   c4df:       pxor   %xmm0,%xmm0
    0.00 :   c4e3:       mov    0x21b76(%rip),%rax        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   c4ea:       movaps %xmm0,0x60(%rsp)
    0.00 :   c4ef:       test   %rdx,%rdx
    0.00 :   c4f2:       je     c70c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x167c>
    0.00 :   c4f8:       cmp    %rax,%rdx
    0.00 :   c4fb:       je     c70c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x167c>
    0.00 :   c501:       mov    0x50(%rsp),%rax
    0.00 :   c506:       test   %rax,%rax
    0.00 :   c509:       je     c93c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18ac>
    0.00 :   c50f:       movzbl 0x4(%rax),%edx
    0.00 :   c513:       andl   $0x3,0x38(%rsp)
    0.00 :   c518:       and    $0xf,%edx
    0.00 :   c51b:       cmp    $0x6,%dl
    0.00 :   c51e:       je     cb78 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ae8>
    0.00 :   c524:       xor    %esi,%esi
    0.00 :   c526:       mov    0x38(%rsp),%ebx
    0.00 :   c52a:       mov    %ebx,%ecx
    0.00 :   c52c:       or     $0x8,%ecx
    0.00 :   c52f:       cmp    $0xa,%dl
    0.00 :   c532:       cmovne %ebx,%ecx
    0.00 :   c535:       mov    %ecx,0x38(%rsp)
    0.00 :   c539:       test   %esi,%esi
    0.00 :   c53b:       jne    c844 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x17b4>
    0.00 :   c541:       mov    0x21258(%rip),%rdx        # 2d7a0 <_rtld_global_ro@@GLIBC_PRIVATE+0x180>
    0.00 :   c548:       test   %rdx,%rdx
    0.00 :   c54b:       sete   %cl
    0.00 :   c54e:       cmp    %rdx,0x10(%rsp)
    0.00 :   c553:       sete   %dl
    0.00 :   c556:       or     %dl,%cl
    0.00 :   c558:       jne    c561 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x14d1>
    0.00 :   c55a:       cmpl   $0x3,0x38(%rsp)
    0.00 :   c55f:       jle    c5e0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1550>
    0.00 :   c561:       mov    0x10(%rsp),%rbx
    0.00 :   c566:       mov    (%r12),%rdx
    0.00 :   c56a:       mov    0x350(%rbx),%r8
    0.00 :   c571:       sub    %r8,%rdx
    0.00 :   c574:       test   %rax,%rax
    0.00 :   c577:       je     cffd <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f6d>
    0.00 :   c57d:       mov    0x8(%rax),%rcx
    0.00 :   c581:       mov    0x58(%rsp),%rax
    0.00 :   c586:       mov    0x350(%rax),%rax
    0.00 :   c58d:       sub    $0x8,%rsp
    0.00 :   c591:       mov    $0x10,%r9d
    0.00 :   c597:       mov    $0x1,%edi
    0.00 :   c59c:       push   %rcx
    0.00 :   c59d:       lea    0x1b2bc(%rip),%rsi        # 27860 <_dl_catch_error@@GLIBC_PRIVATE+0x9b20>
    0.00 :   c5a4:       mov    $0x10,%ecx
    0.00 :   c5a9:       pushq  $0x10
    0.00 :   c5ab:       push   %rax
    0.00 :   c5ac:       xor    %eax,%eax
    0.00 :   c5ae:       pushq  $0x10
    0.00 :   c5b0:       push   %rdx
    0.00 :   c5b1:       lea    0x1918c(%rip),%rdx        # 25744 <_dl_catch_error@@GLIBC_PRIVATE+0x7a04>
    0.00 :   c5b8:       callq  12af0 <_dl_debug_state@@GLIBC_PRIVATE+0x910>
    0.00 :   c5bd:       add    $0x30,%rsp
    0.00 :   c5c1:       mov    0x38(%rsp),%edx
    0.00 :   c5c5:       xor    %eax,%eax
    0.00 :   c5c7:       mov    %r13,%rcx
    0.00 :   c5ca:       lea    0x1916b(%rip),%rsi        # 2573c <_dl_catch_error@@GLIBC_PRIVATE+0x79fc>
    0.00 :   c5d1:       mov    $0x1,%edi
    0.00 :   c5d6:       callq  12af0 <_dl_debug_state@@GLIBC_PRIVATE+0x910>
    0.00 :   c5db:       mov    0x50(%rsp),%rax
    0.00 :   c5e0:       mov    0x58(%rsp),%r14
    0.00 :   c5e5:       jmpq   c258 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11c8>
    0.00 :   c5ea:       movl   $0x1,0x3dc(%r14)
    0.00 :   c5f5:       jmpq   c242 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11b2>
    0.00 :   c5fa:       cmp    %r14,0x10(%rsp)
    0.00 :   c5ff:       je     c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c605:       testb  $0x1,0xd0(%rsp)
    0.00 :   c60d:       je     c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c613:       cmpb   $0x0,0x31f(%r14)
    0.00 :   c61b:       jne    c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c621:       mov    0xd0(%rsp),%eax
    0.00 :   c628:       and    $0x8,%eax
    0.00 :   c62b:       mov    %eax,0x28(%rsp)
    0.00 :   c62f:       je     c63f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x15af>
    0.00 :   c631:       cmpb   $0x0,0x320(%r14)
    0.00 :   c639:       jne    c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c63f:       mov    0x10(%rsp),%rax
    0.00 :   c644:       mov    0x3d0(%rax),%rdi
    0.00 :   c64b:       mov    %rdi,%rbp
    0.00 :   c64e:       mov    %rdi,0x20(%rsp)
    0.00 :   c653:       mov    0x3c8(%rax),%rax
    0.00 :   c65a:       mov    %rax,%r15
    0.00 :   c65d:       mov    %rax,0x20(%rsp)
    0.00 :   c662:       test   %r15,%r15
    0.00 :   c665:       je     c90c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x187c>
    0.00 :   c66b:       mov    (%r15),%rax
    0.00 :   c66e:       xor    %edx,%edx
    0.00 :   c670:       test   %rax,%rax
    0.00 :   c673:       jne    c693 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1603>
    0.00 :   c675:       jmpq   c90c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x187c>
    0.00 :   c67a:       nopw   0x0(%rax,%rax,1)
    0.00 :   c680:       lea    0x1(%rdx),%eax
    0.00 :   c683:       mov    %rax,%rdx
    0.00 :   c686:       mov    (%r15,%rax,8),%rax
    0.00 :   c68a:       test   %rax,%rax
    0.00 :   c68d:       je     c90c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x187c>
    0.00 :   c693:       cmp    %r14,%rax
    0.00 :   c696:       jne    c680 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x15f0>
    0.00 :   c698:       mov    0x58(%rsp),%r14
    0.00 :   c69d:       jmpq   c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c6a2:       cmpq   $0x0,0x70(%rsp)
    0.00 :   c6a8:       je     c705 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1675>
    0.00 :   c6aa:       mov    0x10(%rsp),%rbx
    0.00 :   c6af:       cmp    %rbx,0x78(%rsp)
    0.00 :   c6b4:       je     c705 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1675>
    0.00 :   c6b6:       mov    (%r12),%rax
    0.00 :   c6ba:       mov    %rbx,0x58(%rsp)
    0.00 :   c6bf:       mov    %rbx,%r14
    0.00 :   c6c2:       mov    %rax,0x50(%rsp)
    0.00 :   c6c7:       mov    $0x1,%ebx
    0.00 :   c6cc:       jmpq   c220 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1190>
    0.00 :   c6d1:       mov    0x10(%rsp),%rax
    0.00 :   c6d6:       cmp    %rax,0x58(%rsp)
    0.00 :   c6db:       je     c6ec <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x165c>
    0.00 :   c6dd:       movq   %rcx,%xmm0
    0.00 :   c6e2:       movhps 0x10(%rsp),%xmm0
    0.00 :   c6e7:       movaps %xmm0,0x50(%rsp)
    0.00 :   c6ec:       mov    0x10(%rsp),%r14
    0.00 :   c6f1:       mov    $0x1,%ebx
    0.00 :   c6f6:       jmpq   c233 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11a3>
    0.00 :   c6fb:       mov    0x58(%rsp),%r14
    0.00 :   c700:       jmpq   c253 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11c3>
    0.00 :   c705:       mov    0x58(%rsp),%r14
    0.00 :   c70a:       jmp    c6c7 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1637>
    0.00 :   c70c:       cmp    %rax,0x10(%rsp)
    0.00 :   c711:       je     c501 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1471>
    0.00 :   c717:       movzbl 0x0(%r13),%edx
    0.00 :   c71c:       test   %dl,%dl
    0.00 :   c71e:       je     cc60 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1bd0>
    0.00 :   c724:       mov    %r13,%rcx
    0.00 :   c727:       mov    $0x1505,%esi
    0.00 :   c72c:       nopl   0x0(%rax)
    0.00 :   c730:       mov    %rsi,%rax
    0.00 :   c733:       movzbl %dl,%edx
    0.00 :   c736:       add    $0x1,%rcx
    0.00 :   c73a:       shl    $0x5,%rax
    0.00 :   c73e:       add    %rax,%rsi
    0.00 :   c741:       add    %rdx,%rsi
    0.00 :   c744:       movzbl (%rcx),%edx
    0.00 :   c747:       test   %dl,%dl
    0.00 :   c749:       jne    c730 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x16a0>
    0.00 :   c74b:       mov    %esi,%esi
    0.00 :   c74d:       mov    $0xffffffff,%eax
    0.00 :   c752:       lea    0x48(%rsp),%rdx
    0.00 :   c757:       mov    (%r12),%rcx
    0.00 :   c75b:       mov    %r13,%rdi
    0.00 :   c75e:       mov    %rax,0x48(%rsp)
    0.00 :   c763:       mov    0x10(%rsp),%rax
    0.00 :   c768:       mov    0x21939(%rip),%r14        # 2e0a8 <_rtld_global@@GLIBC_PRIVATE+0x48>
    0.00 :   c76f:       movq   $0x0,0x2192e(%rip)        # 2e0a8 <_rtld_global@@GLIBC_PRIVATE+0x48>
    0.00 :   c77a:       push   %rax
    0.00 :   c77b:       mov    0x40(%rsp),%ebx
    0.00 :   c77f:       mov    0x398(%rax),%r9
    0.00 :   c786:       push   %rbx
    0.00 :   c787:       pushq  $0x0
    0.00 :   c789:       pushq  $0x0
    0.00 :   c78b:       pushq  0x28(%rsp)
    0.00 :   c78f:       pushq  $0x0
    0.00 :   c791:       lea    0x90(%rsp),%r8
    0.00 :   c799:       mov    %rdx,0x50(%rsp)
    0.00 :   c79e:       mov    %rsi,0x48(%rsp)
    0.00 :   c7a3:       callq  b4c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x430>
    0.00 :   c7a8:       mov    0x80(%rsp),%rax
    0.00 :   c7b0:       add    $0x30,%rsp
    0.00 :   c7b4:       mov    0x18(%rsp),%rsi
    0.00 :   c7b9:       cmp    %rax,0x60(%rsp)
    0.00 :   c7be:       mov    0x20(%rsp),%rdx
    0.00 :   c7c3:       je     ca6d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x19dd>
    0.00 :   c7c9:       mov    %r14,0x218d8(%rip)        # 2e0a8 <_rtld_global@@GLIBC_PRIVATE+0x48>
    0.00 :   c7d0:       test   %rax,%rax
    0.00 :   c7d3:       je     ca51 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x19c1>
    0.00 :   c7d9:       movzbl 0x4(%rax),%edx
    0.00 :   c7dd:       andl   $0x3,0x38(%rsp)
    0.00 :   c7e2:       and    $0xf,%edx
    0.00 :   c7e5:       cmp    $0x6,%dl
    0.00 :   c7e8:       je     ced1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e41>
    0.00 :   c7ee:       mov    $0x1,%esi
    0.00 :   c7f3:       jmpq   c526 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1496>
    0.00 :   c7f8:       lea    0x18b43(%rip),%r8        # 25342 <_dl_catch_error@@GLIBC_PRIVATE+0x7602>
    0.00 :   c7ff:       cmpq   $0x0,0x8(%rsp)
    0.00 :   c805:       mov    %r8,%r9
    0.00 :   c808:       je     c827 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1797>
    0.00 :   c80a:       mov    0x8(%rsp),%rax
    0.00 :   c80f:       lea    0x18ec3(%rip),%r8        # 256d9 <_dl_catch_error@@GLIBC_PRIVATE+0x7999>
    0.00 :   c816:       mov    (%rax),%r9
    0.00 :   c819:       lea    0x18b22(%rip),%rax        # 25342 <_dl_catch_error@@GLIBC_PRIVATE+0x7602>
    0.00 :   c820:       test   %r9,%r9
    0.00 :   c823:       cmove  %rax,%r9
    0.00 :   c827:       mov    0x20dd2(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   c82e:       mov    (%rax),%rsi
    0.00 :   c831:       lea    0x1885a(%rip),%rax        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   c838:       test   %rsi,%rsi
    0.00 :   c83b:       cmove  %rax,%rsi
    0.00 :   c83f:       jmpq   c3a4 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1314>
    0.00 :   c844:       mov    0x10(%rsp),%rbx
    0.00 :   c849:       mov    0x8(%rax),%rcx
    0.00 :   c84d:       mov    0x58(%rsp),%rax
    0.00 :   c852:       mov    (%r12),%rdx
    0.00 :   c856:       mov    0x350(%rbx),%r8
    0.00 :   c85d:       mov    0x350(%rax),%rax
    0.00 :   c864:       sub    %r8,%rdx
    0.00 :   c867:       sub    $0x8,%rsp
    0.00 :   c86b:       mov    $0x10,%r9d
    0.00 :   c871:       mov    $0x1,%edi
    0.00 :   c876:       push   %rcx
    0.00 :   c877:       lea    0x1afe2(%rip),%rsi        # 27860 <_dl_catch_error@@GLIBC_PRIVATE+0x9b20>
    0.00 :   c87e:       mov    $0x10,%ecx
    0.00 :   c883:       pushq  $0x10
    0.00 :   c885:       push   %rax
    0.00 :   c886:       xor    %eax,%eax
    0.00 :   c888:       pushq  $0x10
    0.00 :   c88a:       push   %rdx
    0.00 :   c88b:       lea    0x18eb9(%rip),%rdx        # 2574b <_dl_catch_error@@GLIBC_PRIVATE+0x7a0b>
    0.00 :   c892:       callq  12af0 <_dl_debug_state@@GLIBC_PRIVATE+0x910>
    0.00 :   c897:       mov    0x90(%rsp),%rax
    0.00 :   c89f:       xor    %r9d,%r9d
    0.00 :   c8a2:       add    $0x30,%rsp
    0.00 :   c8a6:       xor    %ecx,%ecx
    0.00 :   c8a8:       test   %rax,%rax
    0.00 :   c8ab:       je     c8bd <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x182d>
    0.00 :   c8ad:       mov    0x8(%rax),%r9
    0.00 :   c8b1:       mov    0x68(%rsp),%rax
    0.00 :   c8b6:       mov    0x350(%rax),%rcx
    0.00 :   c8bd:       mov    $0x10,%r8d
    0.00 :   c8c3:       mov    $0x10,%edx
    0.00 :   c8c8:       lea    0x18e5a(%rip),%rsi        # 25729 <_dl_catch_error@@GLIBC_PRIVATE+0x79e9>
    0.00 :   c8cf:       xor    %eax,%eax
    0.00 :   c8d1:       mov    $0x1,%edi
    0.00 :   c8d6:       callq  12af0 <_dl_debug_state@@GLIBC_PRIVATE+0x910>
    0.00 :   c8db:       jmpq   c5c1 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1531>
    0.00 :   c8e0:       xor    %eax,%eax
    0.00 :   c8e2:       lea    0x18a58(%rip),%rdi        # 25341 <_dl_catch_error@@GLIBC_PRIVATE+0x7601>
    0.00 :   c8e9:       callq  12a40 <_dl_debug_state@@GLIBC_PRIVATE+0x860>
    0.00 :   c8ee:       mov    0x20d2c(%rip),%eax        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   c8f4:       jmpq   c4cf <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x143f>
    0.00 :   c8f9:       movq   $0x0,0x20(%rsp)
    0.00 :   c902:       mov    0x18(%rsp),%rbp
    0.00 :   c907:       jmpq   c196 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1106>
    0.00 :   c90c:       test   %rbp,%rbp
    0.00 :   c90f:       je     c975 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18e5>
    0.00 :   c911:       mov    0x0(%rbp),%r9d
    0.00 :   c915:       test   %r9d,%r9d
    0.00 :   c918:       je     c978 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18e8>
    0.00 :   c91a:       lea    -0x1(%r9),%edx
    0.00 :   c91e:       lea    0x8(%rbp),%rax
    0.00 :   c922:       lea    0x10(%rbp,%rdx,8),%rdx
    0.00 :   c927:       jmp    c932 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18a2>
    0.00 :   c929:       add    $0x8,%rax
    0.00 :   c92d:       cmp    %rax,%rdx
    0.00 :   c930:       je     c978 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18e8>
    0.00 :   c932:       cmp    %r14,(%rax)
    0.00 :   c935:       jne    c929 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1899>
    0.00 :   c937:       jmpq   c698 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1608>
    0.00 :   c93c:       cmp    %rdx,0x10(%rsp)
    0.00 :   c941:       sete   %cl
    0.00 :   c944:       test   %rdx,%rdx
    0.00 :   c947:       sete   %dl
    0.00 :   c94a:       or     %dl,%cl
    0.00 :   c94c:       jne    c959 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x18c9>
    0.00 :   c94e:       cmpl   $0x3,0x38(%rsp)
    0.00 :   c953:       jle    c5e0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1550>
    0.00 :   c959:       mov    0x10(%rsp),%rax
    0.00 :   c95e:       mov    (%r12),%rdx
    0.00 :   c962:       xor    %ecx,%ecx
    0.00 :   c964:       mov    0x350(%rax),%r8
    0.00 :   c96b:       xor    %eax,%eax
    0.00 :   c96d:       sub    %r8,%rdx
    0.00 :   c970:       jmpq   c58d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x14fd>
    0.00 :   c975:       xor    %r9d,%r9d
    0.00 :   c978:       mov    0x478(%r14),%rax
    0.00 :   c97f:       mov    %rax,0x30(%rsp)
    0.00 :   c984:       mov    0xd0(%rsp),%eax
    0.00 :   c98b:       and    $0x4,%eax
    0.00 :   c98e:       mov    %eax,0x20(%rsp)
    0.00 :   c992:       jne    cc6a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1bda>
    0.00 :   c998:       mov    %r9d,0x3c(%rsp)
    0.00 :   c99d:       lea    0x21fc4(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   c9a4:       callq  *0x225be(%rip)        # 2ef68 <_rtld_global@@GLIBC_PRIVATE+0xf08>
    0.00 :   c9aa:       mov    0x3c(%rsp),%r9d
    0.00 :   c9af:       mov    0x10(%rsp),%rax
    0.00 :   c9b4:       lea    0x216a5(%rip),%rdx        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   c9bb:       mov    0x30(%rax),%r8
    0.00 :   c9bf:       lea    (%r8,%r8,8),%rax
    0.00 :   c9c3:       shl    $0x4,%rax
    0.00 :   c9c7:       mov    (%rdx,%rax,1),%rax
    0.00 :   c9cb:       cmp    %r14,%rax
    0.00 :   c9ce:       je     cad3 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1a43>
    0.00 :   c9d4:       test   %rax,%rax
    0.00 :   c9d7:       jne    c9e9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1959>
    0.00 :   c9d9:       jmp    c9f2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1962>
    0.00 :   c9db:       nopl   0x0(%rax,%rax,1)
    0.00 :   c9e0:       cmp    %r14,%rax
    0.00 :   c9e3:       je     cad3 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1a43>
    0.00 :   c9e9:       mov    0x18(%rax),%rax
    0.00 :   c9ed:       test   %rax,%rax
    0.00 :   c9f0:       jne    c9e0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1950>
    0.00 :   c9f2:       lea    0x21f6f(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   c9f9:       callq  *0x22571(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   c9ff:       mov    0x20(%rsp),%r11d
    0.00 :   ca04:       test   %r11d,%r11d
    0.00 :   ca07:       jne    cd1b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c8b>
    0.00 :   ca0d:       pushq  0xd8(%rsp)
    0.00 :   ca14:       mov    %r13,%rdi
    0.00 :   ca17:       mov    %r12,%rdx
    0.00 :   ca1a:       mov    0xd8(%rsp),%eax
    0.00 :   ca21:       push   %rax
    0.00 :   ca22:       mov    0x48(%rsp),%r9d
    0.00 :   ca27:       mov    0x18(%rsp),%r8
    0.00 :   ca2c:       mov    0x28(%rsp),%rcx
    0.00 :   ca31:       mov    0x20(%rsp),%rsi
    0.00 :   ca36:       callq  c0d0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1040>
    0.00 :   ca3b:       pop    %rsi
    0.00 :   ca3c:       pop    %rdi
    0.00 :   ca3d:       mov    %rax,%r14
    0.00 :   ca40:       jmpq   c25c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x11cc>
    0.00 :   ca45:       lea    0x188f6(%rip),%r9        # 25342 <_dl_catch_error@@GLIBC_PRIVATE+0x7602>
    0.00 :   ca4c:       jmpq   c39c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x130c>
    0.00 :   ca51:       mov    0x10(%rsp),%rax
    0.00 :   ca56:       mov    (%r12),%rdx
    0.00 :   ca5a:       xor    %ecx,%ecx
    0.00 :   ca5c:       mov    0x350(%rax),%r8
    0.00 :   ca63:       xor    %eax,%eax
    0.00 :   ca65:       sub    %r8,%rdx
    0.00 :   ca68:       jmpq   c867 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x17d7>
    0.00 :   ca6d:       mov    0x68(%rsp),%rdi
    0.00 :   ca72:       cmp    0x58(%rsp),%rdi
    0.00 :   ca77:       jne    c7c9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1739>
    0.00 :   ca7d:       test   %rax,%rax
    0.00 :   ca80:       je     ca94 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1a04>
    0.00 :   ca82:       mov    0x10(%rsp),%rbx
    0.00 :   ca87:       cmpb   $0x0,0x31d(%rbx)
    0.00 :   ca8e:       js     cf1b <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e8b>
    0.00 :   ca94:       mov    %r14,0x2160d(%rip)        # 2e0a8 <_rtld_global@@GLIBC_PRIVATE+0x48>
    0.00 :   ca9b:       test   %rax,%rax
    0.00 :   ca9e:       jne    c50f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x147f>
    0.00 :   caa4:       mov    0x20cf5(%rip),%rax        # 2d7a0 <_rtld_global_ro@@GLIBC_PRIVATE+0x180>
    0.00 :   caab:       test   %rax,%rax
    0.00 :   caae:       sete   %dl
    0.00 :   cab1:       cmp    %rax,0x10(%rsp)
    0.00 :   cab6:       sete   %al
    0.00 :   cab9:       or     %al,%dl
    0.00 :   cabb:       jne    cfea <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f5a>
    0.00 :   cac1:       cmpl   $0x3,0x38(%rsp)
    0.00 :   cac6:       jg     cfea <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f5a>
    0.00 :   cacc:       xor    %eax,%eax
    0.00 :   cace:       jmpq   c5e0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1550>
    0.00 :   cad3:       test   %rax,%rax
    0.00 :   cad6:       je     c9f2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1962>
    0.00 :   cadc:       mov    0x30(%rsp),%rax
    0.00 :   cae1:       cmp    0x478(%r14),%rax
    0.00 :   cae8:       jne    c9f2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1962>
    0.00 :   caee:       cmpb   $0x0,0x31f(%r14)
    0.00 :   caf6:       jne    cc3a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1baa>
    0.00 :   cafc:       mov    0x28(%rsp),%r10d
    0.00 :   cb01:       test   %r10d,%r10d
    0.00 :   cb04:       je     cb14 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1a84>
    0.00 :   cb06:       cmpb   $0x0,0x320(%r14)
    0.00 :   cb0e:       jne    cc3a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1baa>
    0.00 :   cb14:       mov    0x10(%rsp),%rax
    0.00 :   cb19:       movzbl 0x31c(%rax),%eax
    0.00 :   cb20:       mov    %al,0x18(%rsp)
    0.00 :   cb24:       and    $0x3,%eax
    0.00 :   cb27:       cmp    $0x2,%al
    0.00 :   cb29:       je     cba8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b18>
    0.00 :   cb2b:       testb  $0x4,0x20aee(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   cb32:       jne    d020 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f90>
    0.00 :   cb38:       cmpl   $0x0,0x28(%rsp)
    0.00 :   cb3d:       jne    cd3d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cad>
    0.00 :   cb43:       movb   $0x1,0x31f(%r14)
    0.00 :   cb4b:       lea    0x21e16(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cb52:       callq  *0x22418(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   cb58:       cmpl   $0x0,0x20(%rsp)
    0.00 :   cb5d:       je     c698 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1608>
    0.00 :   cb63:       movl   $0x1,%fs:0x1c
    0.00 :   cb6f:       jmpq   c698 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1608>
    0.00 :   cb74:       nopl   0x0(%rax)
    0.00 :   cb78:       mov    (%r12),%rdx
    0.00 :   cb7c:       mov    0x10(%rsp),%rbx
    0.00 :   cb81:       movl   $0x4,0x38(%rsp)
    0.00 :   cb89:       mov    0x8(%rax),%rcx
    0.00 :   cb8d:       mov    0x58(%rsp),%rax
    0.00 :   cb92:       mov    0x350(%rbx),%r8
    0.00 :   cb99:       mov    0x350(%rax),%rax
    0.00 :   cba0:       sub    %r8,%rdx
    0.00 :   cba3:       jmpq   c58d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x14fd>
    0.00 :   cba8:       mov    0x10(%rsp),%rax
    0.00 :   cbad:       mov    0x3d8(%rax),%eax
    0.00 :   cbb3:       cmp    %r9d,%eax
    0.00 :   cbb6:       jbe    cdaf <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d1f>
    0.00 :   cbbc:       mov    0x10(%rsp),%rdi
    0.00 :   cbc1:       mov    %r9d,%edx
    0.00 :   cbc4:       mov    0x3d0(%rdi),%rax
    0.00 :   cbcb:       mov    %r14,0x8(%rax,%rdx,8)
    0.00 :   cbd0:       mov    0x3d0(%rdi),%rax
    0.00 :   cbd7:       add    $0x1,%r9d
    0.00 :   cbdb:       mov    %r9d,(%rax)
    0.00 :   cbde:       testb  $0x40,0x20a3b(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   cbe5:       je     cc3a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1baa>
    0.00 :   cbe7:       mov    0x10(%rsp),%rax
    0.00 :   cbec:       mov    0x8(%rax),%rcx
    0.00 :   cbf0:       mov    0x30(%rax),%r8
    0.00 :   cbf4:       cmpb   $0x0,(%rcx)
    0.00 :   cbf7:       jne    cc0c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b7c>
    0.00 :   cbf9:       mov    0x20a00(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   cc00:       mov    (%rax),%rcx
    0.00 :   cc03:       test   %rcx,%rcx
    0.00 :   cc06:       je     cf0f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e7f>
    0.00 :   cc0c:       mov    0x8(%r14),%rsi
    0.00 :   cc10:       mov    0x30(%r14),%rdx
    0.00 :   cc14:       cmpb   $0x0,(%rsi)
    0.00 :   cc17:       jne    cc2c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b9c>
    0.00 :   cc19:       mov    0x209e0(%rip),%rax        # 2d600 <_dl_argv@@GLIBC_PRIVATE>
    0.00 :   cc20:       mov    (%rax),%rsi
    0.00 :   cc23:       test   %rsi,%rsi
    0.00 :   cc26:       je     ce20 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d90>
    0.00 :   cc2c:       lea    0x1abb5(%rip),%rdi        # 277e8 <_dl_catch_error@@GLIBC_PRIVATE+0x9aa8>
    0.00 :   cc33:       xor    %eax,%eax
    0.00 :   cc35:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   cc3a:       lea    0x21d27(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cc41:       callq  *0x22329(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   cc47:       mov    0x20(%rsp),%r8d
    0.00 :   cc4c:       test   %r8d,%r8d
    0.00 :   cc4f:       je     c698 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1608>
    0.00 :   cc55:       jmpq   cb63 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ad3>
    0.00 :   cc5a:       nopw   0x0(%rax,%rax,1)
    0.00 :   cc60:       mov    $0x1505,%esi
    0.00 :   cc65:       jmpq   c74d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x16bd>
    0.00 :   cc6a:       xor    %eax,%eax
    0.00 :   cc6c:       xchg   %eax,%fs:0x1c
    0.00 :   cc74:       cmp    $0x2,%eax
    0.00 :   cc77:       jne    cc9a <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c0a>
    0.00 :   cc79:       mov    %fs:0x10,%rdi
    0.00 :   cc82:       xor    %r10d,%r10d
    0.00 :   cc85:       add    $0x1c,%rdi
    0.00 :   cc89:       mov    $0x1,%edx
    0.00 :   cc8e:       mov    $0x81,%esi
    0.00 :   cc93:       mov    $0xca,%eax
    0.00 :   cc98:       syscall
    0.00 :   cc9a:       mov    %r9d,0x3c(%rsp)
    0.00 :   cc9f:       lea    0x21cc2(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cca6:       callq  *0x222bc(%rip)        # 2ef68 <_rtld_global@@GLIBC_PRIVATE+0xf08>
    0.00 :   ccac:       mov    0x10(%rsp),%rdi
    0.00 :   ccb1:       mov    %r14,%rax
    0.00 :   ccb4:       mov    0x3c(%rsp),%r9d
    0.00 :   ccb9:       mov    0x3c8(%rdi),%rdx
    0.00 :   ccc0:       mov    %rax,%r14
    0.00 :   ccc3:       test   %rdx,%rdx
    0.00 :   ccc6:       je     cd62 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cd2>
    0.00 :   cccc:       cmp    %r15,%rdx
    0.00 :   cccf:       je     cd62 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cd2>
    0.00 :   ccd5:       mov    (%rdx),%rcx
    0.00 :   ccd8:       test   %rcx,%rcx
    0.00 :   ccdb:       je     cd62 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cd2>
    0.00 :   cce1:       xor    %esi,%esi
    0.00 :   cce3:       jmp    ccf4 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c64>
    0.00 :   cce5:       lea    0x1(%rsi),%ecx
    0.00 :   cce8:       mov    %rcx,%rsi
    0.00 :   cceb:       mov    (%rdx,%rcx,8),%rcx
    0.00 :   ccef:       test   %rcx,%rcx
    0.00 :   ccf2:       je     cd62 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cd2>
    0.00 :   ccf4:       cmp    %rcx,%rax
    0.00 :   ccf7:       jne    cce5 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c55>
    0.00 :   ccf9:       mov    0x22270(%rip),%rdx        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   cd00:       mov    0x30(%rsp),%rdi
    0.00 :   cd05:       cmp    0x478(%rax),%rdi
    0.00 :   cd0c:       je     cf01 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e71>
    0.00 :   cd12:       lea    0x21c4f(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cd19:       callq  *%rdx
    0.00 :   cd1b:       movl   $0x1,%fs:0x1c
    0.00 :   cd27:       mov    0x10(%rsp),%rax
    0.00 :   cd2c:       mov    0x390(%rax),%rax
    0.00 :   cd33:       mov    %rax,0x18(%rsp)
    0.00 :   cd38:       jmpq   ca0d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x197d>
    0.00 :   cd3d:       movb   $0x1,0x320(%r14)
    0.00 :   cd45:       lea    0x21c1c(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cd4c:       callq  *0x2221e(%rip)        # 2ef70 <_rtld_global@@GLIBC_PRIVATE+0xf10>
    0.00 :   cd52:       cmpl   $0x0,0x20(%rsp)
    0.00 :   cd57:       je     c698 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1608>
    0.00 :   cd5d:       jmpq   cb63 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ad3>
    0.00 :   cd62:       mov    0x10(%rsp),%rdi
    0.00 :   cd67:       mov    0x3d0(%rdi),%rcx
    0.00 :   cd6e:       test   %rcx,%rcx
    0.00 :   cd71:       je     c9af <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x191f>
    0.00 :   cd77:       mov    (%rcx),%edx
    0.00 :   cd79:       cmp    %rcx,%rbp
    0.00 :   cd7c:       je     d05e <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1fce>
    0.00 :   cd82:       test   %edx,%edx
    0.00 :   cd84:       je     d0a3 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x2013>
    0.00 :   cd8a:       lea    -0x1(%rdx),%edi
    0.00 :   cd8d:       lea    0x8(%rcx),%rsi
    0.00 :   cd91:       lea    0x10(%rcx,%rdi,8),%rcx
    0.00 :   cd96:       jmp    cda5 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d15>
    0.00 :   cd98:       add    $0x8,%rsi
    0.00 :   cd9c:       cmp    %rcx,%rsi
    0.00 :   cd9f:       je     d088 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ff8>
    0.00 :   cda5:       cmp    (%rsi),%rax
    0.00 :   cda8:       jne    cd98 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d08>
    0.00 :   cdaa:       jmpq   ccf9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c69>
    0.00 :   cdaf:       mov    $0xa,%ebp
    0.00 :   cdb4:       test   %eax,%eax
    0.00 :   cdb6:       je     cdbb <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d2b>
    0.00 :   cdb8:       lea    (%rax,%rax,1),%ebp
    0.00 :   cdbb:       mov    %ebp,%eax
    0.00 :   cdbd:       mov    %r9d,0x18(%rsp)
    0.00 :   cdc2:       lea    0x8(,%rax,8),%rdi
    0.00 :   cdca:       callq  10a0 <malloc@plt>
    0.00 :   cdcf:       mov    0x18(%rsp),%r9d
    0.00 :   cdd4:       test   %rax,%rax
    0.00 :   cdd7:       mov    %rax,%rcx
    0.00 :   cdda:       je     ce75 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1de5>
    0.00 :   cde0:       mov    %r9d,%r8d
    0.00 :   cde3:       test   %r9d,%r9d
    0.00 :   cde6:       jne    ce2c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d9c>
    0.00 :   cde8:       add    $0x1,%r9d
    0.00 :   cdec:       mov    %r14,0x8(%rcx,%r8,8)
    0.00 :   cdf1:       mov    %r9d,(%rcx)
    0.00 :   cdf4:       mov    0x10(%rsp),%rax
    0.00 :   cdf9:       mov    0x3d0(%rax),%rdi
    0.00 :   ce00:       mov    %ebp,0x3d8(%rax)
    0.00 :   ce06:       mov    %rcx,0x3d0(%rax)
    0.00 :   ce0d:       test   %rdi,%rdi
    0.00 :   ce10:       je     cbde <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b4e>
    0.00 :   ce16:       callq  15060 <_dl_deallocate_tls@@GLIBC_PRIVATE+0x640>
    0.00 :   ce1b:       jmpq   cbde <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b4e>
    0.00 :   ce20:       lea    0x1826b(%rip),%rsi        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   ce27:       jmpq   cc2c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b9c>
    0.00 :   ce2c:       mov    %rax,0x30(%rsp)
    0.00 :   ce31:       lea    0x8(%rax),%rdi
    0.00 :   ce35:       mov    0x10(%rsp),%rax
    0.00 :   ce3a:       lea    0x0(,%r8,8),%rdx
    0.00 :   ce42:       mov    %r9d,0x3c(%rsp)
    0.00 :   ce47:       mov    0x3d0(%rax),%rax
    0.00 :   ce4e:       mov    %r8,0x28(%rsp)
    0.00 :   ce53:       lea    0x8(%rax),%rsi
    0.00 :   ce57:       mov    %rax,0x18(%rsp)
    0.00 :   ce5c:       callq  23390 <_dl_catch_error@@GLIBC_PRIVATE+0x5650>
    0.00 :   ce61:       mov    0x3c(%rsp),%r9d
    0.00 :   ce66:       mov    0x30(%rsp),%rcx
    0.00 :   ce6b:       mov    0x28(%rsp),%r8
    0.00 :   ce70:       jmpq   cde8 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1d58>
    0.00 :   ce75:       testb  $0x4,0x207a4(%rip)        # 2d620 <_rtld_global_ro@@GLIBC_PRIVATE>
    0.00 :   ce7c:       je     cb38 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1aa8>
    0.00 :   ce82:       cmpl   $0x0,0x28(%rsp)
    0.00 :   ce87:       je     ce97 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1e07>
    0.00 :   ce89:       cmpb   $0x0,0x320(%r14)
    0.00 :   ce91:       jne    cd3d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cad>
    0.00 :   ce97:       mov    0x30(%r14),%rdx
    0.00 :   ce9b:       mov    0x8(%r14),%rsi
    0.00 :   ce9f:       lea    0x1a9e2(%rip),%rdi        # 27888 <_dl_catch_error@@GLIBC_PRIVATE+0x9b48>
    0.00 :   cea6:       xor    %eax,%eax
    0.00 :   cea8:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   cead:       jmpq   cb38 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1aa8>
    0.00 :   ceb2:       lea    0x1bc07(%rip),%rcx        # 28ac0 <_dl_catch_error@@GLIBC_PRIVATE+0xad80>
    0.00 :   ceb9:       mov    $0x353,%edx
    0.00 :   cebe:       lea    0x18808(%rip),%rsi        # 256cd <_dl_catch_error@@GLIBC_PRIVATE+0x798d>
    0.00 :   cec5:       lea    0x1a864(%rip),%rdi        # 27730 <_dl_catch_error@@GLIBC_PRIVATE+0x99f0>
    0.00 :   cecc:       callq  1d790 <free@@GLIBC_2.2.5+0x190>
    0.00 :   ced1:       mov    (%r12),%rdx
    0.00 :   ced5:       mov    0x10(%rsp),%rbx
    0.00 :   ceda:       movl   $0x4,0x38(%rsp)
    0.00 :   cee2:       mov    0x8(%rax),%rcx
    0.00 :   cee6:       mov    0x58(%rsp),%rax
    0.00 :   ceeb:       mov    0x350(%rbx),%r8
    0.00 :   cef2:       mov    0x350(%rax),%rax
    0.00 :   cef9:       sub    %r8,%rdx
    0.00 :   cefc:       jmpq   c867 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x17d7>
    0.00 :   cf01:       lea    0x21a60(%rip),%rdi        # 2e968 <_rtld_global@@GLIBC_PRIVATE+0x908>
    0.00 :   cf08:       callq  *%rdx
    0.00 :   cf0a:       jmpq   cb63 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ad3>
    0.00 :   cf0f:       lea    0x1817c(%rip),%rcx        # 25092 <_dl_catch_error@@GLIBC_PRIVATE+0x7352>
    0.00 :   cf16:       jmpq   cc0c <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1b7c>
    0.00 :   cf1b:       movzbl 0x4(%rax),%ecx
    0.00 :   cf1f:       shr    $0x4,%cl
    0.00 :   cf22:       cmp    $0xa,%cl
    0.00 :   cf25:       jne    ca94 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1a04>
    0.00 :   cf2b:       mov    0x10(%rsp),%rax
    0.00 :   cf30:       pxor   %xmm0,%xmm0
    0.00 :   cf34:       xor    %ebx,%ebx
    0.00 :   cf36:       movaps %xmm0,0x70(%rsp)
    0.00 :   cf3b:       mov    0x398(%rax),%rbp
    0.00 :   cf42:       mov    0x8(%rbp),%eax
    0.00 :   cf45:       jmp    cf51 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ec1>
    0.00 :   cf47:       mov    0x0(%rbp),%r8
    0.00 :   cf4b:       cmp    (%r8,%rcx,8),%rdi
    0.00 :   cf4f:       je     cf5d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1ecd>
    0.00 :   cf51:       mov    %rbx,%rcx
    0.00 :   cf54:       add    $0x1,%rbx
    0.00 :   cf58:       cmp    %rcx,%rax
    0.00 :   cf5b:       ja     cf47 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1eb7>
    0.00 :   cf5d:       mov    %r14,0x18(%rsp)
    0.00 :   cf62:       lea    0x70(%rsp),%r8
    0.00 :   cf67:       mov    %rsi,%r15
    0.00 :   cf6a:       mov    %rdx,%r14
    0.00 :   cf6d:       jmp    cfc6 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f36>
    0.00 :   cf6f:       mov    0x0(%rbp),%rdx
    0.00 :   cf73:       mov    (%rdx,%rbx,8),%rcx
    0.00 :   cf77:       cmpq   $0x0,0xc0(%rcx)
    0.00 :   cf7f:       je     cfc2 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f32>
    0.00 :   cf81:       pushq  0x10(%rsp)
    0.00 :   cf85:       mov    0x40(%rsp),%eax
    0.00 :   cf89:       mov    %r14,%rdx
    0.00 :   cf8c:       mov    %r15,%rsi
    0.00 :   cf8f:       lea    0x2d0(%rcx),%r9
    0.00 :   cf96:       mov    (%r12),%rcx
    0.00 :   cf9a:       mov    %r13,%rdi
    0.00 :   cf9d:       push   %rax
    0.00 :   cf9e:       pushq  $0x0
    0.00 :   cfa0:       pushq  $0x0
    0.00 :   cfa2:       pushq  0x28(%rsp)
    0.00 :   cfa6:       pushq  $0x0
    0.00 :   cfa8:       mov    %r8,0x50(%rsp)
    0.00 :   cfad:       callq  b4c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x430>
    0.00 :   cfb2:       add    $0x30,%rsp
    0.00 :   cfb6:       test   %eax,%eax
    0.00 :   cfb8:       jg     d006 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1f76>
    0.00 :   cfba:       mov    0x8(%rbp),%eax
    0.00 :   cfbd:       mov    0x20(%rsp),%r8
    0.00 :   cfc2:       add    $0x1,%rbx
    0.00 :   cfc6:       cmp    %rax,%rbx
    0.00 :   cfc9:       jb     cf6f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1edf>
    0.00 :   cfcb:       mov    0x18(%rsp),%r14
    0.00 :   cfd0:       mov    0x50(%rsp),%rax
    0.00 :   cfd5:       mov    %r14,0x210cc(%rip)        # 2e0a8 <_rtld_global@@GLIBC_PRIVATE+0x48>
    0.00 :   cfdc:       test   %rax,%rax
    0.00 :   cfdf:       jne    c50f <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x147f>
    0.00 :   cfe5:       jmpq   c541 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x14b1>
    0.00 :   cfea:       mov    0x10(%rsp),%rax
    0.00 :   cfef:       mov    (%r12),%rdx
    0.00 :   cff3:       mov    0x350(%rax),%r8
    0.00 :   cffa:       sub    %r8,%rdx
    0.00 :   cffd:       xor    %ecx,%ecx
    0.00 :   cfff:       xor    %eax,%eax
    0.00 :   d001:       jmpq   c58d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x14fd>
    0.00 :   d006:       movdqa 0x70(%rsp),%xmm1
    0.00 :   d00c:       mov    0x18(%rsp),%r14
    0.00 :   d011:       mov    0x50(%rsp),%rax
    0.00 :   d016:       movaps %xmm1,0x60(%rsp)
    0.00 :   d01b:       jmpq   c7c9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1739>
    0.00 :   d020:       cmpl   $0x0,0x28(%rsp)
    0.00 :   d025:       je     d035 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1fa5>
    0.00 :   d027:       cmpb   $0x0,0x320(%r14)
    0.00 :   d02f:       jne    cd3d <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1cad>
    0.00 :   d035:       mov    0x10(%rsp),%rax
    0.00 :   d03a:       mov    0x30(%r14),%rdx
    0.00 :   d03e:       mov    0x8(%r14),%rsi
    0.00 :   d042:       mov    0x8(%rax),%rcx
    0.00 :   d046:       cmpb   $0x0,(%rcx)
    0.00 :   d049:       jne    d090 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x2000>
    0.00 :   d04b:       lea    0x1a716(%rip),%rdi        # 27768 <_dl_catch_error@@GLIBC_PRIVATE+0x9a28>
    0.00 :   d052:       xor    %eax,%eax
    0.00 :   d054:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   d059:       jmpq   cb38 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1aa8>
    0.00 :   d05e:       cmp    %edx,%r9d
    0.00 :   d061:       jae    c9af <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x191f>
    0.00 :   d067:       mov    %r9d,%ecx
    0.00 :   d06a:       lea    0x0(%rbp,%rcx,8),%rsi
    0.00 :   d06f:       xor    %ecx,%ecx
    0.00 :   d071:       cmp    0x8(%rsi,%rcx,8),%rax
    0.00 :   d076:       je     ccf9 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1c69>
    0.00 :   d07c:       add    $0x1,%rcx
    0.00 :   d080:       lea    (%r9,%rcx,1),%edi
    0.00 :   d084:       cmp    %edx,%edi
    0.00 :   d086:       jb     d071 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1fe1>
    0.00 :   d088:       mov    %edx,%r9d
    0.00 :   d08b:       jmpq   c9af <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x191f>
    0.00 :   d090:       lea    0x1a711(%rip),%rdi        # 277a8 <_dl_catch_error@@GLIBC_PRIVATE+0x9a68>
    0.00 :   d097:       xor    %eax,%eax
    0.00 :   d099:       callq  12990 <_dl_debug_state@@GLIBC_PRIVATE+0x7b0>
    0.00 :   d09e:       jmpq   cb38 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x1aa8>
    0.00 :   d0a3:       xor    %r9d,%r9d
    0.00 :   d0a6:       jmpq   c9af <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x191f>
    0.00 :   d0ab:       nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libgcc_s.so.1 for LLC-load-misses (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          00000000000036d0 <__cpu_indicator_init@GCC_4.8.0>:
    0.00 :   36d0:       endbr64
    0.00 :   36d4:       mov    0x16905(%rip),%r10        # 19fe0 <__emutls_register_common@@GCC_4.3.0+0x5fc0>
    0.00 :   36db:       push   %r15
    0.00 :   36dd:       push   %r14
    0.00 :   36df:       push   %r13
    0.00 :   36e1:       push   %r12
    0.00 :   36e3:       xor    %r12d,%r12d
    0.00 :   36e6:       push   %rbp
    0.00 :   36e7:       push   %rbx
    0.00 :   36e8:       mov    (%r10),%eax
    0.00 :   36eb:       test   %eax,%eax
    0.00 :   36ed:       jne    395d <__cpu_indicator_init@GCC_4.8.0+0x28d>
    0.00 :   36f3:       mov    %r12d,%eax
    0.00 :   36f6:       cpuid
    0.00 :   36f8:       test   %eax,%eax
    0.00 :   36fa:       je     39e8 <__cpu_indicator_init@GCC_4.8.0+0x318>
    0.00 :   3700:       mov    %r12d,%eax
    0.00 :   3703:       cpuid
    0.00 :   3705:       mov    %ebx,%r13d
    0.00 :   3708:       mov    %eax,%r9d
    0.00 :   370b:       test   %eax,%eax
    0.00 :   370d:       jle    39e8 <__cpu_indicator_init@GCC_4.8.0+0x318>
    0.00 :   3713:       mov    %r12d,%eax
    0.00 :   3716:       cpuid
    0.00 :   3718:       test   %eax,%eax
    0.00 :   371a:       je     39e8 <__cpu_indicator_init@GCC_4.8.0+0x318>
    0.00 :   3720:       mov    $0x1,%edi
    0.00 :   3725:       mov    %edi,%eax
    0.00 :   3727:       cpuid
    0.00 :   3729:       mov    %eax,%edi
    0.00 :   372b:       shr    $0x4,%eax
    0.00 :   372e:       mov    %ebx,-0x4(%rsp)
    0.00 :   3732:       mov    %edx,%r11d
    0.00 :   3735:       and    $0xf,%eax
    0.00 :   3738:       mov    %edi,%ebp
    0.00 :   373a:       mov    %ecx,%r8d
    0.00 :   373d:       mov    %eax,-0x8(%rsp)
    0.00 :   3741:       mov    %edi,%eax
    0.00 :   3743:       shr    $0x8,%ebp
    0.00 :   3746:       shr    $0xc,%eax
    0.00 :   3749:       and    $0xf,%ebp
    0.00 :   374c:       and    $0xf0,%eax
    0.00 :   3751:       mov    %eax,%r15d
    0.00 :   3754:       test   $0x8000000,%ecx
    0.00 :   375a:       jne    396b <__cpu_indicator_init@GCC_4.8.0+0x29b>
    0.00 :   3760:       xor    %r14d,%r14d
    0.00 :   3763:       xor    %r12d,%r12d
    0.00 :   3766:       mov    %r11d,%esi
    0.00 :   3769:       shr    $0xf,%esi
    0.00 :   376c:       and    $0x1,%esi
    0.00 :   376f:       test   $0x800000,%r11d
    0.00 :   3776:       je     377b <__cpu_indicator_init@GCC_4.8.0+0xab>
    0.00 :   3778:       or     $0x2,%esi
    0.00 :   377b:       test   $0x2000000,%r11d
    0.00 :   3782:       je     3787 <__cpu_indicator_init@GCC_4.8.0+0xb7>
    0.00 :   3784:       or     $0x8,%esi
    0.00 :   3787:       and    $0x4000000,%r11d
    0.00 :   378e:       je     3793 <__cpu_indicator_init@GCC_4.8.0+0xc3>
    0.00 :   3790:       or     $0x10,%esi
    0.00 :   3793:       test   $0x800000,%r8d
    0.00 :   379a:       je     379f <__cpu_indicator_init@GCC_4.8.0+0xcf>
    0.00 :   379c:       or     $0x4,%esi
    0.00 :   379f:       test   $0x2000000,%r8d
    0.00 :   37a6:       je     37ae <__cpu_indicator_init@GCC_4.8.0+0xde>
    0.00 :   37a8:       or     $0x40000,%esi
    0.00 :   37ae:       test   $0x2,%r8b
    0.00 :   37b2:       je     37ba <__cpu_indicator_init@GCC_4.8.0+0xea>
    0.00 :   37b4:       or     $0x80000,%esi
    0.00 :   37ba:       test   $0x1,%r8b
    0.00 :   37be:       je     37c3 <__cpu_indicator_init@GCC_4.8.0+0xf3>
    0.00 :   37c0:       or     $0x20,%esi
    0.00 :   37c3:       test   $0x200,%r8d
    0.00 :   37ca:       je     37cf <__cpu_indicator_init@GCC_4.8.0+0xff>
    0.00 :   37cc:       or     $0x40,%esi
    0.00 :   37cf:       test   $0x80000,%r8d
    0.00 :   37d6:       je     37dc <__cpu_indicator_init@GCC_4.8.0+0x10c>
    0.00 :   37d8:       or     $0x80,%sil
    0.00 :   37dc:       test   $0x100000,%r8d
    0.00 :   37e3:       je     37eb <__cpu_indicator_init@GCC_4.8.0+0x11b>
    0.00 :   37e5:       or     $0x100,%esi
    0.00 :   37eb:       test   %r12d,%r12d
    0.00 :   37ee:       je     380e <__cpu_indicator_init@GCC_4.8.0+0x13e>
    0.00 :   37f0:       test   $0x10000000,%r8d
    0.00 :   37f7:       je     37ff <__cpu_indicator_init@GCC_4.8.0+0x12f>
    0.00 :   37f9:       or     $0x200,%esi
    0.00 :   37ff:       and    $0x1000,%r8d
    0.00 :   3806:       je     380e <__cpu_indicator_init@GCC_4.8.0+0x13e>
    0.00 :   3808:       or     $0x4000,%esi
    0.00 :   380e:       cmp    $0x6,%r9d
    0.00 :   3812:       jle    38ff <__cpu_indicator_init@GCC_4.8.0+0x22f>
    0.00 :   3818:       mov    $0x7,%eax
    0.00 :   381d:       xor    %ecx,%ecx
    0.00 :   381f:       cpuid
    0.00 :   3821:       test   $0x8,%bl
    0.00 :   3824:       je     382c <__cpu_indicator_init@GCC_4.8.0+0x15c>
    0.00 :   3826:       or     $0x10000,%esi
    0.00 :   382c:       test   %r12d,%r12d
    0.00 :   382f:       je     383c <__cpu_indicator_init@GCC_4.8.0+0x16c>
    0.00 :   3831:       test   $0x20,%bl
    0.00 :   3834:       je     383c <__cpu_indicator_init@GCC_4.8.0+0x16c>
    0.00 :   3836:       or     $0x400,%esi
    0.00 :   383c:       test   $0x1,%bh
    0.00 :   383f:       je     3847 <__cpu_indicator_init@GCC_4.8.0+0x177>
    0.00 :   3841:       or     $0x20000,%esi
    0.00 :   3847:       test   %r14d,%r14d
    0.00 :   384a:       je     38ff <__cpu_indicator_init@GCC_4.8.0+0x22f>
    0.00 :   3850:       test   $0x10000,%ebx
    0.00 :   3856:       je     385e <__cpu_indicator_init@GCC_4.8.0+0x18e>
    0.00 :   3858:       or     $0x8000,%esi
    0.00 :   385e:       test   %ebx,%ebx
    0.00 :   3860:       jns    3868 <__cpu_indicator_init@GCC_4.8.0+0x198>
    0.00 :   3862:       or     $0x100000,%esi
    0.00 :   3868:       test   $0x40000000,%ebx
    0.00 :   386e:       je     3876 <__cpu_indicator_init@GCC_4.8.0+0x1a6>
    0.00 :   3870:       or     $0x200000,%esi
    0.00 :   3876:       test   $0x20000,%ebx
    0.00 :   387c:       je     3884 <__cpu_indicator_init@GCC_4.8.0+0x1b4>
    0.00 :   387e:       or     $0x400000,%esi
    0.00 :   3884:       test   $0x10000000,%ebx
    0.00 :   388a:       je     3892 <__cpu_indicator_init@GCC_4.8.0+0x1c2>
    0.00 :   388c:       or     $0x800000,%esi
    0.00 :   3892:       test   $0x4000000,%ebx
    0.00 :   3898:       je     38a0 <__cpu_indicator_init@GCC_4.8.0+0x1d0>
    0.00 :   389a:       or     $0x2000000,%esi
    0.00 :   38a0:       test   $0x8000000,%ebx
    0.00 :   38a6:       je     38ae <__cpu_indicator_init@GCC_4.8.0+0x1de>
    0.00 :   38a8:       or     $0x1000000,%esi
    0.00 :   38ae:       and    $0x200000,%ebx
    0.00 :   38b4:       je     38bc <__cpu_indicator_init@GCC_4.8.0+0x1ec>
    0.00 :   38b6:       or     $0x8000000,%esi
    0.00 :   38bc:       test   $0x2,%cl
    0.00 :   38bf:       je     38c7 <__cpu_indicator_init@GCC_4.8.0+0x1f7>
    0.00 :   38c1:       or     $0x4000000,%esi
    0.00 :   38c7:       test   $0x40,%cl
    0.00 :   38ca:       je     38d2 <__cpu_indicator_init@GCC_4.8.0+0x202>
    0.00 :   38cc:       or     $0x80000000,%esi
    0.00 :   38d2:       and    $0x40,%ch
    0.00 :   38d5:       je     38dd <__cpu_indicator_init@GCC_4.8.0+0x20d>
    0.00 :   38d7:       or     $0x40000000,%esi
    0.00 :   38dd:       test   $0x4,%dl
    0.00 :   38e0:       je     38e8 <__cpu_indicator_init@GCC_4.8.0+0x218>
    0.00 :   38e2:       or     $0x10000000,%esi
    0.00 :   38e8:       and    $0x8,%dl
    0.00 :   38eb:       je     38f3 <__cpu_indicator_init@GCC_4.8.0+0x223>
    0.00 :   38ed:       or     $0x20000000,%esi
    0.00 :   38f3:       mov    $0x7,%eax
    0.00 :   38f8:       mov    $0x1,%ecx
    0.00 :   38fd:       cpuid
    0.00 :   38ff:       mov    $0x80000000,%eax
    0.00 :   3904:       cpuid
    0.00 :   3906:       cmp    $0x80000000,%eax
    0.00 :   390b:       jbe    393d <__cpu_indicator_init@GCC_4.8.0+0x26d>
    0.00 :   390d:       mov    $0x80000001,%eax
    0.00 :   3912:       cpuid
    0.00 :   3914:       test   $0x40,%cl
    0.00 :   3917:       je     391f <__cpu_indicator_init@GCC_4.8.0+0x24f>
    0.00 :   3919:       or     $0x800,%esi
    0.00 :   391f:       test   %r12d,%r12d
    0.00 :   3922:       je     393d <__cpu_indicator_init@GCC_4.8.0+0x26d>
    0.00 :   3924:       test   $0x10000,%ecx
    0.00 :   392a:       je     3932 <__cpu_indicator_init@GCC_4.8.0+0x262>
    0.00 :   392c:       or     $0x1000,%esi
    0.00 :   3932:       and    $0x8,%ch
    0.00 :   3935:       je     393d <__cpu_indicator_init@GCC_4.8.0+0x26d>
    0.00 :   3937:       or     $0x2000,%esi
    0.00 :   393d:       mov    %esi,0xc(%r10)
    0.00 :   3941:       cmp    $0x756e6547,%r13d
    0.00 :   3948:       je     399b <__cpu_indicator_init@GCC_4.8.0+0x2cb>
    0.00 :   394a:       cmp    $0x68747541,%r13d
    0.00 :   3951:       je     39b0 <__cpu_indicator_init@GCC_4.8.0+0x2e0>
    0.00 :   3953:       movl   $0x3,(%r10)
    0.00 :   395a:       xor    %r12d,%r12d
    0.00 :   395d:       pop    %rbx
    0.00 :   395e:       mov    %r12d,%eax
    0.00 :   3961:       pop    %rbp
    0.00 :   3962:       pop    %r12
    0.00 :   3964:       pop    %r13
    0.00 :   3966:       pop    %r14
    0.00 :   3968:       pop    %r15
    0.00 :   396a:       retq
    0.00 :   396b:       mov    %r12d,%ecx
    0.00 :   396e:       xgetbv
    0.00 :   3971:       mov    %eax,%edx
    0.00 :   3973:       and    $0x6,%edx
    0.00 :   3976:       cmp    $0x6,%edx
    0.00 :   3979:       jne    3760 <__cpu_indicator_init@GCC_4.8.0+0x90>
    0.00 :   397f:       and    $0xe6,%eax
    0.00 :   3984:       xor    %r14d,%r14d
    0.00 :   3987:       mov    $0x1,%r12d
    0.00 :   398d:       cmp    $0xe6,%eax
    0.00 :   3992:       sete   %r14b
    0.00 :   3996:       jmpq   3766 <__cpu_indicator_init@GCC_4.8.0+0x96>
    0.00 :   399b:       cmp    $0x6,%ebp
    0.00 :   399e:       je     3a98 <__cpu_indicator_init@GCC_4.8.0+0x3c8>
    0.00 :   39a4:       movl   $0x1,(%r10)
    0.00 :   39ab:       xor    %r12d,%r12d
    0.00 :   39ae:       jmp    395d <__cpu_indicator_init@GCC_4.8.0+0x28d>
    0.00 :   39b0:       cmp    $0xf,%ebp
    0.00 :   39b3:       je     39c1 <__cpu_indicator_init@GCC_4.8.0+0x2f1>
    0.00 :   39b5:       movl   $0x2,(%r10)
    0.00 :   39bc:       xor    %r12d,%r12d
    0.00 :   39bf:       jmp    395d <__cpu_indicator_init@GCC_4.8.0+0x28d>
    0.00 :   39c1:       shr    $0x14,%edi
    0.00 :   39c4:       mov    -0x8(%rsp),%eax
    0.00 :   39c8:       movzbl %dil,%edi
    0.00 :   39cc:       sub    $0x1,%edi
    0.00 :   39cf:       or     %r15d,%eax
    0.00 :   39d2:       cmp    $0x9,%edi
    0.00 :   39d5:       ja     39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   39d7:       lea    0x118fa(%rip),%rcx        # 152d8 <__emutls_register_common@@GCC_4.3.0+0x12b8>
    0.00 :   39de:       movslq (%rcx,%rdi,4),%rdx
    0.00 :   39e2:       add    %rcx,%rdx
    0.00 :   39e5:       notrack jmpq *%rdx
    0.00 :   39e8:       movl   $0x3,(%r10)
    0.00 :   39ef:       or     $0xffffffff,%r12d
    0.00 :   39f3:       jmpq   395d <__cpu_indicator_init@GCC_4.8.0+0x28d>
    0.00 :   39f8:       movl   $0xf,0x4(%r10)
    0.00 :   3a00:       cmp    $0xf,%eax
    0.00 :   3a03:       ja     39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a05:       movl   $0x18,0x8(%r10)
    0.00 :   3a0d:       jmp    39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a0f:       movl   $0xa,0x4(%r10)
    0.00 :   3a17:       cmp    $0x1f,%eax
    0.00 :   3a1a:       ja     3bf0 <__cpu_indicator_init@GCC_4.8.0+0x520>
    0.00 :   3a20:       movl   $0xb,0x8(%r10)
    0.00 :   3a28:       jmp    39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a2a:       movl   $0x9,0x4(%r10)
    0.00 :   3a32:       jmp    39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a34:       movl   $0x5,0x4(%r10)
    0.00 :   3a3c:       cmp    $0x2,%eax
    0.00 :   3a3f:       je     3be3 <__cpu_indicator_init@GCC_4.8.0+0x513>
    0.00 :   3a45:       cmp    $0xf,%eax
    0.00 :   3a48:       ja     3c06 <__cpu_indicator_init@GCC_4.8.0+0x536>
    0.00 :   3a4e:       movl   $0x7,0x8(%r10)
    0.00 :   3a56:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a5b:       movl   $0x8,0x4(%r10)
    0.00 :   3a63:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a68:       movl   $0x4,0x4(%r10)
    0.00 :   3a70:       cmp    $0x4,%eax
    0.00 :   3a73:       je     3c2a <__cpu_indicator_init@GCC_4.8.0+0x55a>
    0.00 :   3a79:       cmp    $0x8,%eax
    0.00 :   3a7c:       je     3c1d <__cpu_indicator_init@GCC_4.8.0+0x54d>
    0.00 :   3a82:       cmp    $0x2,%eax
    0.00 :   3a85:       jne    39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a8b:       movl   $0x4,0x8(%r10)
    0.00 :   3a93:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3a98:       mov    -0x8(%rsp),%eax
    0.00 :   3a9c:       or     %r15d,%eax
    0.00 :   3a9f:       cmpb   $0x0,-0x4(%rsp)
    0.00 :   3aa4:       jne    39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3aaa:       sub    $0xf,%eax
    0.00 :   3aad:       cmp    $0x8f,%eax
    0.00 :   3ab2:       ja     39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3ab8:       lea    0x11841(%rip),%rdx        # 15300 <__emutls_register_common@@GCC_4.3.0+0x12e0>
    0.00 :   3abf:       movslq (%rdx,%rax,4),%rax
    0.00 :   3ac3:       add    %rdx,%rax
    0.00 :   3ac6:       notrack jmpq *%rax
    0.00 :   3ac9:       movl   $0x6,0x4(%r10)
    0.00 :   3ad1:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3ad6:       movabs $0x100000003,%rax
    0.00 :   3ae0:       mov    %rax,0x4(%r10)
    0.00 :   3ae4:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3ae9:       movabs $0xf00000003,%rax
    0.00 :   3af3:       mov    %rax,0x4(%r10)
    0.00 :   3af7:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3afc:       movabs $0xe00000003,%rax
    0.00 :   3b06:       mov    %rax,0x4(%r10)
    0.00 :   3b0a:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b0f:       movabs $0xd00000003,%rax
    0.00 :   3b19:       mov    %rax,0x4(%r10)
    0.00 :   3b1d:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b22:       movabs $0x200000003,%rax
    0.00 :   3b2c:       mov    %rax,0x4(%r10)
    0.00 :   3b30:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b35:       movl   $0x2,0x4(%r10)
    0.00 :   3b3d:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b42:       movl   $0x1,0x4(%r10)
    0.00 :   3b4a:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b4f:       movabs $0xc00000003,%rax
    0.00 :   3b59:       mov    %rax,0x4(%r10)
    0.00 :   3b5d:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b62:       movl   $0xc,0x4(%r10)
    0.00 :   3b6a:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b6f:       movabs $0x300000003,%rax
    0.00 :   3b79:       mov    %rax,0x4(%r10)
    0.00 :   3b7d:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b82:       movl   $0x7,0x4(%r10)
    0.00 :   3b8a:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3b8f:       movl   $0x3,0x4(%r10)
    0.00 :   3b97:       mov    $0x7,%eax
    0.00 :   3b9c:       xor    %ecx,%ecx
    0.00 :   3b9e:       cpuid
    0.00 :   3ba0:       and    $0x8,%ch
    0.00 :   3ba3:       je     3c4d <__cpu_indicator_init@GCC_4.8.0+0x57d>
    0.00 :   3ba9:       movl   $0x15,0x8(%r10)
    0.00 :   3bb1:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3bb6:       movabs $0x1100000003,%rax
    0.00 :   3bc0:       mov    %rax,0x4(%r10)
    0.00 :   3bc4:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3bc9:       movl   $0xb,0x4(%r10)
    0.00 :   3bd1:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3bd6:       movl   $0xd,0x4(%r10)
    0.00 :   3bde:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3be3:       movl   $0x8,0x8(%r10)
    0.00 :   3beb:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3bf0:       cmp    $0x2f,%eax
    0.00 :   3bf3:       jbe    39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3bf9:       movl   $0x14,0x8(%r10)
    0.00 :   3c01:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c06:       cmp    $0x2f,%eax
    0.00 :   3c09:       jbe    3be3 <__cpu_indicator_init@GCC_4.8.0+0x513>
    0.00 :   3c0b:       cmp    $0x4f,%eax
    0.00 :   3c0e:       ja     3c37 <__cpu_indicator_init@GCC_4.8.0+0x567>
    0.00 :   3c10:       movl   $0x9,0x8(%r10)
    0.00 :   3c18:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c1d:       movl   $0x6,0x8(%r10)
    0.00 :   3c25:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c2a:       movl   $0x5,0x8(%r10)
    0.00 :   3c32:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c37:       cmp    $0x7f,%eax
    0.00 :   3c3a:       ja     39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c40:       movl   $0xa,0x8(%r10)
    0.00 :   3c48:       jmpq   39b5 <__cpu_indicator_init@GCC_4.8.0+0x2e5>
    0.00 :   3c4d:       movl   $0x10,0x8(%r10)
    0.00 :   3c55:       jmpq   39a4 <__cpu_indicator_init@GCC_4.8.0+0x2d4>
    0.00 :   3c5a:       nopw   0x0(%rax,%rax,1)
    0.00 :   3c60:       lea    0x16529(%rip),%rdi        # 1a190 <__emutls_register_common@@GCC_4.3.0+0x6170>
    0.00 :   3c67:       lea    0x16522(%rip),%rax        # 1a190 <__emutls_register_common@@GCC_4.3.0+0x6170>
    0.00 :   3c6e:       cmp    %rdi,%rax
    0.00 :   3c71:       je     3c88 <__cpu_indicator_init@GCC_4.8.0+0x5b8>
    0.00 :   3c73:       mov    0x1635e(%rip),%rax        # 19fd8 <__emutls_register_common@@GCC_4.3.0+0x5fb8>
    0.00 :   3c7a:       test   %rax,%rax
    0.00 :   3c7d:       je     3c88 <__cpu_indicator_init@GCC_4.8.0+0x5b8>
    0.00 :   3c7f:       jmpq   *%rax
    0.00 :   3c81:       nopl   0x0(%rax)
    0.00 :   3c88:       retq
    0.00 :   3c89:       nopl   0x0(%rax)
    0.00 :   3c90:       lea    0x164f9(%rip),%rdi        # 1a190 <__emutls_register_common@@GCC_4.3.0+0x6170>
    0.00 :   3c97:       lea    0x164f2(%rip),%rsi        # 1a190 <__emutls_register_common@@GCC_4.3.0+0x6170>
    0.00 :   3c9e:       sub    %rdi,%rsi
    0.00 :   3ca1:       mov    %rsi,%rax
    0.00 :   3ca4:       shr    $0x3f,%rsi
    0.00 :   3ca8:       sar    $0x3,%rax
    0.00 :   3cac:       add    %rax,%rsi
    0.00 :   3caf:       sar    %rsi
    0.00 :   3cb2:       je     3cc8 <__cpu_indicator_init@GCC_4.8.0+0x5f8>
    0.00 :   3cb4:       mov    0x16335(%rip),%rax        # 19ff0 <__emutls_register_common@@GCC_4.3.0+0x5fd0>
    0.00 :   3cbb:       test   %rax,%rax
    0.00 :   3cbe:       je     3cc8 <__cpu_indicator_init@GCC_4.8.0+0x5f8>
    0.00 :   3cc0:       jmpq   *%rax
    0.00 :   3cc2:       nopw   0x0(%rax,%rax,1)
    0.00 :   3cc8:       retq
    0.00 :   3cc9:       nopl   0x0(%rax)
    0.00 :   3cd0:       endbr64
    0.00 :   3cd4:       cmpb   $0x0,0x164c5(%rip)        # 1a1a0 <__emutls_register_common@@GCC_4.3.0+0x6180>
    0.00 :   3cdb:       jne    3d08 <__cpu_indicator_init@GCC_4.8.0+0x638>
    0.00 :   3cdd:       push   %rbp
  100.00 :   3cde:       cmpq   $0x0,0x16312(%rip)        # 19ff8 <__emutls_register_common@@GCC_4.3.0+0x5fd8>
    0.00 :   3ce6:       mov    %rsp,%rbp
    0.00 :   3ce9:       je     3cf7 <__cpu_indicator_init@GCC_4.8.0+0x627>
    0.00 :   3ceb:       mov    0x1648e(%rip),%rdi        # 1a180 <__emutls_register_common@@GCC_4.3.0+0x6160>
    0.00 :   3cf2:       callq  3300 <__cxa_finalize@plt>
    0.00 :   3cf7:       callq  3c60 <__cpu_indicator_init@GCC_4.8.0+0x590>
    0.00 :   3cfc:       movb   $0x1,0x1649d(%rip)        # 1a1a0 <__emutls_register_common@@GCC_4.3.0+0x6180>
    0.00 :   3d03:       pop    %rbp
    0.00 :   3d04:       retq
    0.00 :   3d05:       nopl   (%rax)
    0.00 :   3d08:       retq
    0.00 :   3d09:       nopl   0x0(%rax)
    0.00 :   3d10:       endbr64
    0.00 :   3d14:       jmpq   3c90 <__cpu_indicator_init@GCC_4.8.0+0x5c0>
    0.00 :   3d19:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of ld-2.31.so for LLC-load-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000195a0 <_dl_exception_free@@GLIBC_PRIVATE+0x340>:
    0.00 :   195a0:       endbr64
    0.00 :   195a4:       movsbl (%rdi),%eax
    0.00 :   195a7:       movsbl (%rsi),%edx
    0.00 :   195aa:       test   %al,%al
    0.00 :   195ac:       je     195e0 <_dl_exception_free@@GLIBC_PRIVATE+0x380>
    0.00 :   195ae:       lea    -0x30(%rax),%r8d
    0.00 :   195b2:       lea    -0x30(%rdx),%ecx
    0.00 :   195b5:       cmp    $0x9,%r8b
    0.00 :   195b9:       jbe    195f0 <_dl_exception_free@@GLIBC_PRIVATE+0x390>
    0.00 :   195bb:       cmp    $0x9,%cl
    0.00 :   195be:       jbe    19669 <_dl_exception_free@@GLIBC_PRIVATE+0x409>
    0.00 :   195c4:       cmp    %dl,%al
    0.00 :   195c6:       jne    1966f <_dl_exception_free@@GLIBC_PRIVATE+0x40f>
    0.00 :   195cc:       movsbl 0x1(%rdi),%eax
    0.00 :   195d0:       movsbl 0x1(%rsi),%edx
    0.00 :   195d4:       add    $0x1,%rdi
    0.00 :   195d8:       add    $0x1,%rsi
    0.00 :   195dc:       test   %al,%al
    0.00 :   195de:       jne    195ae <_dl_exception_free@@GLIBC_PRIVATE+0x34e>
    0.00 :   195e0:       movsbl %dl,%eax
    0.00 :   195e3:       neg    %eax
    0.00 :   195e5:       retq
    0.00 :   195e6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   195f0:       cmp    $0x9,%cl
    0.00 :   195f3:       ja     19672 <_dl_exception_free@@GLIBC_PRIVATE+0x412>
    0.00 :   195f5:       lea    -0x30(%rax),%ecx
    0.00 :   195f8:       movsbl 0x1(%rdi),%eax
    0.00 :   195fc:       lea    0x1(%rdi),%r10
    0.00 :   19600:       lea    -0x30(%rdx),%r8d
    0.00 :   19604:       lea    0x1(%rsi),%r9
    0.00 :   19608:       mov    %r10,%rdi
    0.00 :   1960b:       lea    -0x30(%rax),%edx
    0.00 :   1960e:       cmp    $0x9,%dl
    0.00 :   19611:       ja     1962e <_dl_exception_free@@GLIBC_PRIVATE+0x3ce>
    0.00 :   19613:       nopl   0x0(%rax,%rax,1)
    0.00 :   19618:       lea    (%rcx,%rcx,4),%edx
    0.00 :   1961b:       add    $0x1,%rdi
    0.00 :   1961f:       lea    -0x30(%rax,%rdx,2),%ecx
    0.00 :   19623:       movsbl (%rdi),%eax
    0.00 :   19626:       lea    -0x30(%rax),%edx
    0.00 :   19629:       cmp    $0x9,%dl
    0.00 :   1962c:       jbe    19618 <_dl_exception_free@@GLIBC_PRIVATE+0x3b8>
    0.00 :   1962e:       movsbl 0x1(%rsi),%edx
    0.00 :   19632:       lea    -0x30(%rdx),%esi
    0.00 :   19635:       cmp    $0x9,%sil
    0.00 :   19639:       mov    %r9,%rsi
    0.00 :   1963c:       ja     1965a <_dl_exception_free@@GLIBC_PRIVATE+0x3fa>
    0.00 :   1963e:       xchg   %ax,%ax
    0.00 :   19640:       add    $0x1,%rsi
    0.00 :   19644:       lea    (%r8,%r8,4),%r8d
    0.00 :   19648:       lea    -0x30(%rdx,%r8,2),%r8d
    0.00 :   1964d:       movsbl (%rsi),%edx
    0.00 :   19650:       lea    -0x30(%rdx),%r9d
    0.00 :   19654:       cmp    $0x9,%r9b
    0.00 :   19658:       jbe    19640 <_dl_exception_free@@GLIBC_PRIVATE+0x3e0>
    0.00 :   1965a:       cmp    %r8d,%ecx
    0.00 :   1965d:       je     195aa <_dl_exception_free@@GLIBC_PRIVATE+0x34a>
    0.00 :   19663:       mov    %ecx,%eax
    0.00 :   19665:       sub    %r8d,%eax
    0.00 :   19668:       retq
    0.00 :   19669:       mov    $0xffffffff,%eax
    0.00 :   1966e:       retq
    0.00 :   1966f:       sub    %edx,%eax
  100.00 :   19671:       retq
    0.00 :   19672:       mov    $0x1,%eax
    0.00 :   19677:       retq
    0.00 :   19678:       nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of ld-2.31.so for LLC-load-misses (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000001f600 <_dl_catch_error@@GLIBC_PRIVATE+0x18c0>:
    0.00 :   1f600:       endbr64
    0.00 :   1f604:       mov    %esi,%ecx
    0.00 :   1f606:       mov    %edi,%eax
    0.00 :   1f608:       and    $0x3f,%rcx
    0.00 :   1f60c:       and    $0x3f,%rax
    0.00 :   1f610:       cmp    $0x30,%ecx
    0.00 :   1f613:       ja     1f660 <_dl_catch_error@@GLIBC_PRIVATE+0x1920>
    0.00 :   1f615:       cmp    $0x30,%eax
    0.00 :   1f618:       ja     1f660 <_dl_catch_error@@GLIBC_PRIVATE+0x1920>
    0.00 :   1f61a:       movlpd (%rdi),%xmm1
    0.00 :   1f61e:       movlpd (%rsi),%xmm2
    0.00 :   1f622:       movhpd 0x8(%rdi),%xmm1
    0.00 :   1f627:       movhpd 0x8(%rsi),%xmm2
    0.00 :   1f62c:       pxor   %xmm0,%xmm0
    0.00 :   1f630:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f634:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f638:       psubb  %xmm0,%xmm1
    0.00 :   1f63c:       pmovmskb %xmm1,%edx
    0.00 :   1f640:       sub    $0xffff,%edx
    0.00 :   1f646:       jne    20a20 <_dl_catch_error@@GLIBC_PRIVATE+0x2ce0>
    0.00 :   1f64c:       add    $0x10,%rsi
    0.00 :   1f650:       add    $0x10,%rdi
    0.00 :   1f654:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1f65f:       nop
    0.00 :   1f660:       and    $0xfffffffffffffff0,%rsi
    0.00 :   1f664:       and    $0xfffffffffffffff0,%rdi
    0.00 :   1f668:       mov    $0xffff,%edx
    0.00 :   1f66d:       xor    %r8d,%r8d
    0.00 :   1f670:       and    $0xf,%ecx
    0.00 :   1f673:       and    $0xf,%eax
    0.00 :   1f676:       cmp    %eax,%ecx
    0.00 :   1f678:       je     1f6a0 <_dl_catch_error@@GLIBC_PRIVATE+0x1960>
    0.00 :   1f67a:       ja     1f683 <_dl_catch_error@@GLIBC_PRIVATE+0x1943>
    0.00 :   1f67c:       mov    %edx,%r8d
    0.00 :   1f67f:       xchg   %eax,%ecx
    0.00 :   1f680:       xchg   %rsi,%rdi
    0.00 :   1f683:       lea    0xf(%rax),%r9
    0.00 :   1f687:       sub    %rcx,%r9
    0.00 :   1f68a:       lea    0x58b7(%rip),%r10        # 24f48 <_dl_catch_error@@GLIBC_PRIVATE+0x7208>
    0.00 :   1f691:       movslq (%r10,%r9,4),%r9
    0.00 :   1f695:       lea    (%r10,%r9,1),%r10
    0.00 :   1f699:       notrack jmpq *%r10
    0.00 :   1f69d:       nopl   (%rax)
    0.00 :   1f6a0:       movdqa (%rsi),%xmm1
    0.00 :   1f6a4:       pxor   %xmm0,%xmm0
    0.00 :   1f6a8:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f6ac:       pcmpeqb (%rdi),%xmm1
    0.00 :   1f6b0:       psubb  %xmm0,%xmm1
    0.00 :   1f6b4:       pmovmskb %xmm1,%r9d
    0.00 :   1f6b9:       shr    %cl,%edx
    0.00 :   1f6bb:       shr    %cl,%r9d
    0.00 :   1f6be:       sub    %r9d,%edx
    0.00 :   1f6c1:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1f6c7:       mov    $0x10,%rcx
    0.00 :   1f6ce:       mov    $0x10,%r9
    0.00 :   1f6d5:       pxor   %xmm0,%xmm0
    0.00 :   1f6d9:       nopl   0x0(%rax)
    0.00 :   1f6e0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f6e5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f6ea:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f6ee:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f6f2:       psubb  %xmm0,%xmm1
    0.00 :   1f6f6:       pmovmskb %xmm1,%edx
    0.00 :   1f6fa:       sub    $0xffff,%edx
    0.00 :   1f700:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f706:       add    $0x10,%rcx
    0.00 :   1f70a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f70f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f714:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f718:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f71c:       psubb  %xmm0,%xmm1
    0.00 :   1f720:       pmovmskb %xmm1,%edx
    0.00 :   1f724:       sub    $0xffff,%edx
    0.00 :   1f72a:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f730:       add    $0x10,%rcx
    0.00 :   1f734:       jmp    1f6e0 <_dl_catch_error@@GLIBC_PRIVATE+0x19a0>
    0.00 :   1f736:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   1f740:       pxor   %xmm0,%xmm0
    0.00 :   1f744:       movdqa (%rdi),%xmm2
    0.00 :   1f748:       movdqa (%rsi),%xmm1
    0.00 :   1f74c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f750:       pslldq $0xf,%xmm2
    0.00 :   1f755:       pcmpeqb %xmm1,%xmm2
    0.00 :   1f759:       psubb  %xmm0,%xmm2
    0.00 :   1f75d:       pmovmskb %xmm2,%r9d
    0.00 :   1f762:       shr    %cl,%edx
    0.00 :   1f764:       shr    %cl,%r9d
    0.00 :   1f767:       sub    %r9d,%edx
    0.00 :   1f76a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1f770:       movdqa (%rdi),%xmm3
    0.00 :   1f774:       pxor   %xmm0,%xmm0
    0.00 :   1f778:       mov    $0x10,%rcx
    0.00 :   1f77f:       mov    $0x1,%r9d
    0.00 :   1f785:       lea    0x1(%rdi),%r10
    0.00 :   1f789:       and    $0xfff,%r10
    0.00 :   1f790:       sub    $0x1000,%r10
    0.00 :   1f797:       nopw   0x0(%rax,%rax,1)
    0.00 :   1f7a0:       add    $0x10,%r10
    0.00 :   1f7a4:       jg     1f840 <_dl_catch_error@@GLIBC_PRIVATE+0x1b00>
    0.00 :   1f7aa:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f7af:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f7b4:       movdqa %xmm2,%xmm4
    0.00 :   1f7b8:       psrldq $0x1,%xmm3
    0.00 :   1f7bd:       pslldq $0xf,%xmm2
    0.00 :   1f7c2:       por    %xmm3,%xmm2
    0.00 :   1f7c6:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f7ca:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f7ce:       psubb  %xmm0,%xmm1
    0.00 :   1f7d2:       pmovmskb %xmm1,%edx
    0.00 :   1f7d6:       sub    $0xffff,%edx
    0.00 :   1f7dc:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f7e2:       add    $0x10,%rcx
    0.00 :   1f7e6:       movdqa %xmm4,%xmm3
    0.00 :   1f7ea:       add    $0x10,%r10
    0.00 :   1f7ee:       jg     1f840 <_dl_catch_error@@GLIBC_PRIVATE+0x1b00>
    0.00 :   1f7f0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f7f5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f7fa:       movdqa %xmm2,%xmm4
    0.00 :   1f7fe:       psrldq $0x1,%xmm3
    0.00 :   1f803:       pslldq $0xf,%xmm2
    0.00 :   1f808:       por    %xmm3,%xmm2
    0.00 :   1f80c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f810:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f814:       psubb  %xmm0,%xmm1
    0.00 :   1f818:       pmovmskb %xmm1,%edx
    0.00 :   1f81c:       sub    $0xffff,%edx
    0.00 :   1f822:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f828:       add    $0x10,%rcx
    0.00 :   1f82c:       movdqa %xmm4,%xmm3
    0.00 :   1f830:       jmpq   1f7a0 <_dl_catch_error@@GLIBC_PRIVATE+0x1a60>
    0.00 :   1f835:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1f840:       pcmpeqb %xmm3,%xmm0
    0.00 :   1f844:       pmovmskb %xmm0,%edx
    0.00 :   1f848:       test   $0xfffe,%edx
    0.00 :   1f84e:       jne    1f860 <_dl_catch_error@@GLIBC_PRIVATE+0x1b20>
    0.00 :   1f850:       pxor   %xmm0,%xmm0
    0.00 :   1f854:       sub    $0x1000,%r10
    0.00 :   1f85b:       jmpq   1f7aa <_dl_catch_error@@GLIBC_PRIVATE+0x1a6a>
    0.00 :   1f860:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f865:       psrldq $0x1,%xmm0
    0.00 :   1f86a:       psrldq $0x1,%xmm3
    0.00 :   1f86f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1f874:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1f87f:       nop
    0.00 :   1f880:       pxor   %xmm0,%xmm0
    0.00 :   1f884:       movdqa (%rdi),%xmm2
    0.00 :   1f888:       movdqa (%rsi),%xmm1
    0.00 :   1f88c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f890:       pslldq $0xe,%xmm2
    0.00 :   1f895:       pcmpeqb %xmm1,%xmm2
    0.00 :   1f899:       psubb  %xmm0,%xmm2
    0.00 :   1f89d:       pmovmskb %xmm2,%r9d
    0.00 :   1f8a2:       shr    %cl,%edx
    0.00 :   1f8a4:       shr    %cl,%r9d
    0.00 :   1f8a7:       sub    %r9d,%edx
    0.00 :   1f8aa:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1f8b0:       movdqa (%rdi),%xmm3
    0.00 :   1f8b4:       pxor   %xmm0,%xmm0
    0.00 :   1f8b8:       mov    $0x10,%rcx
    0.00 :   1f8bf:       mov    $0x2,%r9d
    0.00 :   1f8c5:       lea    0x2(%rdi),%r10
    0.00 :   1f8c9:       and    $0xfff,%r10
    0.00 :   1f8d0:       sub    $0x1000,%r10
    0.00 :   1f8d7:       nopw   0x0(%rax,%rax,1)
    0.00 :   1f8e0:       add    $0x10,%r10
    0.00 :   1f8e4:       jg     1f980 <_dl_catch_error@@GLIBC_PRIVATE+0x1c40>
    0.00 :   1f8ea:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f8ef:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f8f4:       movdqa %xmm2,%xmm4
    0.00 :   1f8f8:       psrldq $0x2,%xmm3
    0.00 :   1f8fd:       pslldq $0xe,%xmm2
    0.00 :   1f902:       por    %xmm3,%xmm2
    0.00 :   1f906:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f90a:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f90e:       psubb  %xmm0,%xmm1
    0.00 :   1f912:       pmovmskb %xmm1,%edx
    0.00 :   1f916:       sub    $0xffff,%edx
    0.00 :   1f91c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f922:       add    $0x10,%rcx
    0.00 :   1f926:       movdqa %xmm4,%xmm3
    0.00 :   1f92a:       add    $0x10,%r10
    0.00 :   1f92e:       jg     1f980 <_dl_catch_error@@GLIBC_PRIVATE+0x1c40>
    0.00 :   1f930:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f935:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1f93a:       movdqa %xmm2,%xmm4
    0.00 :   1f93e:       psrldq $0x2,%xmm3
    0.00 :   1f943:       pslldq $0xe,%xmm2
    0.00 :   1f948:       por    %xmm3,%xmm2
    0.00 :   1f94c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f950:       pcmpeqb %xmm2,%xmm1
    0.00 :   1f954:       psubb  %xmm0,%xmm1
    0.00 :   1f958:       pmovmskb %xmm1,%edx
    0.00 :   1f95c:       sub    $0xffff,%edx
    0.00 :   1f962:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1f968:       add    $0x10,%rcx
    0.00 :   1f96c:       movdqa %xmm4,%xmm3
    0.00 :   1f970:       jmpq   1f8e0 <_dl_catch_error@@GLIBC_PRIVATE+0x1ba0>
    0.00 :   1f975:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1f980:       pcmpeqb %xmm3,%xmm0
    0.00 :   1f984:       pmovmskb %xmm0,%edx
    0.00 :   1f988:       test   $0xfffc,%edx
    0.00 :   1f98e:       jne    1f9a0 <_dl_catch_error@@GLIBC_PRIVATE+0x1c60>
    0.00 :   1f990:       pxor   %xmm0,%xmm0
    0.00 :   1f994:       sub    $0x1000,%r10
    0.00 :   1f99b:       jmpq   1f8ea <_dl_catch_error@@GLIBC_PRIVATE+0x1baa>
    0.00 :   1f9a0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1f9a5:       psrldq $0x2,%xmm0
    0.00 :   1f9aa:       psrldq $0x2,%xmm3
    0.00 :   1f9af:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1f9b4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1f9bf:       nop
    0.00 :   1f9c0:       pxor   %xmm0,%xmm0
    0.00 :   1f9c4:       movdqa (%rdi),%xmm2
    0.00 :   1f9c8:       movdqa (%rsi),%xmm1
    0.00 :   1f9cc:       pcmpeqb %xmm1,%xmm0
    0.00 :   1f9d0:       pslldq $0xd,%xmm2
    0.00 :   1f9d5:       pcmpeqb %xmm1,%xmm2
    0.00 :   1f9d9:       psubb  %xmm0,%xmm2
    0.00 :   1f9dd:       pmovmskb %xmm2,%r9d
    0.00 :   1f9e2:       shr    %cl,%edx
    0.00 :   1f9e4:       shr    %cl,%r9d
    0.00 :   1f9e7:       sub    %r9d,%edx
    0.00 :   1f9ea:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1f9f0:       movdqa (%rdi),%xmm3
    0.00 :   1f9f4:       pxor   %xmm0,%xmm0
    0.00 :   1f9f8:       mov    $0x10,%rcx
    0.00 :   1f9ff:       mov    $0x3,%r9d
    0.00 :   1fa05:       lea    0x3(%rdi),%r10
    0.00 :   1fa09:       and    $0xfff,%r10
    0.00 :   1fa10:       sub    $0x1000,%r10
    0.00 :   1fa17:       nopw   0x0(%rax,%rax,1)
    0.00 :   1fa20:       add    $0x10,%r10
    0.00 :   1fa24:       jg     1fac0 <_dl_catch_error@@GLIBC_PRIVATE+0x1d80>
    0.00 :   1fa2a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fa2f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fa34:       movdqa %xmm2,%xmm4
    0.00 :   1fa38:       psrldq $0x3,%xmm3
    0.00 :   1fa3d:       pslldq $0xd,%xmm2
    0.00 :   1fa42:       por    %xmm3,%xmm2
    0.00 :   1fa46:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fa4a:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fa4e:       psubb  %xmm0,%xmm1
    0.00 :   1fa52:       pmovmskb %xmm1,%edx
    0.00 :   1fa56:       sub    $0xffff,%edx
    0.00 :   1fa5c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fa62:       add    $0x10,%rcx
    0.00 :   1fa66:       movdqa %xmm4,%xmm3
    0.00 :   1fa6a:       add    $0x10,%r10
    0.00 :   1fa6e:       jg     1fac0 <_dl_catch_error@@GLIBC_PRIVATE+0x1d80>
    0.00 :   1fa70:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fa75:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fa7a:       movdqa %xmm2,%xmm4
    0.00 :   1fa7e:       psrldq $0x3,%xmm3
    0.00 :   1fa83:       pslldq $0xd,%xmm2
    0.00 :   1fa88:       por    %xmm3,%xmm2
    0.00 :   1fa8c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fa90:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fa94:       psubb  %xmm0,%xmm1
    0.00 :   1fa98:       pmovmskb %xmm1,%edx
    0.00 :   1fa9c:       sub    $0xffff,%edx
    0.00 :   1faa2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1faa8:       add    $0x10,%rcx
    0.00 :   1faac:       movdqa %xmm4,%xmm3
    0.00 :   1fab0:       jmpq   1fa20 <_dl_catch_error@@GLIBC_PRIVATE+0x1ce0>
    0.00 :   1fab5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fac0:       pcmpeqb %xmm3,%xmm0
    0.00 :   1fac4:       pmovmskb %xmm0,%edx
    0.00 :   1fac8:       test   $0xfff8,%edx
    0.00 :   1face:       jne    1fae0 <_dl_catch_error@@GLIBC_PRIVATE+0x1da0>
    0.00 :   1fad0:       pxor   %xmm0,%xmm0
    0.00 :   1fad4:       sub    $0x1000,%r10
    0.00 :   1fadb:       jmpq   1fa2a <_dl_catch_error@@GLIBC_PRIVATE+0x1cea>
    0.00 :   1fae0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fae5:       psrldq $0x3,%xmm0
    0.00 :   1faea:       psrldq $0x3,%xmm3
    0.00 :   1faef:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1faf4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1faff:       nop
    0.00 :   1fb00:       pxor   %xmm0,%xmm0
    0.00 :   1fb04:       movdqa (%rdi),%xmm2
    0.00 :   1fb08:       movdqa (%rsi),%xmm1
    0.00 :   1fb0c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fb10:       pslldq $0xc,%xmm2
    0.00 :   1fb15:       pcmpeqb %xmm1,%xmm2
    0.00 :   1fb19:       psubb  %xmm0,%xmm2
    0.00 :   1fb1d:       pmovmskb %xmm2,%r9d
    0.00 :   1fb22:       shr    %cl,%edx
    0.00 :   1fb24:       shr    %cl,%r9d
    0.00 :   1fb27:       sub    %r9d,%edx
    0.00 :   1fb2a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1fb30:       movdqa (%rdi),%xmm3
    0.00 :   1fb34:       pxor   %xmm0,%xmm0
    0.00 :   1fb38:       mov    $0x10,%rcx
    0.00 :   1fb3f:       mov    $0x4,%r9d
    0.00 :   1fb45:       lea    0x4(%rdi),%r10
    0.00 :   1fb49:       and    $0xfff,%r10
    0.00 :   1fb50:       sub    $0x1000,%r10
    0.00 :   1fb57:       nopw   0x0(%rax,%rax,1)
    0.00 :   1fb60:       add    $0x10,%r10
    0.00 :   1fb64:       jg     1fc00 <_dl_catch_error@@GLIBC_PRIVATE+0x1ec0>
    0.00 :   1fb6a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fb6f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fb74:       movdqa %xmm2,%xmm4
    0.00 :   1fb78:       psrldq $0x4,%xmm3
    0.00 :   1fb7d:       pslldq $0xc,%xmm2
    0.00 :   1fb82:       por    %xmm3,%xmm2
    0.00 :   1fb86:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fb8a:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fb8e:       psubb  %xmm0,%xmm1
    0.00 :   1fb92:       pmovmskb %xmm1,%edx
    0.00 :   1fb96:       sub    $0xffff,%edx
    0.00 :   1fb9c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fba2:       add    $0x10,%rcx
    0.00 :   1fba6:       movdqa %xmm4,%xmm3
    0.00 :   1fbaa:       add    $0x10,%r10
    0.00 :   1fbae:       jg     1fc00 <_dl_catch_error@@GLIBC_PRIVATE+0x1ec0>
    0.00 :   1fbb0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fbb5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fbba:       movdqa %xmm2,%xmm4
    0.00 :   1fbbe:       psrldq $0x4,%xmm3
    0.00 :   1fbc3:       pslldq $0xc,%xmm2
    0.00 :   1fbc8:       por    %xmm3,%xmm2
    0.00 :   1fbcc:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fbd0:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fbd4:       psubb  %xmm0,%xmm1
    0.00 :   1fbd8:       pmovmskb %xmm1,%edx
    0.00 :   1fbdc:       sub    $0xffff,%edx
    0.00 :   1fbe2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fbe8:       add    $0x10,%rcx
    0.00 :   1fbec:       movdqa %xmm4,%xmm3
    0.00 :   1fbf0:       jmpq   1fb60 <_dl_catch_error@@GLIBC_PRIVATE+0x1e20>
    0.00 :   1fbf5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fc00:       pcmpeqb %xmm3,%xmm0
    0.00 :   1fc04:       pmovmskb %xmm0,%edx
    0.00 :   1fc08:       test   $0xfff0,%edx
    0.00 :   1fc0e:       jne    1fc20 <_dl_catch_error@@GLIBC_PRIVATE+0x1ee0>
    0.00 :   1fc10:       pxor   %xmm0,%xmm0
    0.00 :   1fc14:       sub    $0x1000,%r10
    0.00 :   1fc1b:       jmpq   1fb6a <_dl_catch_error@@GLIBC_PRIVATE+0x1e2a>
    0.00 :   1fc20:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fc25:       psrldq $0x4,%xmm0
    0.00 :   1fc2a:       psrldq $0x4,%xmm3
    0.00 :   1fc2f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1fc34:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fc3f:       nop
    0.00 :   1fc40:       pxor   %xmm0,%xmm0
    0.00 :   1fc44:       movdqa (%rdi),%xmm2
    0.00 :   1fc48:       movdqa (%rsi),%xmm1
    0.00 :   1fc4c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fc50:       pslldq $0xb,%xmm2
    0.00 :   1fc55:       pcmpeqb %xmm1,%xmm2
    0.00 :   1fc59:       psubb  %xmm0,%xmm2
    0.00 :   1fc5d:       pmovmskb %xmm2,%r9d
    0.00 :   1fc62:       shr    %cl,%edx
    0.00 :   1fc64:       shr    %cl,%r9d
    0.00 :   1fc67:       sub    %r9d,%edx
    0.00 :   1fc6a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1fc70:       movdqa (%rdi),%xmm3
    0.00 :   1fc74:       pxor   %xmm0,%xmm0
    0.00 :   1fc78:       mov    $0x10,%rcx
    0.00 :   1fc7f:       mov    $0x5,%r9d
    0.00 :   1fc85:       lea    0x5(%rdi),%r10
    0.00 :   1fc89:       and    $0xfff,%r10
    0.00 :   1fc90:       sub    $0x1000,%r10
    0.00 :   1fc97:       nopw   0x0(%rax,%rax,1)
    0.00 :   1fca0:       add    $0x10,%r10
    0.00 :   1fca4:       jg     1fd40 <_dl_catch_error@@GLIBC_PRIVATE+0x2000>
    0.00 :   1fcaa:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fcaf:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fcb4:       movdqa %xmm2,%xmm4
    0.00 :   1fcb8:       psrldq $0x5,%xmm3
    0.00 :   1fcbd:       pslldq $0xb,%xmm2
    0.00 :   1fcc2:       por    %xmm3,%xmm2
    0.00 :   1fcc6:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fcca:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fcce:       psubb  %xmm0,%xmm1
    0.00 :   1fcd2:       pmovmskb %xmm1,%edx
    0.00 :   1fcd6:       sub    $0xffff,%edx
    0.00 :   1fcdc:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fce2:       add    $0x10,%rcx
    0.00 :   1fce6:       movdqa %xmm4,%xmm3
    0.00 :   1fcea:       add    $0x10,%r10
    0.00 :   1fcee:       jg     1fd40 <_dl_catch_error@@GLIBC_PRIVATE+0x2000>
    0.00 :   1fcf0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fcf5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fcfa:       movdqa %xmm2,%xmm4
    0.00 :   1fcfe:       psrldq $0x5,%xmm3
    0.00 :   1fd03:       pslldq $0xb,%xmm2
    0.00 :   1fd08:       por    %xmm3,%xmm2
    0.00 :   1fd0c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fd10:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fd14:       psubb  %xmm0,%xmm1
    0.00 :   1fd18:       pmovmskb %xmm1,%edx
    0.00 :   1fd1c:       sub    $0xffff,%edx
    0.00 :   1fd22:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fd28:       add    $0x10,%rcx
    0.00 :   1fd2c:       movdqa %xmm4,%xmm3
    0.00 :   1fd30:       jmpq   1fca0 <_dl_catch_error@@GLIBC_PRIVATE+0x1f60>
    0.00 :   1fd35:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fd40:       pcmpeqb %xmm3,%xmm0
    0.00 :   1fd44:       pmovmskb %xmm0,%edx
    0.00 :   1fd48:       test   $0xffe0,%edx
    0.00 :   1fd4e:       jne    1fd60 <_dl_catch_error@@GLIBC_PRIVATE+0x2020>
    0.00 :   1fd50:       pxor   %xmm0,%xmm0
    0.00 :   1fd54:       sub    $0x1000,%r10
    0.00 :   1fd5b:       jmpq   1fcaa <_dl_catch_error@@GLIBC_PRIVATE+0x1f6a>
    0.00 :   1fd60:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fd65:       psrldq $0x5,%xmm0
    0.00 :   1fd6a:       psrldq $0x5,%xmm3
    0.00 :   1fd6f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1fd74:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fd7f:       nop
    0.00 :   1fd80:       pxor   %xmm0,%xmm0
    0.00 :   1fd84:       movdqa (%rdi),%xmm2
    0.00 :   1fd88:       movdqa (%rsi),%xmm1
    0.00 :   1fd8c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fd90:       pslldq $0xa,%xmm2
    0.00 :   1fd95:       pcmpeqb %xmm1,%xmm2
    0.00 :   1fd99:       psubb  %xmm0,%xmm2
    0.00 :   1fd9d:       pmovmskb %xmm2,%r9d
    0.00 :   1fda2:       shr    %cl,%edx
    0.00 :   1fda4:       shr    %cl,%r9d
    0.00 :   1fda7:       sub    %r9d,%edx
    0.00 :   1fdaa:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1fdb0:       movdqa (%rdi),%xmm3
    0.00 :   1fdb4:       pxor   %xmm0,%xmm0
    0.00 :   1fdb8:       mov    $0x10,%rcx
    0.00 :   1fdbf:       mov    $0x6,%r9d
    0.00 :   1fdc5:       lea    0x6(%rdi),%r10
    0.00 :   1fdc9:       and    $0xfff,%r10
    0.00 :   1fdd0:       sub    $0x1000,%r10
    0.00 :   1fdd7:       nopw   0x0(%rax,%rax,1)
    0.00 :   1fde0:       add    $0x10,%r10
    0.00 :   1fde4:       jg     1fe80 <_dl_catch_error@@GLIBC_PRIVATE+0x2140>
    0.00 :   1fdea:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fdef:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fdf4:       movdqa %xmm2,%xmm4
    0.00 :   1fdf8:       psrldq $0x6,%xmm3
    0.00 :   1fdfd:       pslldq $0xa,%xmm2
    0.00 :   1fe02:       por    %xmm3,%xmm2
    0.00 :   1fe06:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fe0a:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fe0e:       psubb  %xmm0,%xmm1
    0.00 :   1fe12:       pmovmskb %xmm1,%edx
    0.00 :   1fe16:       sub    $0xffff,%edx
    0.00 :   1fe1c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fe22:       add    $0x10,%rcx
    0.00 :   1fe26:       movdqa %xmm4,%xmm3
    0.00 :   1fe2a:       add    $0x10,%r10
    0.00 :   1fe2e:       jg     1fe80 <_dl_catch_error@@GLIBC_PRIVATE+0x2140>
    0.00 :   1fe30:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fe35:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1fe3a:       movdqa %xmm2,%xmm4
    0.00 :   1fe3e:       psrldq $0x6,%xmm3
    0.00 :   1fe43:       pslldq $0xa,%xmm2
    0.00 :   1fe48:       por    %xmm3,%xmm2
    0.00 :   1fe4c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fe50:       pcmpeqb %xmm2,%xmm1
    0.00 :   1fe54:       psubb  %xmm0,%xmm1
    0.00 :   1fe58:       pmovmskb %xmm1,%edx
    0.00 :   1fe5c:       sub    $0xffff,%edx
    0.00 :   1fe62:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1fe68:       add    $0x10,%rcx
    0.00 :   1fe6c:       movdqa %xmm4,%xmm3
    0.00 :   1fe70:       jmpq   1fde0 <_dl_catch_error@@GLIBC_PRIVATE+0x20a0>
    0.00 :   1fe75:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1fe80:       pcmpeqb %xmm3,%xmm0
    0.00 :   1fe84:       pmovmskb %xmm0,%edx
    0.00 :   1fe88:       test   $0xffc0,%edx
    0.00 :   1fe8e:       jne    1fea0 <_dl_catch_error@@GLIBC_PRIVATE+0x2160>
    0.00 :   1fe90:       pxor   %xmm0,%xmm0
    0.00 :   1fe94:       sub    $0x1000,%r10
    0.00 :   1fe9b:       jmpq   1fdea <_dl_catch_error@@GLIBC_PRIVATE+0x20aa>
    0.00 :   1fea0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1fea5:       psrldq $0x6,%xmm0
    0.00 :   1feaa:       psrldq $0x6,%xmm3
    0.00 :   1feaf:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1feb4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1febf:       nop
    0.00 :   1fec0:       pxor   %xmm0,%xmm0
    0.00 :   1fec4:       movdqa (%rdi),%xmm2
    0.00 :   1fec8:       movdqa (%rsi),%xmm1
    0.00 :   1fecc:       pcmpeqb %xmm1,%xmm0
    0.00 :   1fed0:       pslldq $0x9,%xmm2
    0.00 :   1fed5:       pcmpeqb %xmm1,%xmm2
    0.00 :   1fed9:       psubb  %xmm0,%xmm2
    0.00 :   1fedd:       pmovmskb %xmm2,%r9d
    0.00 :   1fee2:       shr    %cl,%edx
    0.00 :   1fee4:       shr    %cl,%r9d
    0.00 :   1fee7:       sub    %r9d,%edx
    0.00 :   1feea:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   1fef0:       movdqa (%rdi),%xmm3
    0.00 :   1fef4:       pxor   %xmm0,%xmm0
    0.00 :   1fef8:       mov    $0x10,%rcx
    0.00 :   1feff:       mov    $0x7,%r9d
    0.00 :   1ff05:       lea    0x7(%rdi),%r10
    0.00 :   1ff09:       and    $0xfff,%r10
    0.00 :   1ff10:       sub    $0x1000,%r10
    0.00 :   1ff17:       nopw   0x0(%rax,%rax,1)
    0.00 :   1ff20:       add    $0x10,%r10
    0.00 :   1ff24:       jg     1ffc0 <_dl_catch_error@@GLIBC_PRIVATE+0x2280>
    0.00 :   1ff2a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1ff2f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1ff34:       movdqa %xmm2,%xmm4
    0.00 :   1ff38:       psrldq $0x7,%xmm3
    0.00 :   1ff3d:       pslldq $0x9,%xmm2
    0.00 :   1ff42:       por    %xmm3,%xmm2
    0.00 :   1ff46:       pcmpeqb %xmm1,%xmm0
    0.00 :   1ff4a:       pcmpeqb %xmm2,%xmm1
    0.00 :   1ff4e:       psubb  %xmm0,%xmm1
    0.00 :   1ff52:       pmovmskb %xmm1,%edx
    0.00 :   1ff56:       sub    $0xffff,%edx
    0.00 :   1ff5c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1ff62:       add    $0x10,%rcx
    0.00 :   1ff66:       movdqa %xmm4,%xmm3
    0.00 :   1ff6a:       add    $0x10,%r10
    0.00 :   1ff6e:       jg     1ffc0 <_dl_catch_error@@GLIBC_PRIVATE+0x2280>
    0.00 :   1ff70:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1ff75:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   1ff7a:       movdqa %xmm2,%xmm4
    0.00 :   1ff7e:       psrldq $0x7,%xmm3
    0.00 :   1ff83:       pslldq $0x9,%xmm2
    0.00 :   1ff88:       por    %xmm3,%xmm2
    0.00 :   1ff8c:       pcmpeqb %xmm1,%xmm0
    0.00 :   1ff90:       pcmpeqb %xmm2,%xmm1
    0.00 :   1ff94:       psubb  %xmm0,%xmm1
    0.00 :   1ff98:       pmovmskb %xmm1,%edx
    0.00 :   1ff9c:       sub    $0xffff,%edx
    0.00 :   1ffa2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   1ffa8:       add    $0x10,%rcx
    0.00 :   1ffac:       movdqa %xmm4,%xmm3
    0.00 :   1ffb0:       jmpq   1ff20 <_dl_catch_error@@GLIBC_PRIVATE+0x21e0>
    0.00 :   1ffb5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1ffc0:       pcmpeqb %xmm3,%xmm0
    0.00 :   1ffc4:       pmovmskb %xmm0,%edx
    0.00 :   1ffc8:       test   $0xff80,%edx
    0.00 :   1ffce:       jne    1ffe0 <_dl_catch_error@@GLIBC_PRIVATE+0x22a0>
    0.00 :   1ffd0:       pxor   %xmm0,%xmm0
    0.00 :   1ffd4:       sub    $0x1000,%r10
    0.00 :   1ffdb:       jmpq   1ff2a <_dl_catch_error@@GLIBC_PRIVATE+0x21ea>
    0.00 :   1ffe0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   1ffe5:       psrldq $0x7,%xmm0
    0.00 :   1ffea:       psrldq $0x7,%xmm3
    0.00 :   1ffef:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   1fff4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1ffff:       nop
    0.00 :   20000:       pxor   %xmm0,%xmm0
    0.00 :   20004:       movdqa (%rdi),%xmm2
    0.00 :   20008:       movdqa (%rsi),%xmm1
    0.00 :   2000c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20010:       pslldq $0x8,%xmm2
    0.00 :   20015:       pcmpeqb %xmm1,%xmm2
    0.00 :   20019:       psubb  %xmm0,%xmm2
    0.00 :   2001d:       pmovmskb %xmm2,%r9d
    0.00 :   20022:       shr    %cl,%edx
    0.00 :   20024:       shr    %cl,%r9d
    0.00 :   20027:       sub    %r9d,%edx
    0.00 :   2002a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   20030:       movdqa (%rdi),%xmm3
    0.00 :   20034:       pxor   %xmm0,%xmm0
    0.00 :   20038:       mov    $0x10,%rcx
    0.00 :   2003f:       mov    $0x8,%r9d
    0.00 :   20045:       lea    0x8(%rdi),%r10
    0.00 :   20049:       and    $0xfff,%r10
    0.00 :   20050:       sub    $0x1000,%r10
    0.00 :   20057:       nopw   0x0(%rax,%rax,1)
    0.00 :   20060:       add    $0x10,%r10
    0.00 :   20064:       jg     20100 <_dl_catch_error@@GLIBC_PRIVATE+0x23c0>
    0.00 :   2006a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2006f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   20074:       movdqa %xmm2,%xmm4
    0.00 :   20078:       psrldq $0x8,%xmm3
    0.00 :   2007d:       pslldq $0x8,%xmm2
    0.00 :   20082:       por    %xmm3,%xmm2
    0.00 :   20086:       pcmpeqb %xmm1,%xmm0
    0.00 :   2008a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2008e:       psubb  %xmm0,%xmm1
    0.00 :   20092:       pmovmskb %xmm1,%edx
    0.00 :   20096:       sub    $0xffff,%edx
    0.00 :   2009c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   200a2:       add    $0x10,%rcx
    0.00 :   200a6:       movdqa %xmm4,%xmm3
    0.00 :   200aa:       add    $0x10,%r10
    0.00 :   200ae:       jg     20100 <_dl_catch_error@@GLIBC_PRIVATE+0x23c0>
    0.00 :   200b0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   200b5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   200ba:       movdqa %xmm2,%xmm4
    0.00 :   200be:       psrldq $0x8,%xmm3
    0.00 :   200c3:       pslldq $0x8,%xmm2
    0.00 :   200c8:       por    %xmm3,%xmm2
    0.00 :   200cc:       pcmpeqb %xmm1,%xmm0
    0.00 :   200d0:       pcmpeqb %xmm2,%xmm1
    0.00 :   200d4:       psubb  %xmm0,%xmm1
    0.00 :   200d8:       pmovmskb %xmm1,%edx
    0.00 :   200dc:       sub    $0xffff,%edx
    0.00 :   200e2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   200e8:       add    $0x10,%rcx
    0.00 :   200ec:       movdqa %xmm4,%xmm3
    0.00 :   200f0:       jmpq   20060 <_dl_catch_error@@GLIBC_PRIVATE+0x2320>
    0.00 :   200f5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20100:       pcmpeqb %xmm3,%xmm0
    0.00 :   20104:       pmovmskb %xmm0,%edx
    0.00 :   20108:       test   $0xff00,%edx
    0.00 :   2010e:       jne    20120 <_dl_catch_error@@GLIBC_PRIVATE+0x23e0>
    0.00 :   20110:       pxor   %xmm0,%xmm0
    0.00 :   20114:       sub    $0x1000,%r10
    0.00 :   2011b:       jmpq   2006a <_dl_catch_error@@GLIBC_PRIVATE+0x232a>
    0.00 :   20120:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20125:       psrldq $0x8,%xmm0
    0.00 :   2012a:       psrldq $0x8,%xmm3
    0.00 :   2012f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   20134:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   2013f:       nop
    0.00 :   20140:       pxor   %xmm0,%xmm0
    0.00 :   20144:       movdqa (%rdi),%xmm2
    0.00 :   20148:       movdqa (%rsi),%xmm1
    0.00 :   2014c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20150:       pslldq $0x7,%xmm2
    0.00 :   20155:       pcmpeqb %xmm1,%xmm2
    0.00 :   20159:       psubb  %xmm0,%xmm2
    0.00 :   2015d:       pmovmskb %xmm2,%r9d
    0.00 :   20162:       shr    %cl,%edx
    0.00 :   20164:       shr    %cl,%r9d
    0.00 :   20167:       sub    %r9d,%edx
    0.00 :   2016a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   20170:       movdqa (%rdi),%xmm3
    0.00 :   20174:       pxor   %xmm0,%xmm0
    0.00 :   20178:       mov    $0x10,%rcx
    0.00 :   2017f:       mov    $0x9,%r9d
    0.00 :   20185:       lea    0x9(%rdi),%r10
    0.00 :   20189:       and    $0xfff,%r10
    0.00 :   20190:       sub    $0x1000,%r10
    0.00 :   20197:       nopw   0x0(%rax,%rax,1)
    0.00 :   201a0:       add    $0x10,%r10
    0.00 :   201a4:       jg     20240 <_dl_catch_error@@GLIBC_PRIVATE+0x2500>
    0.00 :   201aa:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   201af:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   201b4:       movdqa %xmm2,%xmm4
    0.00 :   201b8:       psrldq $0x9,%xmm3
    0.00 :   201bd:       pslldq $0x7,%xmm2
    0.00 :   201c2:       por    %xmm3,%xmm2
    0.00 :   201c6:       pcmpeqb %xmm1,%xmm0
    0.00 :   201ca:       pcmpeqb %xmm2,%xmm1
    0.00 :   201ce:       psubb  %xmm0,%xmm1
    0.00 :   201d2:       pmovmskb %xmm1,%edx
    0.00 :   201d6:       sub    $0xffff,%edx
    0.00 :   201dc:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   201e2:       add    $0x10,%rcx
    0.00 :   201e6:       movdqa %xmm4,%xmm3
    0.00 :   201ea:       add    $0x10,%r10
    0.00 :   201ee:       jg     20240 <_dl_catch_error@@GLIBC_PRIVATE+0x2500>
    0.00 :   201f0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   201f5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   201fa:       movdqa %xmm2,%xmm4
    0.00 :   201fe:       psrldq $0x9,%xmm3
    0.00 :   20203:       pslldq $0x7,%xmm2
    0.00 :   20208:       por    %xmm3,%xmm2
    0.00 :   2020c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20210:       pcmpeqb %xmm2,%xmm1
    0.00 :   20214:       psubb  %xmm0,%xmm1
    0.00 :   20218:       pmovmskb %xmm1,%edx
    0.00 :   2021c:       sub    $0xffff,%edx
    0.00 :   20222:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20228:       add    $0x10,%rcx
    0.00 :   2022c:       movdqa %xmm4,%xmm3
    0.00 :   20230:       jmpq   201a0 <_dl_catch_error@@GLIBC_PRIVATE+0x2460>
    0.00 :   20235:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20240:       pcmpeqb %xmm3,%xmm0
    0.00 :   20244:       pmovmskb %xmm0,%edx
    0.00 :   20248:       test   $0xfe00,%edx
    0.00 :   2024e:       jne    20260 <_dl_catch_error@@GLIBC_PRIVATE+0x2520>
    0.00 :   20250:       pxor   %xmm0,%xmm0
    0.00 :   20254:       sub    $0x1000,%r10
    0.00 :   2025b:       jmpq   201aa <_dl_catch_error@@GLIBC_PRIVATE+0x246a>
    0.00 :   20260:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20265:       psrldq $0x9,%xmm0
    0.00 :   2026a:       psrldq $0x9,%xmm3
    0.00 :   2026f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   20274:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   2027f:       nop
    0.00 :   20280:       pxor   %xmm0,%xmm0
    0.00 :   20284:       movdqa (%rdi),%xmm2
    0.00 :   20288:       movdqa (%rsi),%xmm1
    0.00 :   2028c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20290:       pslldq $0x6,%xmm2
    0.00 :   20295:       pcmpeqb %xmm1,%xmm2
    0.00 :   20299:       psubb  %xmm0,%xmm2
    0.00 :   2029d:       pmovmskb %xmm2,%r9d
    0.00 :   202a2:       shr    %cl,%edx
    0.00 :   202a4:       shr    %cl,%r9d
    0.00 :   202a7:       sub    %r9d,%edx
    0.00 :   202aa:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   202b0:       movdqa (%rdi),%xmm3
    0.00 :   202b4:       pxor   %xmm0,%xmm0
    0.00 :   202b8:       mov    $0x10,%rcx
    0.00 :   202bf:       mov    $0xa,%r9d
    0.00 :   202c5:       lea    0xa(%rdi),%r10
    0.00 :   202c9:       and    $0xfff,%r10
    0.00 :   202d0:       sub    $0x1000,%r10
    0.00 :   202d7:       nopw   0x0(%rax,%rax,1)
    0.00 :   202e0:       add    $0x10,%r10
    0.00 :   202e4:       jg     20380 <_dl_catch_error@@GLIBC_PRIVATE+0x2640>
    0.00 :   202ea:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   202ef:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   202f4:       movdqa %xmm2,%xmm4
    0.00 :   202f8:       psrldq $0xa,%xmm3
    0.00 :   202fd:       pslldq $0x6,%xmm2
    0.00 :   20302:       por    %xmm3,%xmm2
    0.00 :   20306:       pcmpeqb %xmm1,%xmm0
    0.00 :   2030a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2030e:       psubb  %xmm0,%xmm1
    0.00 :   20312:       pmovmskb %xmm1,%edx
    0.00 :   20316:       sub    $0xffff,%edx
    0.00 :   2031c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20322:       add    $0x10,%rcx
    0.00 :   20326:       movdqa %xmm4,%xmm3
    0.00 :   2032a:       add    $0x10,%r10
    0.00 :   2032e:       jg     20380 <_dl_catch_error@@GLIBC_PRIVATE+0x2640>
    0.00 :   20330:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20335:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2033a:       movdqa %xmm2,%xmm4
    0.00 :   2033e:       psrldq $0xa,%xmm3
    0.00 :   20343:       pslldq $0x6,%xmm2
    0.00 :   20348:       por    %xmm3,%xmm2
    0.00 :   2034c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20350:       pcmpeqb %xmm2,%xmm1
    0.00 :   20354:       psubb  %xmm0,%xmm1
    0.00 :   20358:       pmovmskb %xmm1,%edx
    0.00 :   2035c:       sub    $0xffff,%edx
    0.00 :   20362:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20368:       add    $0x10,%rcx
    0.00 :   2036c:       movdqa %xmm4,%xmm3
    0.00 :   20370:       jmpq   202e0 <_dl_catch_error@@GLIBC_PRIVATE+0x25a0>
    0.00 :   20375:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20380:       pcmpeqb %xmm3,%xmm0
    0.00 :   20384:       pmovmskb %xmm0,%edx
    0.00 :   20388:       test   $0xfc00,%edx
    0.00 :   2038e:       jne    203a0 <_dl_catch_error@@GLIBC_PRIVATE+0x2660>
    0.00 :   20390:       pxor   %xmm0,%xmm0
    0.00 :   20394:       sub    $0x1000,%r10
    0.00 :   2039b:       jmpq   202ea <_dl_catch_error@@GLIBC_PRIVATE+0x25aa>
    0.00 :   203a0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   203a5:       psrldq $0xa,%xmm0
    0.00 :   203aa:       psrldq $0xa,%xmm3
    0.00 :   203af:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   203b4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   203bf:       nop
    0.00 :   203c0:       pxor   %xmm0,%xmm0
    0.00 :   203c4:       movdqa (%rdi),%xmm2
    0.00 :   203c8:       movdqa (%rsi),%xmm1
    0.00 :   203cc:       pcmpeqb %xmm1,%xmm0
    0.00 :   203d0:       pslldq $0x5,%xmm2
    0.00 :   203d5:       pcmpeqb %xmm1,%xmm2
    0.00 :   203d9:       psubb  %xmm0,%xmm2
    0.00 :   203dd:       pmovmskb %xmm2,%r9d
    0.00 :   203e2:       shr    %cl,%edx
    0.00 :   203e4:       shr    %cl,%r9d
    0.00 :   203e7:       sub    %r9d,%edx
    0.00 :   203ea:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   203f0:       movdqa (%rdi),%xmm3
    0.00 :   203f4:       pxor   %xmm0,%xmm0
    0.00 :   203f8:       mov    $0x10,%rcx
    0.00 :   203ff:       mov    $0xb,%r9d
    0.00 :   20405:       lea    0xb(%rdi),%r10
    0.00 :   20409:       and    $0xfff,%r10
    0.00 :   20410:       sub    $0x1000,%r10
    0.00 :   20417:       nopw   0x0(%rax,%rax,1)
    0.00 :   20420:       add    $0x10,%r10
    0.00 :   20424:       jg     204c0 <_dl_catch_error@@GLIBC_PRIVATE+0x2780>
    0.00 :   2042a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2042f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   20434:       movdqa %xmm2,%xmm4
    0.00 :   20438:       psrldq $0xb,%xmm3
    0.00 :   2043d:       pslldq $0x5,%xmm2
    0.00 :   20442:       por    %xmm3,%xmm2
    0.00 :   20446:       pcmpeqb %xmm1,%xmm0
    0.00 :   2044a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2044e:       psubb  %xmm0,%xmm1
    0.00 :   20452:       pmovmskb %xmm1,%edx
    0.00 :   20456:       sub    $0xffff,%edx
    0.00 :   2045c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20462:       add    $0x10,%rcx
    0.00 :   20466:       movdqa %xmm4,%xmm3
    0.00 :   2046a:       add    $0x10,%r10
    0.00 :   2046e:       jg     204c0 <_dl_catch_error@@GLIBC_PRIVATE+0x2780>
    0.00 :   20470:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20475:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2047a:       movdqa %xmm2,%xmm4
    0.00 :   2047e:       psrldq $0xb,%xmm3
    0.00 :   20483:       pslldq $0x5,%xmm2
    0.00 :   20488:       por    %xmm3,%xmm2
    0.00 :   2048c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20490:       pcmpeqb %xmm2,%xmm1
    0.00 :   20494:       psubb  %xmm0,%xmm1
    0.00 :   20498:       pmovmskb %xmm1,%edx
    0.00 :   2049c:       sub    $0xffff,%edx
    0.00 :   204a2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   204a8:       add    $0x10,%rcx
    0.00 :   204ac:       movdqa %xmm4,%xmm3
    0.00 :   204b0:       jmpq   20420 <_dl_catch_error@@GLIBC_PRIVATE+0x26e0>
    0.00 :   204b5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   204c0:       pcmpeqb %xmm3,%xmm0
    0.00 :   204c4:       pmovmskb %xmm0,%edx
    0.00 :   204c8:       test   $0xf800,%edx
    0.00 :   204ce:       jne    204e0 <_dl_catch_error@@GLIBC_PRIVATE+0x27a0>
    0.00 :   204d0:       pxor   %xmm0,%xmm0
    0.00 :   204d4:       sub    $0x1000,%r10
    0.00 :   204db:       jmpq   2042a <_dl_catch_error@@GLIBC_PRIVATE+0x26ea>
    0.00 :   204e0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   204e5:       psrldq $0xb,%xmm0
    0.00 :   204ea:       psrldq $0xb,%xmm3
    0.00 :   204ef:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   204f4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   204ff:       nop
    0.00 :   20500:       pxor   %xmm0,%xmm0
    0.00 :   20504:       movdqa (%rdi),%xmm2
    0.00 :   20508:       movdqa (%rsi),%xmm1
    0.00 :   2050c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20510:       pslldq $0x4,%xmm2
    0.00 :   20515:       pcmpeqb %xmm1,%xmm2
    0.00 :   20519:       psubb  %xmm0,%xmm2
    0.00 :   2051d:       pmovmskb %xmm2,%r9d
    0.00 :   20522:       shr    %cl,%edx
    0.00 :   20524:       shr    %cl,%r9d
    0.00 :   20527:       sub    %r9d,%edx
    0.00 :   2052a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   20530:       movdqa (%rdi),%xmm3
    0.00 :   20534:       pxor   %xmm0,%xmm0
    0.00 :   20538:       mov    $0x10,%rcx
    0.00 :   2053f:       mov    $0xc,%r9d
    0.00 :   20545:       lea    0xc(%rdi),%r10
    0.00 :   20549:       and    $0xfff,%r10
    0.00 :   20550:       sub    $0x1000,%r10
    0.00 :   20557:       nopw   0x0(%rax,%rax,1)
    0.00 :   20560:       add    $0x10,%r10
    0.00 :   20564:       jg     20600 <_dl_catch_error@@GLIBC_PRIVATE+0x28c0>
    0.00 :   2056a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2056f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   20574:       movdqa %xmm2,%xmm4
    0.00 :   20578:       psrldq $0xc,%xmm3
    0.00 :   2057d:       pslldq $0x4,%xmm2
    0.00 :   20582:       por    %xmm3,%xmm2
    0.00 :   20586:       pcmpeqb %xmm1,%xmm0
    0.00 :   2058a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2058e:       psubb  %xmm0,%xmm1
    0.00 :   20592:       pmovmskb %xmm1,%edx
    0.00 :   20596:       sub    $0xffff,%edx
    0.00 :   2059c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   205a2:       add    $0x10,%rcx
    0.00 :   205a6:       movdqa %xmm4,%xmm3
    0.00 :   205aa:       add    $0x10,%r10
    0.00 :   205ae:       jg     20600 <_dl_catch_error@@GLIBC_PRIVATE+0x28c0>
    0.00 :   205b0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   205b5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   205ba:       movdqa %xmm2,%xmm4
    0.00 :   205be:       psrldq $0xc,%xmm3
    0.00 :   205c3:       pslldq $0x4,%xmm2
    0.00 :   205c8:       por    %xmm3,%xmm2
    0.00 :   205cc:       pcmpeqb %xmm1,%xmm0
    0.00 :   205d0:       pcmpeqb %xmm2,%xmm1
    0.00 :   205d4:       psubb  %xmm0,%xmm1
    0.00 :   205d8:       pmovmskb %xmm1,%edx
    0.00 :   205dc:       sub    $0xffff,%edx
    0.00 :   205e2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   205e8:       add    $0x10,%rcx
    0.00 :   205ec:       movdqa %xmm4,%xmm3
    0.00 :   205f0:       jmpq   20560 <_dl_catch_error@@GLIBC_PRIVATE+0x2820>
    0.00 :   205f5:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20600:       pcmpeqb %xmm3,%xmm0
    0.00 :   20604:       pmovmskb %xmm0,%edx
    0.00 :   20608:       test   $0xf000,%edx
    0.00 :   2060e:       jne    20620 <_dl_catch_error@@GLIBC_PRIVATE+0x28e0>
    0.00 :   20610:       pxor   %xmm0,%xmm0
    0.00 :   20614:       sub    $0x1000,%r10
    0.00 :   2061b:       jmpq   2056a <_dl_catch_error@@GLIBC_PRIVATE+0x282a>
    0.00 :   20620:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20625:       psrldq $0xc,%xmm0
    0.00 :   2062a:       psrldq $0xc,%xmm3
    0.00 :   2062f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   20634:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   2063f:       nop
    0.00 :   20640:       pxor   %xmm0,%xmm0
    0.00 :   20644:       movdqa (%rdi),%xmm2
    0.00 :   20648:       movdqa (%rsi),%xmm1
    0.00 :   2064c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20650:       pslldq $0x3,%xmm2
    0.00 :   20655:       pcmpeqb %xmm1,%xmm2
    0.00 :   20659:       psubb  %xmm0,%xmm2
    0.00 :   2065d:       pmovmskb %xmm2,%r9d
    0.00 :   20662:       shr    %cl,%edx
    0.00 :   20664:       shr    %cl,%r9d
    0.00 :   20667:       sub    %r9d,%edx
    0.00 :   2066a:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   20670:       movdqa (%rdi),%xmm3
    0.00 :   20674:       pxor   %xmm0,%xmm0
    0.00 :   20678:       mov    $0x10,%rcx
    0.00 :   2067f:       mov    $0xd,%r9d
    0.00 :   20685:       lea    0xd(%rdi),%r10
    0.00 :   20689:       and    $0xfff,%r10
    0.00 :   20690:       sub    $0x1000,%r10
    0.00 :   20697:       nopw   0x0(%rax,%rax,1)
    0.00 :   206a0:       add    $0x10,%r10
    0.00 :   206a4:       jg     20740 <_dl_catch_error@@GLIBC_PRIVATE+0x2a00>
    0.00 :   206aa:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   206af:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   206b4:       movdqa %xmm2,%xmm4
    0.00 :   206b8:       psrldq $0xd,%xmm3
    0.00 :   206bd:       pslldq $0x3,%xmm2
    0.00 :   206c2:       por    %xmm3,%xmm2
    0.00 :   206c6:       pcmpeqb %xmm1,%xmm0
    0.00 :   206ca:       pcmpeqb %xmm2,%xmm1
    0.00 :   206ce:       psubb  %xmm0,%xmm1
    0.00 :   206d2:       pmovmskb %xmm1,%edx
    0.00 :   206d6:       sub    $0xffff,%edx
    0.00 :   206dc:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   206e2:       add    $0x10,%rcx
    0.00 :   206e6:       movdqa %xmm4,%xmm3
    0.00 :   206ea:       add    $0x10,%r10
    0.00 :   206ee:       jg     20740 <_dl_catch_error@@GLIBC_PRIVATE+0x2a00>
    0.00 :   206f0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   206f5:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   206fa:       movdqa %xmm2,%xmm4
    0.00 :   206fe:       psrldq $0xd,%xmm3
    0.00 :   20703:       pslldq $0x3,%xmm2
    0.00 :   20708:       por    %xmm3,%xmm2
    0.00 :   2070c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20710:       pcmpeqb %xmm2,%xmm1
    0.00 :   20714:       psubb  %xmm0,%xmm1
    0.00 :   20718:       pmovmskb %xmm1,%edx
    0.00 :   2071c:       sub    $0xffff,%edx
    0.00 :   20722:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20728:       add    $0x10,%rcx
    0.00 :   2072c:       movdqa %xmm4,%xmm3
    0.00 :   20730:       jmpq   206a0 <_dl_catch_error@@GLIBC_PRIVATE+0x2960>
    0.00 :   20735:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20740:       pcmpeqb %xmm3,%xmm0
    0.00 :   20744:       pmovmskb %xmm0,%edx
    0.00 :   20748:       test   $0xe000,%edx
    0.00 :   2074e:       jne    20760 <_dl_catch_error@@GLIBC_PRIVATE+0x2a20>
    0.00 :   20750:       pxor   %xmm0,%xmm0
    0.00 :   20754:       sub    $0x1000,%r10
    0.00 :   2075b:       jmpq   206aa <_dl_catch_error@@GLIBC_PRIVATE+0x296a>
    0.00 :   20760:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20765:       psrldq $0xd,%xmm0
    0.00 :   2076a:       psrldq $0xd,%xmm3
    0.00 :   2076f:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   20774:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   2077f:       nop
    0.00 :   20780:       pxor   %xmm0,%xmm0
    0.00 :   20784:       movdqa (%rdi),%xmm2
    0.00 :   20788:       movdqa (%rsi),%xmm1
    0.00 :   2078c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20790:       pslldq $0x2,%xmm2
    0.00 :   20795:       pcmpeqb %xmm1,%xmm2
    0.00 :   20799:       psubb  %xmm0,%xmm2
    0.00 :   2079d:       pmovmskb %xmm2,%r9d
    0.00 :   207a2:       shr    %cl,%edx
    0.00 :   207a4:       shr    %cl,%r9d
    0.00 :   207a7:       sub    %r9d,%edx
    0.00 :   207aa:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   207b0:       movdqa (%rdi),%xmm3
    0.00 :   207b4:       pxor   %xmm0,%xmm0
    0.00 :   207b8:       mov    $0x10,%rcx
    0.00 :   207bf:       mov    $0xe,%r9d
    0.00 :   207c5:       lea    0xe(%rdi),%r10
    0.00 :   207c9:       and    $0xfff,%r10
    0.00 :   207d0:       sub    $0x1000,%r10
    0.00 :   207d7:       nopw   0x0(%rax,%rax,1)
    0.00 :   207e0:       add    $0x10,%r10
    0.00 :   207e4:       jg     20880 <_dl_catch_error@@GLIBC_PRIVATE+0x2b40>
    0.00 :   207ea:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   207ef:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   207f4:       movdqa %xmm2,%xmm4
    0.00 :   207f8:       psrldq $0xe,%xmm3
    0.00 :   207fd:       pslldq $0x2,%xmm2
    0.00 :   20802:       por    %xmm3,%xmm2
    0.00 :   20806:       pcmpeqb %xmm1,%xmm0
    0.00 :   2080a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2080e:       psubb  %xmm0,%xmm1
    0.00 :   20812:       pmovmskb %xmm1,%edx
    0.00 :   20816:       sub    $0xffff,%edx
    0.00 :   2081c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20822:       add    $0x10,%rcx
    0.00 :   20826:       movdqa %xmm4,%xmm3
    0.00 :   2082a:       add    $0x10,%r10
    0.00 :   2082e:       jg     20880 <_dl_catch_error@@GLIBC_PRIVATE+0x2b40>
    0.00 :   20830:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20835:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2083a:       movdqa %xmm2,%xmm4
    0.00 :   2083e:       psrldq $0xe,%xmm3
    0.00 :   20843:       pslldq $0x2,%xmm2
    0.00 :   20848:       por    %xmm3,%xmm2
    0.00 :   2084c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20850:       pcmpeqb %xmm2,%xmm1
    0.00 :   20854:       psubb  %xmm0,%xmm1
    0.00 :   20858:       pmovmskb %xmm1,%edx
    0.00 :   2085c:       sub    $0xffff,%edx
    0.00 :   20862:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20868:       add    $0x10,%rcx
    0.00 :   2086c:       movdqa %xmm4,%xmm3
    0.00 :   20870:       jmpq   207e0 <_dl_catch_error@@GLIBC_PRIVATE+0x2aa0>
    0.00 :   20875:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20880:       pcmpeqb %xmm3,%xmm0
    0.00 :   20884:       pmovmskb %xmm0,%edx
    0.00 :   20888:       test   $0xc000,%edx
    0.00 :   2088e:       jne    208a0 <_dl_catch_error@@GLIBC_PRIVATE+0x2b60>
    0.00 :   20890:       pxor   %xmm0,%xmm0
    0.00 :   20894:       sub    $0x1000,%r10
    0.00 :   2089b:       jmpq   207ea <_dl_catch_error@@GLIBC_PRIVATE+0x2aaa>
    0.00 :   208a0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   208a5:       psrldq $0xe,%xmm0
    0.00 :   208aa:       psrldq $0xe,%xmm3
    0.00 :   208af:       jmpq   209f0 <_dl_catch_error@@GLIBC_PRIVATE+0x2cb0>
    0.00 :   208b4:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   208bf:       nop
    0.00 :   208c0:       pxor   %xmm0,%xmm0
    0.00 :   208c4:       movdqa (%rdi),%xmm2
    0.00 :   208c8:       movdqa (%rsi),%xmm1
    0.00 :   208cc:       pcmpeqb %xmm1,%xmm0
    0.00 :   208d0:       pslldq $0x1,%xmm2
    0.00 :   208d5:       pcmpeqb %xmm1,%xmm2
    0.00 :   208d9:       psubb  %xmm0,%xmm2
    0.00 :   208dd:       pmovmskb %xmm2,%r9d
    0.00 :   208e2:       shr    %cl,%edx
    0.00 :   208e4:       shr    %cl,%r9d
    0.00 :   208e7:       sub    %r9d,%edx
    0.00 :   208ea:       jne    20a05 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc5>
    0.00 :   208f0:       movdqa (%rdi),%xmm3
    0.00 :   208f4:       pxor   %xmm0,%xmm0
    0.00 :   208f8:       mov    $0x10,%rcx
    0.00 :   208ff:       mov    $0xf,%r9d
    0.00 :   20905:       lea    0xf(%rdi),%r10
    0.00 :   20909:       and    $0xfff,%r10
    0.00 :   20910:       sub    $0x1000,%r10
    0.00 :   20917:       nopw   0x0(%rax,%rax,1)
    0.00 :   20920:       add    $0x10,%r10
    0.00 :   20924:       jg     209c0 <_dl_catch_error@@GLIBC_PRIVATE+0x2c80>
    0.00 :   2092a:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2092f:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   20934:       movdqa %xmm2,%xmm4
    0.00 :   20938:       psrldq $0xf,%xmm3
    0.00 :   2093d:       pslldq $0x1,%xmm2
    0.00 :   20942:       por    %xmm3,%xmm2
    0.00 :   20946:       pcmpeqb %xmm1,%xmm0
    0.00 :   2094a:       pcmpeqb %xmm2,%xmm1
    0.00 :   2094e:       psubb  %xmm0,%xmm1
    0.00 :   20952:       pmovmskb %xmm1,%edx
    0.00 :   20956:       sub    $0xffff,%edx
    0.00 :   2095c:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   20962:       add    $0x10,%rcx
    0.00 :   20966:       movdqa %xmm4,%xmm3
    0.00 :   2096a:       add    $0x10,%r10
    0.00 :   2096e:       jg     209c0 <_dl_catch_error@@GLIBC_PRIVATE+0x2c80>
    0.00 :   20970:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   20975:       movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2097a:       movdqa %xmm2,%xmm4
    0.00 :   2097e:       psrldq $0xf,%xmm3
    0.00 :   20983:       pslldq $0x1,%xmm2
    0.00 :   20988:       por    %xmm3,%xmm2
    0.00 :   2098c:       pcmpeqb %xmm1,%xmm0
    0.00 :   20990:       pcmpeqb %xmm2,%xmm1
    0.00 :   20994:       psubb  %xmm0,%xmm1
    0.00 :   20998:       pmovmskb %xmm1,%edx
    0.00 :   2099c:       sub    $0xffff,%edx
    0.00 :   209a2:       jne    20a00 <_dl_catch_error@@GLIBC_PRIVATE+0x2cc0>
    0.00 :   209a4:       add    $0x10,%rcx
    0.00 :   209a8:       movdqa %xmm4,%xmm3
    0.00 :   209ac:       jmpq   20920 <_dl_catch_error@@GLIBC_PRIVATE+0x2be0>
    0.00 :   209b1:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   209bc:       nopl   0x0(%rax)
    0.00 :   209c0:       pcmpeqb %xmm3,%xmm0
    0.00 :   209c4:       pmovmskb %xmm0,%edx
    0.00 :   209c8:       test   $0x8000,%edx
    0.00 :   209ce:       jne    209e0 <_dl_catch_error@@GLIBC_PRIVATE+0x2ca0>
    0.00 :   209d0:       pxor   %xmm0,%xmm0
    0.00 :   209d4:       sub    $0x1000,%r10
    0.00 :   209db:       jmpq   2092a <_dl_catch_error@@GLIBC_PRIVATE+0x2bea>
    0.00 :   209e0:       movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   209e5:       psrldq $0xf,%xmm3
    0.00 :   209ea:       psrldq $0xf,%xmm0
    0.00 :   209ef:       nop
    0.00 :   209f0:       pcmpeqb %xmm3,%xmm1
    0.00 :   209f4:       psubb  %xmm0,%xmm1
    0.00 :   209f8:       pmovmskb %xmm1,%edx
    0.00 :   209fc:       not    %edx
    0.00 :   209fe:       xchg   %ax,%ax
    0.00 :   20a00:       lea    -0x10(%r9,%rcx,1),%rax
    0.00 :   20a05:       lea    (%rdi,%rax,1),%rdi
    0.00 :   20a09:       lea    (%rsi,%rcx,1),%rsi
    0.00 :   20a0d:       test   %r8d,%r8d
    0.00 :   20a10:       je     20a20 <_dl_catch_error@@GLIBC_PRIVATE+0x2ce0>
    0.00 :   20a12:       xchg   %rsi,%rdi
    0.00 :   20a15:       data16 nopw %cs:0x0(%rax,%rax,1)
  100.00 :   20a20:       bsf    %rdx,%rdx
    0.00 :   20a24:       movzbl (%rsi,%rdx,1),%ecx
    0.00 :   20a28:       movzbl (%rdi,%rdx,1),%eax
    0.00 :   20a2c:       sub    %ecx,%eax
    0.00 :   20a2e:       retq
    0.00 :   20a2f:       xor    %eax,%eax
    0.00 :   20a31:       retq
    0.00 :   20a32:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   20a3d:       nopl   (%rax)
    0.00 :   20a40:       movzbl (%rsi),%ecx
    0.00 :   20a43:       movzbl (%rdi),%eax
    0.00 :   20a46:       sub    %ecx,%eax
    0.00 :   20a48:       retq
    0.00 :   20a49:       nopl   0x0(%rax)
 Percent |	Source code & Disassembly of ld-2.31.so for LLC-loads (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000015490 <_dl_find_dso_for_object@@GLIBC_PRIVATE>:
    0.00 :   15490:       endbr64
    0.00 :   15494:       push   %r13
    0.00 :   15496:       lea    0x18bc3(%rip),%r13        # 2e060 <_rtld_global@@GLIBC_PRIVATE>
    0.00 :   1549d:       push   %r12
    0.00 :   1549f:       push   %rbp
    0.00 :   154a0:       xor    %ebp,%ebp
    0.00 :   154a2:       push   %rbx
    0.00 :   154a3:       mov    %rdi,%rbx
    0.00 :   154a6:       sub    $0x8,%rsp
    0.00 :   154aa:       mov    0x194af(%rip),%rax        # 2e960 <_rtld_global@@GLIBC_PRIVATE+0x900>
    0.00 :   154b1:       test   %rax,%rax
    0.00 :   154b4:       je     1550f <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x7f>
    0.00 :   154b6:       mov    0x0(%r13),%r12
    0.00 :   154ba:       test   %r12,%r12
    0.00 :   154bd:       je     154ff <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x6f>
    0.00 :   154bf:       nop
    0.00 :   154c0:       cmp    %rbx,0x350(%r12)
    0.00 :   154c8:       ja     154ee <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x5e>
    0.00 :   154ca:       cmp    %rbx,0x358(%r12)
    0.00 :   154d2:       jbe    154ee <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x5e>
    0.00 :   154d4:       testb  $0x40,0x31d(%r12)
    0.00 :   154dd:       jne    15520 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x90>
    0.00 :   154df:       mov    %rbx,%rsi
    0.00 :   154e2:       mov    %r12,%rdi
    0.00 :   154e5:       callq  1eb20 <_dl_catch_error@@GLIBC_PRIVATE+0xde0>
    0.00 :   154ea:       test   %eax,%eax
    0.00 :   154ec:       jne    15520 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x90>
    0.00 :   154ee:       mov    0x18(%r12),%r12
  100.00 :   154f3:       test   %r12,%r12
    0.00 :   154f6:       jne    154c0 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x30>
    0.00 :   154f8:       mov    0x19461(%rip),%rax        # 2e960 <_rtld_global@@GLIBC_PRIVATE+0x900>
    0.00 :   154ff:       add    $0x1,%rbp
    0.00 :   15503:       add    $0x90,%r13
    0.00 :   1550a:       cmp    %rax,%rbp
    0.00 :   1550d:       jb     154b6 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x26>
    0.00 :   1550f:       add    $0x8,%rsp
    0.00 :   15513:       xor    %r12d,%r12d
    0.00 :   15516:       pop    %rbx
    0.00 :   15517:       mov    %r12,%rax
    0.00 :   1551a:       pop    %rbp
    0.00 :   1551b:       pop    %r12
    0.00 :   1551d:       pop    %r13
    0.00 :   1551f:       retq
    0.00 :   15520:       cmp    %rbp,0x30(%r12)
    0.00 :   15525:       jne    15535 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0xa5>
    0.00 :   15527:       add    $0x8,%rsp
    0.00 :   1552b:       mov    %r12,%rax
    0.00 :   1552e:       pop    %rbx
    0.00 :   1552f:       pop    %rbp
    0.00 :   15530:       pop    %r12
    0.00 :   15532:       pop    %r13
    0.00 :   15534:       retq
    0.00 :   15535:       lea    0x13744(%rip),%rcx        # 28c80 <_dl_catch_error@@GLIBC_PRIVATE+0xaf40>
    0.00 :   1553c:       mov    $0xd3,%edx
    0.00 :   15541:       lea    0x10485(%rip),%rsi        # 259cd <_dl_catch_error@@GLIBC_PRIVATE+0x7c8d>
    0.00 :   15548:       lea    0x104a3(%rip),%rdi        # 259f2 <_dl_catch_error@@GLIBC_PRIVATE+0x7cb2>
    0.00 :   1554f:       callq  1d790 <free@@GLIBC_2.2.5+0x190>
    0.00 :   15554:       data16 nopw %cs:0x0(%rax,%rax,1)
    0.00 :   1555f:       nop
 Percent |	Source code & Disassembly of ld-2.31.so for LLC-loads (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000018bc0 <_dl_find_dso_for_object@@GLIBC_PRIVATE+0x3730>:
  100.00 :   18bc0:       endbr64
    0.00 :   18bc4:       push   %rbx
    0.00 :   18bc5:       mov    %rsp,%rbx
    0.00 :   18bc8:       and    $0xffffffffffffffc0,%rsp
    0.00 :   18bcc:       sub    0x14b35(%rip),%rsp        # 2d708 <_rtld_global_ro@@GLIBC_PRIVATE+0xe8>
    0.00 :   18bd3:       mov    %rax,(%rsp)
    0.00 :   18bd7:       mov    %rcx,0x8(%rsp)
    0.00 :   18bdc:       mov    %rdx,0x10(%rsp)
    0.00 :   18be1:       mov    %rsi,0x18(%rsp)
    0.00 :   18be6:       mov    %rdi,0x20(%rsp)
    0.00 :   18beb:       mov    %r8,0x28(%rsp)
    0.00 :   18bf0:       mov    %r9,0x30(%rsp)
    0.00 :   18bf5:       mov    $0xee,%eax
    0.00 :   18bfa:       xor    %edx,%edx
    0.00 :   18bfc:       mov    %rdx,0x250(%rsp)
    0.00 :   18c04:       mov    %rdx,0x258(%rsp)
    0.00 :   18c0c:       mov    %rdx,0x260(%rsp)
    0.00 :   18c14:       mov    %rdx,0x268(%rsp)
    0.00 :   18c1c:       mov    %rdx,0x270(%rsp)
    0.00 :   18c24:       mov    %rdx,0x278(%rsp)
    0.00 :   18c2c:       xsavec 0x40(%rsp)
    0.00 :   18c31:       mov    0x10(%rbx),%rsi
    0.00 :   18c35:       mov    0x8(%rbx),%rdi
    0.00 :   18c39:       callq  110c0 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE+0x6030>
    0.00 :   18c3e:       mov    %rax,%r11
    0.00 :   18c41:       mov    $0xee,%eax
    0.00 :   18c46:       xor    %edx,%edx
    0.00 :   18c48:       xrstor 0x40(%rsp)
    0.00 :   18c4d:       mov    0x30(%rsp),%r9
    0.00 :   18c52:       mov    0x28(%rsp),%r8
    0.00 :   18c57:       mov    0x20(%rsp),%rdi
    0.00 :   18c5c:       mov    0x18(%rsp),%rsi
    0.00 :   18c61:       mov    0x10(%rsp),%rdx
    0.00 :   18c66:       mov    0x8(%rsp),%rcx
    0.00 :   18c6b:       mov    (%rsp),%rax
    0.00 :   18c6f:       mov    %rbx,%rsp
    0.00 :   18c72:       mov    (%rsp),%rbx
    0.00 :   18c76:       add    $0x18,%rsp
    0.00 :   18c7a:       bnd jmpq *%r11
    0.00 :   18c7e:       xchg   %ax,%ax
